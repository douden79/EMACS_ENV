/************************************************
 * INCLUDE FILES                                *
 ************************************************/
#include "linuxcommon.h"
#include <linux/fb.h>
#include <linux/platform_device.h>
#include <linux/dma-mapping.h>
#include <linux/kthread.h>
#include "nexus_picture_ctrl.h"
#include "nexus_video_adj.h"
#include "nexus_video_window.h"
#include "nexus_mosaic_video_decoder.h"
#include "nexus_mosaic_display.h"
#include "nexus_ac3_encode.h"
#include "nexus_still_decoder.h"
#include "nexus_playpump.h"
#include "nexus_recpump.h"
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7362 || BCHP_CHIP == 73625 || BCHP_CHIP == 7439)    /* (at_7362_initial_work) */
#include "nexus_video_input.h"
#include "nexus_video_decoder_extra.h"
#endif
#if NEXUS_HAS_SYNC_CHANNEL
#include "nexus_sync_channel.h"
#endif
#include "project.h"
#include "brcmfb.h"
#include "comm_brcmfb.h"
#include "comm_brcmdvb_av.h"
#include "comm_demux.h"
#include "comm_frontuart.h"
#include "comm_sat.h"
#include "bcmdebug.h"
#define S_E1 -1
#define S_OK 0
#define UI_PIXEL_FORMAT				NEXUS_PixelFormat_eA8_R8_G8_B8
#define FBIO_SET_MANUAL_BLIT _IOW('F', 0x21, __u8)
#define FBIO_WAITFORVSYNC _IOW('F', 0x20, __u32)
#define FBIO_BLIT 0x22
#define FBIO_ACCEL 0x23
#define B_PVR_ATOM_SIZE ((188/4)*4096) /*nexus/modules/transport/7335/src/nexus_playpump_priv.h */

/* framebuffer_update_wslee_20160421_ */
#define HDFB  0
#define SDFB  1
#define MAXFB 2

#define NUM_CHILD_PROCESSES 2
#define DEFAULT_POSTION 0
#if DEFAULT_POSTION
#define FBSDWIDTH_OFFSET  60
#define FBSDHEIGHT_OFFSET 32
#define FBSDX_OFFSET      32
#define FBSDY_OFFSET      17

#define FBHDWIDTH_OFFSET  0
#define FBHDHEIGHT_OFFSET 0
#define FBHDX_OFFSET      0
#define FBHDY_OFFSET      0
#else
#define FBSDWIDTH_OFFSET  0
#define FBSDHEIGHT_OFFSET 0
#define FBSDX_OFFSET      0
#define FBSDY_OFFSET      0

#define FBHDWIDTH_OFFSET  0
#define FBHDHEIGHT_OFFSET 0
#define FBHDX_OFFSET      0
#define FBHDY_OFFSET      0
#endif

#if 1  /* wslee_20141126_1080P_framebuffer(1920*1080) */
#define OFFSET_WHDRES 	1920
#define OFFSET_HHDRES 	1080
//#define OFFSET_UHDVRES 	3840
//#define OFFSET_UHDHRES 	2160

static uint32_t offset_hdwidth, offset_hdheight;
#endif
#define OFFSET_WRES 	1280
#define OFFSET_HRES 	720

/* openpli_sd_and_fullhd_issue_wslee_20160408 */
#define OFFSET_SDWRES 	720
#define OFFSET_SDHRES 	576

#define MAX_OFFSET 10 /* this is the largest value found in g_testmode.zoffset */
//#define MAX_OFFSET 50 /* to support full zoffset of gui3dsetup, but resized small video is out of window */
uint32_t *g_offset;
uint16_t xoffset[2]={0,0};
uint16_t yoffset[2]={0,0};
uint16_t xresoffset[2]={0,0};
uint16_t yresoffset[2]={0,0};


uint16_t clearxoffset[2]={0,0};
uint16_t clearyoffset[2]={0,0};
uint16_t clearxresoffset[2]={0,0};
uint16_t clearyresoffset[2]={0,0};

/* sidabary-work-hdmi-00 */
#define __hdmi_trace__  0
//#define __DEBUG_FRAME_BUFF1__


static VIDEO_RESOLUTION_L wakeup_resolution;
static VIDEO_FORMAT_L wakeup_video_format;

uint16_t fixwidth=720;
uint16_t fixheight=576;

static unsigned int width = 720;
static unsigned int height =576;

static bool modeChange = false;
static bool colourChange = false;
static unsigned int num_fb = 2;
static unsigned int dest_rect[4] = { 0, 0, 0, 0 }; /* No destination specified */
static bool interlaced;
static uint32_t renderer_width;
static uint32_t renderer_height;
static unsigned int background = 0;
static int double_buffered = 1;
static int init_fb=0;
static int use_kernel_buffmgr = 1;
static int gfx_memory_size = 2 * GFX_MEM_ALLOC_SIZE;
static char* gfx_display_mode = "ARGB";
static Grp_S _bsp;
Grp_S  *bsp_p = &_bsp;
int GrpMode;
bool IsAvStandBymode=false;
static void init_Dma(void);
#define SPIN_LOCK 0
#if SPIN_LOCK
static spinlock_t gr_lock;
#endif
#if 1 // mkseo_graphic
NEXUS_AspectRatio NexusAspect;
static SURFACE_S blitCanvas;

static int checkValue = 1;
static bool accel_fillCommand = false;
static bool accel_accelDoit = false;
static int accel_fillColor = 0;
static int accel_blendflag= 0;
static int accel_xPosition = 0;
static int accel_yPosition = 0;
static int accel_xWidth = 0;
static int accel_yHeight = 0;

static int accel_srcStride = 0;
static int accel_srcWidth = 0;
static int accel_srcHeight = 0;

static int accel_srcFormatIndex = 0x0;
static int accel_srcFormat = 0;
static int accel_srcFormatPaladdr =0;
static int accel_srcFormatPaladdr1 = 0;
static bool accel_srcSetSurface = false;

static bool accel_setSrcRect = false;
static int accel_dstXposition = 0;
static int accel_dstYposition = 0;
static int accel_dstXwidth = 0;
static int accel_dstYheight = 0;

static int accel_blitSrcAddress = 0;
static int accel_blitDstAddress = 0;
void Set_AvStandbymode(bool bOn);
static bool blitAuto_txtfunction(bool force);
#if 0
static int accel_testReturn = 0;
#endif
#endif
#define FHD_VIDEOHSIZEOFFSET 40
#define FHD_VIDEOHOFFSET FHD_VIDEOHSIZEOFFSET
#if 1 // mkseo_tux_commander
static int tux_x = 0;
static int tux_y = 0;
static int tux_width = 0;
static int tux_height = 0;

static int tux_blit = 0;
static int tux_blitup = 0;
#endif
static int gDspInitialize = 0;    /* wslee_hdmi_update_20141031 */

typedef struct disp_command
{
    void *ptr;
    int len;
}bit_cmd;
struct fb_info_bcm97335
{
    struct fb_info *pfb_info[PHSTB_NUM_FB_DEVS];
    unsigned long fb_size[PHSTB_NUM_FB_DEVS];
    uint8_t *membase_virt;
    unsigned long fb_allocated;
};
static struct fb_info_bcm97335 gphStbFB_info;

#if 1 // mkseo_graphic
static int blit_prepare_surface(int mode);
static void blit_execute(int mode);
static void blit_destroy_surface(void);
#endif
/* framebuffer_update_wslee_20160421_ */
static int get_frame_buffer_mode(int xres);

bool GetBrowserMode(void);

static void fill_rect(NEXUS_SurfaceHandle surface, uint32_t color,int x,int y,int w,int h);
static void fill(NEXUS_SurfaceHandle surface, uint32_t color);
static void videoContrast_DefaultGain(int index);
#if 1 // mkseo_tux_commander
bool blitAuto_function(bool force);
#endif
void  display_Initialize__AV(void);
int display_Initialize__bsp(VIDEO_RESOLUTION_L resolution, VIDEO_FORMAT_L video_format );
static void _display_resolution_Set(int index, VIDEO_RESOLUTION_L resolution, VIDEO_FORMAT_L video_format, NEXUS_DisplaySettings *dsp);
static VIDEO_RESOLUTION_L _video_resolution = VIDEO_RESOLUTION_COUNT;
static VIDEO_FORMAT_L _video_format = VIDEO_FORMAT_COUNT;
static void offset_resolution_Set(int xres,int yres);
static void canvas_init_memory(int xres);
bool enable_blit=false;
VIDEO_RESOLUTION_L vidresolution;
char g_vidaspect[30];
static int display_resolution_Set__(VIDEO_RESOLUTION_L resolution, VIDEO_FORMAT_L video_format,bool force);
void blit_osdclear(int x,int y,int xres,int yres);
static NEXUS_Rect SrcRect;
static void Shutdown_AV(bool off);
VIDEO_FORMAT_L videoFmt;
static void init_recypump(void);
static void init_playpump(void);
extern bool normalStandby_onOff;
int RestartE2Mode;
int RestartE2VFDMode;
bool RestartFB;
NEXUS_Error nexus_ret;

/* framebuffer_update_wslee_20160421_ */
static int canvas_fix_width   = 0;
static int canvas_fix_height  = 0;
static int canvas_fix_set     = 0;
static int change_resolution_by_autoblit = 0; /* change_resolution_issue_20160423 */

#if 1	/* wslee_framebuffer_update_20150115_ */
static void canvas_destroy_surface(int mode);
void create_syncChannel(void);
void set_video_size_video1(int x,int y,int w,int h,char *aspect);
#endif

/* wslee_openpli_fullhd_issue_20160405 */
static void fb_variable_print(void)
{
    int  i;
	
    printk("----------------------------------------------------\n");
    for(i=0;i<2;i++)
    {
        printk("xoffset[%d]=%d,yoffset[%d]=%d,xresoffset[%d]=%d,yresoffset[%d]=%d\n",i,xoffset[i],i,yoffset[i],i,xresoffset[i],i,yresoffset[i]);
        printk("clearxoffset[%d]=%d,clearyoffset[%d]=%d,clearxresoffset[%d]=%d,clearyresoffset[%d]=%d\n",i,clearxoffset[i],i,clearyoffset[i],i,clearxresoffset[i],i,clearyresoffset[i]);
    }
    printk("wakeup_resolution=%d,wakeup_video_format=%d \n",wakeup_resolution,wakeup_video_format);
    printk("fixwidth=%d,fixheight=%d \n",fixwidth,fixheight);
    printk("width=%d,height=%d \n",width,height);
    printk("num_fb=%d\n",num_fb);
    printk("dest_rect[0]=%d,dest_rect[1]=%d,dest_rect[2]=%d,dest_rect[3]=%d \n",dest_rect[0],dest_rect[1],dest_rect[2],dest_rect[3]);
    printk("width=%d,height=%d \n",width,height);
    printk("interlaced=%d\n",interlaced);
    printk("renderer_width=%d,renderer_height=%d \n",renderer_width,renderer_height);
    printk("background=%d\n",background);
    printk("double_buffered=%d\n",double_buffered);
    printk("background=%d\n",background);
    printk("init_fb=%d\n",init_fb);
    printk("use_kernel_buffmgr=%d\n",use_kernel_buffmgr);
    printk("gfx_memory_size=0x%x\n",gfx_memory_size);
    printk("gfx_display_mode=%s\n",gfx_display_mode);
    printk("GrpMode=%d\n",GrpMode);
    printk("IsAvStandBymode=%d\n",IsAvStandBymode);
    printk("checkValue=%d\n",checkValue);
    printk("accel_fillCommand=%d\n",accel_fillCommand);
    printk("accel_accelDoit=%d\n",accel_accelDoit);
    printk("accel_fillColor=%d\n",accel_fillColor);
    printk("accel_blendflag=%d\n",accel_blendflag);
    printk("accel_xPosition=%d,accel_yPosition=%d,accel_xWidth=%d,accel_yHeight=%d \n",accel_xPosition,accel_yPosition,accel_xWidth,accel_yHeight);
    printk("accel_srcStride=%d,accel_srcWidth=%d,accel_srcHeight=%d \n",accel_srcStride,accel_srcWidth,accel_srcHeight);
    printk("accel_srcFormatIndex=%d,accel_srcFormat=%d,accel_srcFormatPaladdr=%d,accel_srcFormatPaladdr1=%d \n",accel_srcFormatIndex,accel_srcFormat,accel_srcFormatPaladdr,accel_srcFormatPaladdr1);
    printk("accel_srcSetSurface=%d,accel_setSrcRect=%d\n",accel_srcSetSurface,accel_setSrcRect);
    printk("accel_dstXposition=%d,accel_dstYposition=%d,accel_dstXwidth=%d,accel_dstYheight=%d \n",accel_dstXposition,accel_dstYposition,accel_dstXwidth,accel_dstYheight);
    printk("accel_blitSrcAddress=0x%x,accel_blitDstAddress=0x%x \n",accel_blitSrcAddress,accel_blitDstAddress);
    printk("tux_x=%d,tux_y=%d,tux_width=%d,tux_height=%d \n",tux_x,tux_y,tux_width,tux_height);
    printk("tux_blit=0x%x,tux_blitup=0x%x \n",tux_blit,tux_blitup);
    printk("gDspInitialize=%d\n",gDspInitialize);
    printk("----------------------------------------------------\n");
}
/* atv_fullhd_hbbtv2.0_issue_20160414 */
static int hbbtv_press_redkey = 0;
void brcmfb_store_hbbtv_key(int startkey)
{
    hbbtv_press_redkey = startkey;	
}
static int get_hbbtv_key_state(void)
{
    return hbbtv_press_redkey;
}

/* openpli_sd_and_fullhd_issue_wslee_20160408 */
static void canvas_w_h_resolution_reset(void)
{
    canvas_fix_width   = 0;
    canvas_fix_height  = 0;
    canvas_fix_set     = 0;
}

/* wslee_openpli_fullhd_issue_20160405 */
static void canvas_w_h_resolution_set(int w, int h)
{
    canvas_fix_width   = w;
    canvas_fix_height  = h;
    canvas_fix_set     = 1;
}

/* (2014/02/10) sidabary-remux-pip-review */
#if (BCHP_CHIP == 7346) || (BCHP_CHIP == 7439)	/* iqon-uhd */ 
static bool isPIP_Activated = false;

void Update_Pip_Mode(bool mode)
{
    isPIP_Activated = mode;
}

bool Status_Pip_Mode(void)
{
    return  isPIP_Activated;
}
#endif

static int blit_thread( void *data )
{
    while (!kthread_should_stop()) {
        /* sleep for a bit */
        set_current_state(TASK_INTERRUPTIBLE);
        schedule_timeout(200);
        if (kthread_should_stop())
            return 0;
        if(tux_blit==0) break;

        /* atv_fullhd_hbbtv2.0_issue_20160414 */
        if(tux_blitup)
        {
            Trick_UPeFakeSendPlayKey();
            BKNI_Sleep(200);
            tux_blitup=0;
        }
        blitAuto_txtfunction(true);
    }

}
#if BCHP_CHIP == 7335
NEXUS_DolbyVolumeHandle get_dolbyVolHandle(void)
{
    return bsp_p->DolbyVolumeHandle;
}
#else
NEXUS_DolbyVolume258Handle get_dolbyVol258Handle(void)
{
    return bsp_p->DolbyVolume258Handle;
}
#endif
int get_videoReslotion()
{
    return vidresolution;
}
void video_EncFmt_Set(VIDEO_FORMAT_L video_format)
{
    videoFmt=video_format;
    NEXUS_ComponentOutputHandle ncoh;
    NEXUS_ComponentOutputSettings ncos;
    ncoh = bsp_p->platformConfig.outputs.component[0];
    NEXUS_ComponentOutput_GetSettings(ncoh, &ncos);
#if 0
    ncos.dacs.RGB.dacRed=NEXUS_VideoDac_e0;
    ncos.dacs.RGB.dacGreen=NEXUS_VideoDac_e1;
    ncos.dacs.RGB.dacBlue=NEXUS_VideoDac_e2;
    ncos.dacs.YPrPb.dacY=NEXUS_VideoDac_e0;
    ncos.dacs.YPrPb.dacPr=NEXUS_VideoDac_e1;
    ncos.dacs.YPrPb.dacPb=NEXUS_VideoDac_e2;
#endif
    if (video_format == eVF_RGB_RGB)
    {
#if BCHP_CHIP == 7335
        NEXUS_Display_RemoveOutput(bsp_p->display[0], NEXUS_ComponentOutput_GetConnector(bsp_p->platformConfig.outputs.component[0]));
        NEXUS_Display_AddOutput(bsp_p->display[1], NEXUS_ComponentOutput_GetConnector(bsp_p->platformConfig.outputs.component[0]));
#endif
        ncos.type = NEXUS_ComponentOutputType_eRGB;
    }
    else 
    {
        ncos.type = NEXUS_ComponentOutputType_eYPrPb;
#if BCHP_CHIP == 7335
        NEXUS_Display_RemoveOutput(bsp_p->display[1], NEXUS_ComponentOutput_GetConnector(bsp_p->platformConfig.outputs.component[0]));
        NEXUS_Display_AddOutput(bsp_p->display[0], NEXUS_ComponentOutput_GetConnector(bsp_p->platformConfig.outputs.component[0]));
#endif
    }
    NEXUS_ComponentOutput_SetSettings(ncoh, &ncos);
    NEXUS_DisplayModule_SetAutomaticPictureQuality();
    NEXUS_DisplayModule_SetUpdateMode(NEXUS_DisplayUpdateMode_eAuto);
}
#if 1 // mkseo_standby_onoff_scartoutput_problem
VIDEO_FORMAT_L video_EncFmt_Get(void)
{
    debug_fb("##### video_EncFmt_Get : %x  \n", videoFmt);
    return videoFmt;
}
EXPORT_SYMBOL(video_EncFmt_Get);
#endif

/* sig - for input proc device */
bool is_rgb_576i(void)
{
    //printk(" videoFmt = %d \n", videoFmt);
    //printk(" vidresolution = %d \n", vidresolution);

#if 1 // mkseo_standby_onoff_scartoutput_problem
    if(videoFmt == eVF_RGB_RGB && vidresolution <= eVR_576I)
#else
        if(videoFmt == eVF_RGB_RGB && vidresolution == eVR_576I)
#endif
            return true;
        else
            return false;
}
EXPORT_SYMBOL(is_rgb_576i);

void fb_SetAlpahperty(uint8_t alpha)
{
    NEXUS_Display_GetGraphicsSettings(bsp_p->display[1], &bsp_p->GraphicSettings[1]);
    bsp_p->GraphicSettings[1].alpha=alpha;
    nexus_ret=NEXUS_Display_SetGraphicsSettings(bsp_p->display[1], &bsp_p->GraphicSettings[1]);
    BDBG_ASSERT(nexus_ret==NEXUS_SUCCESS);

    NEXUS_Display_GetGraphicsSettings(bsp_p->display[0], &bsp_p->GraphicSettings[0]);
    bsp_p->GraphicSettings[0].alpha=alpha;
    nexus_ret=NEXUS_Display_SetGraphicsSettings(bsp_p->display[0], &bsp_p->GraphicSettings[0]);
    BDBG_ASSERT(nexus_ret==NEXUS_SUCCESS);

    NEXUS_Surface_GetSettings(bsp_p->frame_buffer[0].handle, &bsp_p->surface_settings[0]);
    NEXUS_Surface_SetSettings(bsp_p->frame_buffer[0].handle, &bsp_p->surface_settings[0]);

    NEXUS_Surface_GetSettings(bsp_p->frame_buffer[1].handle, &bsp_p->surface_settings[1]);
    NEXUS_Surface_SetSettings(bsp_p->frame_buffer[1].handle, &bsp_p->surface_settings[1]);

}

#if 0
void fb_ClearOffset(uint16_t x,uint16_t y, uint16_t xres,uint16_t yres,bool clear)
{
    if(clear)
    {
        xoffset[SDFB]     =0;
        yoffset[SDFB]     =0;
        xresoffset[SDFB]  =0;
        yresoffset[SDFB]  =0;

        xoffset[HDFB]     =0;
        yoffset[HDFB]     =0;
        xresoffset[HDFB]  =0;
        yresoffset[HDFB]  =0;
    }
    else
    {
        xoffset[SDFB]     =x;
        yoffset[SDFB]     =y;
        xresoffset[SDFB]  =fixwidth-xres;
        yresoffset[SDFB]  =fixheight-yres;

        xoffset[HDFB]     =(width*x)/fixwidth;
        yoffset[HDFB]     =(height*y)/fixheight;
        xresoffset[HDFB]  =width-(width *xres) /fixwidth;
        yresoffset[HDFB]  =height-(height* yres)/fixheight;

    }

}
#endif

void fb_Setproperty(uint16_t x,uint16_t y, uint16_t xres,uint16_t yres,bool ClearFB)
{
    int i=0;
    if(xres==0 || yres==0 )
        return;
    xoffset[SDFB]     =x;
    yoffset[SDFB]     =y;
    xresoffset[SDFB]  =fixwidth-xres;
    yresoffset[SDFB]  =fixheight-yres;

    xoffset[HDFB]     =(width*x)/fixwidth;
    yoffset[HDFB]     =(height*y)/fixheight;
    xresoffset[HDFB]  =width-(width *xres) /fixwidth;
    yresoffset[HDFB]  =height-(height* yres)/fixheight;
    if(ClearFB)
    {
        for(i=0;i<2;i++)
            fill(bsp_p->frame_buffer[i].handle,0x0);
        init_fb=0;
    }
    /* clear ACT LED Flicker */
#if	((BCHP_CHIP == 7439) && (BUILD_MODEL_CODE == 7252011))	/* iqon-uhd-wslee-200m-micom */
    fpm_set_booting_finish_time();
#endif
}
EXPORT_SYMBOL(fb_Setproperty);

static void gfx_complete(void *data, int unused)
{
    BSTD_UNUSED(unused);
    BKNI_SetEvent((BKNI_EventHandle)data);
}
static void hotplug_callback(void *pParam, int iParam)
{
    NEXUS_HdmiOutputStatus status;
    NEXUS_HdmiOutputHandle hdmi = pParam;
    NEXUS_DisplayHandle display = (NEXUS_DisplayHandle)iParam;

    /* sidabary-work-hdmi-00 */
#if __hdmi_trace__
    printk("\n[sida] entered hotplug-callback...\n");
#endif

    NEXUS_HdmiOutput_GetStatus(hdmi, &status);

    /* sidabary-work-hdmi-00 */
#if __hdmi_trace__
    printk("[sida] connect(%d)\n",status.connected);
    printk("[sida] device(%d)\n",status.hdmiDevice);
    printk("[sida] name(%s)\n",status.monitorName);
    printk("[sida] preVF(%d)\n",status.preferredVideoFormat);
    printk("[sida] VF(%d)\n",status.videoFormat);
#endif

    /* the app can choose to switch to the preferred format, but it's not required. */
    if ( status.connected )
    {
        NEXUS_DisplaySettings displaySettings;

#if __hdmi_trace__
        printk("[sida] hotplug : as connected...\n");  /* sidabary-work-hdmi-00 */
#endif

        NEXUS_Display_GetSettings(display, &displaySettings);

#if __hdmi_trace__
        printk("[sida] displayVF(%d), support(%d)\n",displaySettings.format, status.videoFormatSupported[displaySettings.format]);  /* sidabary-work-hdmi-00 */
#endif

        if(!status.videoFormatSupported[displaySettings.format] )
        {

#if __hdmi_trace__
            printk("[sida] switch to preferred(%d)\n",status.preferredVideoFormat);     /* sidabary-work-hdmi-00 */
#endif

            displaySettings.format = status.preferredVideoFormat;

            NEXUS_Display_SetSettings(display, &displaySettings);                       /* sidabary-work-hdmi-00 */
        }
        else
        {
        /* wslee_hdmi_update_20141031 */	
        /* 2014/05/26, sidabary-pink-black */ 
        #if BCHP_CHIP == 7335        
            #if __hdmi_trace__
            printk("---- hotplug:support videoformat(%d)...\n",status.preferredVideoFormat); 
            #endif
            /* 2014/06/03, sidabary-hdmi-pink */
            #if 0
            NEXUS_HdmiOutput_PrevGetStatus(hdmi);            
            NEXUS_HdmiOutput_PrevSettings(hdmi);
            #endif
            NEXUS_HdmiOutput_SetTmdsSignal(hdmi,true);
        #else
            #if __hdmi_trace__
            printk("---- hotplug:support videoformat(%d)...\n",status.preferredVideoFormat);
            #endif
            if( gDspInitialize )  /* wslee_hdmi_update_20141031 */
            {
                #if 0 // (BCHP_CHIP == 7346) for sharp tv issue test(2015.07.24) /* wslee_hdmi_samsung_UHDTV_UE55HU7500 for skip 7362 */
                displaySettings.format = status.preferredVideoFormat;
                NEXUS_Display_SetSettings(display, &displaySettings);
                display_resolution_Set__(_video_resolution, _video_format, true);
                display_BspRemap(_video_resolution,_video_format);
                #endif
            }
        #endif
        }
    }
    else
    {
        #if __hdmi_trace__
        printk("[sida] hotplug : as no connected...\n");   /* sidabary-work-hdmi-00 */
        #endif
    }
}
/* wslee_openpli_fullhd_issue_20160405 */
static int get_frame_buffer_mode(int xres)
{
    int mode;

    if(xres == 720)  mode = SDFB;
    else             mode = HDFB;

    return mode;	
}
void blit_osdclear(int x,int y,int xres,int yres)
{
    int i =0;
    static NEXUS_Rect SrcRect;
    NEXUS_Rect DstRect[2];
    /* wslee_openpli_fullhd_issue_20160405 */
    int mode = get_frame_buffer_mode(xres);

    SrcRect.x=x;SrcRect.y=y;SrcRect.width=xres;SrcRect.height=yres;
    for (i=0;i<2;i++)
    {
        NEXUS_Surface_Flush(bsp_p->frame_buffer[i].handle);
        DstRect[i]=bsp_p->GraphicSettings[i].clip;
        DstRect[i].x=clearxoffset[i];DstRect[i].y=clearyoffset[i];
        DstRect[i].width-=clearxresoffset[i];DstRect[i].height-=clearyresoffset[i];

        nexus_ret=NEXUS_Graphics2D_FastBlit(bsp_p->graphics,
                bsp_p->frame_buffer[i].handle,&DstRect[i],
                bsp_p->canvas[mode].handle, &SrcRect,
                NEXUS_BlitColorOp_eCopySource,NEXUS_BlitAlphaOp_eCopySource,0x0);
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7362 || BCHP_CHIP == 73625 || BCHP_CHIP == 7439)        /* (at_7362_initial_work) */
        if (nexus_ret == NEXUS_GRAPHICS2D_QUEUE_FULL) {
            BKNI_WaitForEvent(bsp_p->spaceAvailableEvent, BKNI_INFINITE);
        }
        nexus_ret= NEXUS_Graphics2D_Checkpoint(bsp_p->graphics, NULL);
        if (nexus_ret== NEXUS_GRAPHICS2D_QUEUED) {
            BKNI_WaitForEvent(bsp_p->event, BKNI_INFINITE);
        }
#else
        if (nexus_ret)
        {
            nexus_ret= NEXUS_Graphics2D_Checkpoint(bsp_p->graphics, NULL);
            if (nexus_ret== NEXUS_GRAPHICS2D_QUEUED) {
                nexus_ret= BKNI_WaitForEvent(bsp_p->event, BKNI_INFINITE);
                BDBG_ASSERT(!nexus_ret);
            }
        }
#endif
    }
    NEXUS_Surface_Flush(bsp_p->canvas[mode].handle);


}
bool  initfb=false;
static void blit_tuxosd(int x,int y,int xres,int yres)
{
    int i =1;
    NEXUS_Rect DstRect[2];
    /* wslee_openpli_fullhd_issue_20160405 */
    int mode = get_frame_buffer_mode(xres);

    if(mode==SDFB)
        i=0;
#if (BCHP_CHIP == 7439)	/* iqon-uhd-teletext-issue-wslee */
    NEXUS_Surface_Flush(bsp_p->frame_buffer[i].handle);
#endif
    width=xres;height=yres;
    SrcRect.x=x;SrcRect.y=y;SrcRect.width=xres;SrcRect.height=yres;
    DstRect[i]=bsp_p->GraphicSettings[i].clip;
    DstRect[i].x=xoffset[i];DstRect[i].y=yoffset[i];DstRect[i].width-=xresoffset[i];DstRect[i].height-=yresoffset[i];
    if(xres>720)
    {
        if(i==0)
        {
            DstRect[i].width  -=FBHDWIDTH_OFFSET;
            DstRect[i].height -=FBHDHEIGHT_OFFSET;
            DstRect[i].x      +=FBHDX_OFFSET;
            DstRect[i].y      +=FBHDY_OFFSET;
        }
        else
        {
            DstRect[i].width  -=FBSDWIDTH_OFFSET;
            DstRect[i].height -=FBSDHEIGHT_OFFSET;
            DstRect[i].x      +=FBSDX_OFFSET;
            DstRect[i].y      +=FBSDY_OFFSET;
        }
    }
/* wslee_7335_update_20160429 */
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7362 || BCHP_CHIP == 73625 || BCHP_CHIP == 7439)	/* iqon-uhd */
    /* openpli_sd_and_fullhd_issue_wslee_20160408 */
    nexus_ret=NEXUS_Graphics2D_FastBlit(bsp_p->graphics,
            bsp_p->frame_buffer[i].handle,&DstRect[i],
            bsp_p->canvas[mode].handle, &SrcRect,
            NEXUS_BlitColorOp_eCopySource,NEXUS_BlitAlphaOp_eCopySource,0x0);
#else
    /* it need for 7335 botting problem & enigma restart problem */
    nexus_ret=NEXUS_Graphics2D_FastBlit(bsp_p->graphics,
            bsp_p->frame_buffer[i].handle,&DstRect[i],
            bsp_p->frame_buffer[mode].handle, &SrcRect,
            NEXUS_BlitColorOp_eCopySource,NEXUS_BlitAlphaOp_eCopySource,0x0);
#endif
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7362 || BCHP_CHIP == 73625 || BCHP_CHIP == 7439)	/* iqon-uhd */
    if (nexus_ret == NEXUS_GRAPHICS2D_QUEUE_FULL) {
        BKNI_WaitForEvent(bsp_p->spaceAvailableEvent, BKNI_INFINITE);
    }
    nexus_ret= NEXUS_Graphics2D_Checkpoint(bsp_p->graphics, NULL);
    if (nexus_ret== NEXUS_GRAPHICS2D_QUEUED) {
        BKNI_WaitForEvent(bsp_p->event, BKNI_INFINITE);
    }
#else
    nexus_ret= NEXUS_Graphics2D_Checkpoint(bsp_p->graphics, NULL);
    if (nexus_ret== NEXUS_GRAPHICS2D_QUEUED) {
        BKNI_WaitForEvent(bsp_p->event, BKNI_INFINITE);
    }
#endif
#if (BCHP_CHIP == 7439)	/* iqon-uhd-teletext-issue-wslee */
    NEXUS_Surface_Flush(bsp_p->canvas[mode].handle);
#endif
}
static void blit_osd(int x,int y,int xres,int yres)
{
    int i = 0;
    NEXUS_Rect DstRect[2];
    /* wslee_openpli_fullhd_issue_20160405 */
    int mode = get_frame_buffer_mode(xres);

    /* wslee blocking for 7335 picon deletion after teletext(20141014) */
#if 0 // BCHP_CHIP == 7335   
    /* it need teletxt clear */
    if(SrcRect.width != xres )//|| SrcRect.height!=yres)
    {
        SrcRect.x=x;SrcRect.y=y;SrcRect.width=xres;SrcRect.height=yres;
        BKNI_Memset(bsp_p->canvas[HDFB].memory.buffer,0,1024*2 * bsp_p->canvas[HDFB].memory.pitch);
        BKNI_Memset(bsp_p->canvas[SDFB].memory.buffer,0,1024*2 * bsp_p->canvas[SDFB].memory.pitch);
        if(xres > 720)
        {
            if(initfb==false)
            {
                fb_ClearOffset(0,0,720,750,false);
                initfb=true;
                blit_osdclear(0,0,720,1024*2);
                return;
            }
            else
            {
                fb_ClearOffset(0,0,0,0,true);
                blit_osdclear(0,0,720,1024*2);
                return;

            }
        }
        else
            fb_ClearOffset(0,0,0,0,true);
    }
#endif
    width=xres;height=yres;
    SrcRect.x=x;SrcRect.y=y;SrcRect.width=xres;SrcRect.height=yres;
    for (i=0;i<2;i++)
    {
        NEXUS_Surface_Flush(bsp_p->frame_buffer[i].handle);
        DstRect[i]=bsp_p->GraphicSettings[i].clip;
        DstRect[i].x=xoffset[i];DstRect[i].y=yoffset[i];DstRect[i].width-=xresoffset[i];DstRect[i].height-=yresoffset[i];
        if(xres>720)
        {
            if(i==0)
            {
                DstRect[i].width  -=FBHDWIDTH_OFFSET;
                DstRect[i].height -=FBHDHEIGHT_OFFSET;
                DstRect[i].x      +=FBHDX_OFFSET;
                DstRect[i].y      +=FBHDY_OFFSET;
            }
            else
            {
                DstRect[i].width  -=FBSDWIDTH_OFFSET;
                DstRect[i].height -=FBSDHEIGHT_OFFSET;
                DstRect[i].x      +=FBSDX_OFFSET;
                DstRect[i].y      +=FBSDY_OFFSET;
            }
        }
        nexus_ret=NEXUS_Graphics2D_FastBlit(bsp_p->graphics,
                bsp_p->frame_buffer[i].handle,&DstRect[i],
                bsp_p->canvas[mode].handle, &SrcRect,
                NEXUS_BlitColorOp_eCopySource,NEXUS_BlitAlphaOp_eCopySource,0x0);

#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7362 || BCHP_CHIP == 73625 || BCHP_CHIP == 7439)	/* iqon-uhd */
        if (nexus_ret == NEXUS_GRAPHICS2D_QUEUE_FULL) {
            BKNI_WaitForEvent(bsp_p->spaceAvailableEvent, BKNI_INFINITE);
        }
        nexus_ret= NEXUS_Graphics2D_Checkpoint(bsp_p->graphics, NULL);
        if (nexus_ret== NEXUS_GRAPHICS2D_QUEUED) {
            BKNI_WaitForEvent(bsp_p->event, BKNI_INFINITE);
        }
#else
        if (nexus_ret || GetBrowserMode())
        {
            nexus_ret= NEXUS_Graphics2D_Checkpoint(bsp_p->graphics, NULL);
            if (nexus_ret== NEXUS_GRAPHICS2D_QUEUED) {
                BKNI_WaitForEvent(bsp_p->event, BKNI_INFINITE);
            }
        }
#endif
    }
    NEXUS_Surface_Flush(bsp_p->canvas[mode].handle);

}
BKNI_EventHandle get_PlaypumpEvent(int idx)
{
    return bsp_p->PlaypumpEvent[idx];

}
NEXUS_PlaypumpHandle get_Playpump(int idx)
{
    return bsp_p->Playpump[idx];

}
BKNI_EventHandle get_stillenvent(void)
{
    return bsp_p->still_picture_event;

}
NEXUS_StillDecoderHandle get_vid1Handle(voi)
{
    return bsp_p->stillDecoder;

}
NEXUS_VideoDecoderHandle get_vidHandle(int index)
{
    return bsp_p->VideoDecoderHandle[index];

}
#if UNIFIEDVERSION
NEXUS_CecHandle get_hdmiCecHandle(void)
{
    return bsp_p->platformConfig.outputs.cec[0];

}
#endif
NEXUS_HdmiOutputHandle get_hdmiDacHandle(void)
{
    return bsp_p->platformConfig.outputs.hdmi[0];

}
NEXUS_SpdifOutputHandle get_spdifDacHandle(void)
{
    return bsp_p->platformConfig.outputs.spdif[0];

}

NEXUS_ComponentOutputHandle get_componentDacHandle(void)
{
    return bsp_p->platformConfig.outputs.component[0];

}
NEXUS_CompositeOutputHandle get_compositeDacHandle(void)
{
    return bsp_p->platformConfig.outputs.composite[0];
}


NEXUS_AudioDacHandle get_audDacHandle(int type)
{
    return bsp_p->platformConfig.outputs.audioDacs[0];

}

NEXUS_AudioDecoderHandle get_audHandle(void)
{
    if (is_dts_ac3_passthru())
        return bsp_p->AudPassthruHandle;
    return bsp_p->AudDecoderHandle;
}
static bool isPalMode(void)
{
    NEXUS_DisplaySettings ds0;
    NEXUS_Display_GetSettings(bsp_p->display[0], &ds0);
    if (ds0.format == NEXUS_VideoFormat_ePal ||
            ds0.format == NEXUS_VideoFormat_e720p ||
            ds0.format == NEXUS_VideoFormat_e1080i50hz)
        return true;

    return false;
}
/** @brief An enumeration of valid frame rates for the renderer. */
typedef enum phStbVideoRenderer_FrameRate
{
    phStbVideoRenderer_FrameRateNone     = 0x00,
    phStbVideoRenderer_FrameRate_23_97   = 0x01,
    phStbVideoRenderer_FrameRate_24      = 0x02,
    phStbVideoRenderer_FrameRate_25      = 0x03,
    phStbVideoRenderer_FrameRate_29_97   = 0x04,
    phStbVideoRenderer_FrameRate_30      = 0x05,
    phStbVideoRenderer_FrameRate_50      = 0x06,
    phStbVideoRenderer_FrameRate_59_94   = 0x07,
    phStbVideoRenderer_FrameRate_60      = 0x08,
    phStbVideoRenderer_FrameRate_75      = 0x09
} phStbVideoRenderer_FrameRate_t;
static phStbVideoRenderer_FrameRate_t renderer_framerate;

typedef enum phStbVideoRenderer_GfxMode
{
    phStbVideoRenderer_GfxMode_Clut256,
    phStbVideoRenderer_GfxMode_RGB565,
    phStbVideoRenderer_GfxMode_ARGB1555,
    phStbVideoRenderer_GfxMode_ARGB4444,
    phStbVideoRenderer_GfxMode_ARGB8888,
    phStbVideoRenderer_GfxMode_Invalid
}phStbVideoRenderer_GfxMode_t;
#ifdef current
#undef current
#endif
typedef struct phStbVideoRenderer_GfxClut
{
    uint32_t gfxClutSize;
    uint32_t gfxClutStart;
    uint32_t gfxClutData[256];
} phStbVideoRenderer_GfxClut_t;
BKNI_EventHandle event;
static void fill(NEXUS_SurfaceHandle surface, uint32_t color);
static inline void phStbFB_setPixel(phStbVideoRenderer_GfxMode_t mode, u32 value, u8 *dst);

#define PHSTBFB_REQUIRED_MEMORY(_width, _height, _bpp) ((num_fb * _width * _height  * (double_buffered ? 2 : 1) * _bpp) / 8)

static struct fb_fix_screeninfo gphStbFB_fix =
{
#if BCHP_CHIP == 7346
    #if 1   /* atv requirement for hbbtv2.0 support wslee_20160307 */
    .id =       "bcmfb",
    #else
    .id =       "BCM97356 FB",
    #endif
#elif (BCHP_CHIP == 7362 || BCHP_CHIP == 73625)       /* (at_7362_initial_work) */
    #if 1   /* atv requirement for hbbtv2.0 support wslee_20160307 */
    .id =       "bcmfb",
    #else
    .id =       "BCM97362 FB",
    #endif
#elif (BCHP_CHIP == 7439)	/* iqon-uhd */
	.id =       "bcmfb",
#else
    #if 1   /* atv requirement for hbbtv2.0 support wslee_20160307 */
    .id =       "bcmfb",
    #else
    .id =       "BCM97335 FB",
    #endif
#endif
    .type =     FB_TYPE_PACKED_PIXELS,
    .visual =   FB_VISUAL_TRUECOLOR,
    .xpanstep = 0,
    .ypanstep = 1,
    .ywrapstep = 1,
    .accel =    FB_ACCEL_NONE,
};

/**
 *  Local structure holding all fb info.
 */
NEXUS_StcChannelHandle get_stcPIPHandle(void)
{
    return bsp_p->stcPIPChannel;
}
NEXUS_StcChannelHandle get_stcHandle(void)
{
    return bsp_p->stcChannel;
}
void Set_StcVideoMode(bool videoMode)
{
#if 0
    NEXUS_Error nexus_rc;
    NEXUS_StcChannelSettings stcSettings;
    NEXUS_StcChannel_GetSettings(bsp_p->stcChannel, &stcSettings);
    NEXUS_PidChannelHandle  APidChannelHandle  = (NEXUS_PidChannelHandle)get_DecoderChannel(1);
    NEXUS_PidChannelHandle  VPidChannelHandle  = (NEXUS_PidChannelHandle)get_DecoderChannel(0);
    stcSettings.mode = NEXUS_StcChannelMode_eAuto;/* live */
    if(videoMode)
    {
        stcSettings.modeSettings.Auto.behavior =NEXUS_StcChannelAutoModeBehavior_eVideoMaster;
        stcSettings.modeSettings.pcr.pidChannel = VPidChannelHandle;
    }
    else
    {
        stcSettings.modeSettings.Auto.behavior =NEXUS_StcChannelAutoModeBehavior_eAudioMaster;
        stcSettings.modeSettings.pcr.pidChannel = APidChannelHandle;
    }
    nexus_rc= NEXUS_StcChannel_SetSettings(bsp_p->stcChannel, &stcSettings);
    BDBG_ASSERT(!nexus_rc);
#endif
}
EXPORT_SYMBOL(Set_StcVideoMode);
EXPORT_SYMBOL(get_stcHandle);
static void canvas_init_memory(int xres)
{

    struct fb_info *pFbInfo;
    NEXUS_SurfaceSettings surface_settings;
    /* wslee_openpli_fullhd_issue_20160405 */
    int mode = get_frame_buffer_mode(xres);

    if(bsp_p->canvas[mode].handle)
    {
        NEXUS_Surface_GetSettings(bsp_p->canvas[mode].handle, &surface_settings);
        NEXUS_Surface_SetSettings(bsp_p->canvas[mode].handle, &surface_settings);
    }
    pFbInfo = gphStbFB_info.pfb_info[0];
    gphStbFB_info.membase_virt= bsp_p->canvas[mode].memory.buffer;
    pFbInfo->screen_base = (char __iomem*)gphStbFB_info.membase_virt;
    pFbInfo->fix.smem_start = (unsigned long)pFbInfo->screen_base;
    pFbInfo->fix.smem_len =gfx_memory_size;
    pFbInfo->fix.line_length = (pFbInfo->var.bits_per_pixel / 8) * pFbInfo->var.xres_virtual;
    gphStbFB_info.fb_size[0] = gphStbFB_info.fb_size[1] = (pFbInfo->var.xres_virtual *
            pFbInfo->var.yres_virtual *(pFbInfo->var.bits_per_pixel / 8));

    pFbInfo->screen_size = gphStbFB_info.fb_size[0];
}
static int phStbFB_init_memory(void)
{
    tvlite_scart_aspect_ratio_Set(1);
    init_playpump();
    display_Initialize__AV();
    display_Initialize__bsp(eVR_1080I50,eVF_RGB_RGB);
    video_format_Set(eVF_YBR_CVBS);	
    canvas_init_memory(720);
    fill(bsp_p->frame_buffer[0].handle,0x0);
    fill(bsp_p->frame_buffer[1].handle,0x0);
    init_recypump();
#if 0
    init_Dma();
#endif
    display_resolution_Set__(eVR_720P50, eVF_YBR_CVBS,true);
#if (BCHP_CHIP == 7335)         /* BCHP_CHIP != 7346 (at_7362_initial_work) */
    display_resolution_Set__(eVR_1080I50, eVF_YBR_CVBS,true);
#endif
    return 0;
}

/* Free the framebuffer memory.
*/
static void phStbFB_free_memory(void)
{
    unsigned long page;

    if(!use_kernel_buffmgr) {
        for (page = (int)gphStbFB_info.membase_virt;
                page < PAGE_ALIGN((unsigned long)gphStbFB_info.membase_virt + gphStbFB_info.fb_allocated);
                page += PAGE_SIZE)
        {
            ClearPageReserved(virt_to_page((void *)page));
        }

        if (gphStbFB_info.fb_allocated <= GFX_MEM_ALLOC_SIZE)
        {
            /*Free pages*/
            free_pages((unsigned int)gphStbFB_info.membase_virt, get_order(gphStbFB_info.fb_allocated - 1));
        }
        else
        {
            unsigned int physicalAddress;

            physicalAddress = virt_to_phys(gphStbFB_info.membase_virt);
            /* Return the memory in multiples of 4MB */
            while(gphStbFB_info.fb_allocated > 0)
            {
                free_pages((int)phys_to_virt(physicalAddress), get_order(GFX_MEM_ALLOC_SIZE - 1));
                physicalAddress += GFX_MEM_ALLOC_SIZE;
                gphStbFB_info.fb_allocated -= GFX_MEM_ALLOC_SIZE;
            }
        }
    }
    gphStbFB_info.membase_virt = NULL;
    gphStbFB_info.fb_allocated = 0;
}


/**
 * phStbFB_setup_destination_offset
 *
 * Resets the offsets for onscreen rectangle that the frame buffer is displayed in
 *
 */

/**
 * phStbFB_reset_destination_rect
 *
 * Resets the onscreen rectangle that the frame buffer is displayed in
 *
 */
static void phStbFB_reset_destination_rect(void)
{
    dest_rect[0] = 0;
    dest_rect[1] = 0;
    dest_rect[2] = renderer_width;
    dest_rect[3] = renderer_height;
}

/**
 * phStbFB_check_resolution
 *
 * Checks to see if the video renderer resolution has changed
 *
 */

static void phStbFb_setDefaultCLUT(struct fb_info *pFbInfo)
{
    /* Set up the CLUT */
    uint32_t red;
    uint32_t green;
    uint32_t blue;
    __u16 *pRed = pFbInfo->cmap.red;
    __u16 *pGreen = pFbInfo->cmap.green;
    __u16 *pBlue = pFbInfo->cmap.blue;
    __u16 *pTransp = pFbInfo->cmap.transp;

    pFbInfo->cmap.start = 0;
    pFbInfo->cmap.len = 256;

    /* Create a 8-8-4 palette */
    for(red = 0; red < 8; red++)
    {
        for(green = 0; green < 8; green++)
        {
            for(blue = 0; blue < 4; blue++)
            {
                *pRed++    = (__u16)((red * 0xFFFF) / 8);
                *pGreen++  = (__u16)((green * 0xFFFF) / 8);
                *pBlue++   = (__u16)((blue * 0xFFFF) / 4);
                *pTransp++ = 0xFFFF;
            }
        }
    }
}
static phStbVideoRenderer_GfxMode_t phStbFB_type(struct fb_var_screeninfo *var)
{
    phStbVideoRenderer_GfxMode_t mode;

    switch (var->bits_per_pixel)
    {
        case(32) :
            if ((var->transp.length == NUM_ARGB8888_TRANS) &&
                    (var->red.length    == NUM_ARGB8888_RED)   &&
                    (var->green.length  == NUM_ARGB8888_GREEN) &&
                    (var->blue.length   == NUM_ARGB8888_BLUE)) 	{
                mode = phStbVideoRenderer_GfxMode_ARGB8888;
            }
            else {
                mode = phStbVideoRenderer_GfxMode_Invalid;
            }
            break;
        case(16) :
            if ((var->transp.length == NUM_ARGB1555_TRANS) &&
                    (var->red.length    == NUM_ARGB1555_RED)   &&
                    (var->green.length  == NUM_ARGB1555_GREEN) &&
                    (var->blue.length   == NUM_ARGB1555_BLUE)){
                mode = phStbVideoRenderer_GfxMode_ARGB1555;
            }
            else if ((var->transp.length == NUM_ARGB4444_TRANS) &&
                    (var->red.length    == NUM_ARGB4444_RED)   &&
                    (var->green.length  == NUM_ARGB4444_GREEN) &&
                    (var->blue.length   == NUM_ARGB4444_BLUE)) {
                mode = phStbVideoRenderer_GfxMode_ARGB4444;
            } else	{
                if ((var->transp.length == NUM_RGB565_TRANS) &&
                        (var->red.length    == NUM_RGB565_RED)   &&
                        (var->green.length  == NUM_RGB565_GREEN) &&
                        (var->blue.length   == NUM_RGB565_BLUE))
                {
                    mode = phStbVideoRenderer_GfxMode_RGB565;
                }
                else
                {
                    mode = phStbVideoRenderer_GfxMode_Invalid;
                }
            }

            break;
        case(8) :
            if ((var->transp.length == NUM_CLUT8_TRANS) &&
                    (var->red.length    == NUM_CLUT8_RED)   &&
                    (var->green.length  == NUM_CLUT8_GREEN) &&
                    (var->blue.length   == NUM_CLUT8_BLUE)) {
                mode = phStbVideoRenderer_GfxMode_Clut256;
            }
            else {
                mode = phStbVideoRenderer_GfxMode_Invalid;
            }
            break;
        default:
            mode = phStbVideoRenderer_GfxMode_Invalid;
            break;
    }

    return mode;
}
static int bcm7335_fb_check_var(struct fb_var_screeninfo *var, struct fb_info *info)
{
    static   uint32_t prevRendererWidth[PHSTB_NUM_FB_DEVS] = {0,0};
    static   uint32_t prevRendererHeight[PHSTB_NUM_FB_DEVS] = {0,0};
    static   bool prevRendererInterlaced[PHSTB_NUM_FB_DEVS] = {false, false};
    static   phStbVideoRenderer_FrameRate_t prevRendererFramerate[PHSTB_NUM_FB_DEVS] = {phStbVideoRenderer_FrameRateNone, phStbVideoRenderer_FrameRateNone};
    colourChange = colourChange ||
        ((info->var.bits_per_pixel != var->bits_per_pixel) ||
         (info->var.red.length     != var->red.length) ||
         (info->var.red.offset     != var->red.offset) ||
         (info->var.green.length   != var->green.length) ||
         (info->var.green.offset   != var->green.offset) ||
         (info->var.blue.length    != var->blue.length) ||
         (info->var.blue.offset    != var->blue.offset) ||
         (info->var.transp.length  != var->transp.length) ||
         (info->var.transp.offset  != var->transp.offset));

    if (colourChange)
    {
        if (phStbFB_type(var) == phStbVideoRenderer_GfxMode_Invalid)
        {
            colourChange = false;
            return 0;
        }
        info->var.bits_per_pixel = var->bits_per_pixel;
        info->var.red.length     = var->red.length;
        info->var.red.offset     = var->red.offset;
        info->var.green.length   = var->green.length;
        info->var.green.offset   = var->green.offset;
        info->var.blue.length    = var->blue.length;
        info->var.blue.offset    = var->blue.offset;
        info->var.transp.length  = var->transp.length;
        info->var.transp.offset  = var->transp.offset;
    }

    modeChange = modeChange ||
        (info->var.xres     != var->xres) ||
        (info->var.yres     != var->yres) ||
        (interlaced         != prevRendererInterlaced[info->node]) ||
        (renderer_framerate != prevRendererFramerate[info->node])  ||
        (renderer_width     != prevRendererWidth[info->node])      ||
        (renderer_height    != prevRendererHeight[info->node]);

    /*If something has changed look at values*/
    if(modeChange)
    {
        prevRendererInterlaced[info->node] = interlaced;
        prevRendererWidth[info->node] = renderer_width;
        prevRendererHeight[info->node] = renderer_height;
        prevRendererFramerate[info->node] = renderer_framerate;
        info->var.xres = var->xres;
        info->var.yres = var->yres;
    }
    /* wslee_openpli_fullhd_issue_20160405 */
    GrpMode = get_frame_buffer_mode(info->var.xres);
    return 0;
}
static int bcm7335_fb_set_par(struct fb_info *info)
{
    /* wslee_openpli_fullhd_issue_20160405 */
    int  mode = get_frame_buffer_mode(info->var.xres);

    /* Check to see if a mode change has been requested */
    debug_fb("[%s] <%d>xres %d yres %d \n",__func__,__LINE__,info->var.xres,info->var.yres);
#if defined(__DEBUG_FRAME_BUFF1__)
    printk("@@@@@@@@@@@@@ BEFORE: info->var.xres=%d, info->var.yres=%d [canvas_fix_width=%d]\n",info->var.xres,info->var.yres,canvas_fix_width);
#endif

    /* openpli_sd_and_fullhd_issue_wslee_20160408 */
    if(mode == HDFB)
    {
        if(GetBlitMode() == 1) /* blit auto mode for teletext */
        {
            change_resolution_by_autoblit = 1; /* change_resolution_issue_20160423 */
            return 0;
        }
        if(canvas_fix_width >= 720)
        {
            if(canvas_fix_width  != info->var.xres) info->var.xres = canvas_fix_width; 
            if(canvas_fix_height != info->var.yres) info->var.yres = canvas_fix_height; 
        }
        if(canvas_fix_set == 0)
        {
            canvas_w_h_resolution_set(info->var.xres,info->var.yres);
        }
    }
    else    /* wslee_openpli_sdskin_issue_ */
    {
        if(GetBlitMode() == 0) /* blit manual mode for teletext */
        {
            if(canvas_fix_width >= 720)
            {
                if(canvas_fix_width != info->var.xres) info->var.xres = canvas_fix_width; 
                if(canvas_fix_height != info->var.yres) info->var.yres = canvas_fix_height; 
            }
        }
        else
        {
            change_resolution_by_autoblit = 1; /* change_resolution_issue_20160423 */
        }
        if(canvas_fix_set == 0)
        {
            canvas_w_h_resolution_set(info->var.xres,info->var.yres);
        }
    }
    if(info->var.xres == OFFSET_WHDRES)	/* 1920*1080 */
    {
        if(info->var.xres != OFFSET_WHDRES) info->var.xres=OFFSET_WHDRES;
        if(info->var.yres != OFFSET_HHDRES) info->var.yres=OFFSET_HHDRES;
        if( info->var.xres != offset_hdwidth || info->var.yres != offset_hdheight)
        {
            canvas_destroy_surface(mode);
            offset_resolution_Set(info->var.xres,info->var.yres);
            offset_hdwidth  = info->var.xres;
            offset_hdheight = info->var.yres;
        }
    }
    else if(info->var.xres == OFFSET_WRES) /* 1280 * 720 */
    {
        if(info->var.xres != OFFSET_WRES) info->var.xres=OFFSET_WRES;
        if(info->var.yres != OFFSET_HRES) info->var.yres=OFFSET_HRES;
        if( info->var.xres != offset_hdwidth || info->var.yres != offset_hdheight)
        {
            canvas_destroy_surface(mode);
            offset_resolution_Set(info->var.xres,info->var.yres);
            offset_hdwidth  = info->var.xres;
            offset_hdheight = info->var.yres;
        }
    }
    else    /* 720*576 wslee_openpli_sdskin_issue_ */
    {
        /* framebuffer_update_wslee_20160421_ */
        #if 0
        if(info->var.xres != OFFSET_SDWRES) info->var.xres=OFFSET_SDWRES;
        if(info->var.yres != OFFSET_SDHRES) info->var.yres=OFFSET_SDHRES;
        if( info->var.xres != offset_hdwidth || info->var.yres != offset_hdheight)
        {
            canvas_destroy_surface(mode);
            offset_resolution_Set(info->var.xres,info->var.yres);
            offset_hdwidth  = info->var.xres;
            offset_hdheight = info->var.yres;
        }
        #endif
    }

#if defined(__DEBUG_FRAME_BUFF1__)
  	printk("@@@@@@@@@@@@@ AFTER: info->var.xres=%d, info->var.yres=%d mode:color(%d,%d)-pixel(%d)\n",info->var.xres,info->var.yres,modeChange,colourChange,info->var.bits_per_pixel);
#endif

    if (!modeChange &&
            !colourChange)
    {
        return 0;
    }
    modeChange = false;

    /* Check to see if a colour mode change (to CLUT) has been requested */
    if (colourChange &&
            info->var.bits_per_pixel == 8)
    {
        phStbFb_setDefaultCLUT(info);
    }
    colourChange = false;

    canvas_init_memory(info->var.xres);
    height = info->var.yres;

    info->var.yres_virtual = double_buffered ? info->var.yres*2 : info->var.yres;
    info->var.xres_virtual = info->var.xres;

    gphStbFB_info.pfb_info[info->node]->fix.line_length = (info->var.bits_per_pixel / 8) *
        info->var.xres_virtual;

    gphStbFB_info.pfb_info[info->node]->screen_size = gphStbFB_info.fb_size[info->node]
        = (info->var.xres_virtual *
                info->var.yres_virtual *
                (info->var.bits_per_pixel / 8));

    gphStbFB_info.pfb_info[info->node]->screen_base = (char __iomem*)gphStbFB_info.membase_virt;
    gphStbFB_info.pfb_info[info->node]->fix.smem_start = virt_to_phys(gphStbFB_info.pfb_info[info->node]->screen_base);
    /* wslee_openpli_fullhd_issue_20160405 */
    GrpMode = get_frame_buffer_mode(info->var.xres);

#if 1 // mkseo_tux_commander
    tux_x = info->var.xoffset;
    tux_y = info->var.yoffset;
    tux_width = info->var.xres;
    tux_height = info->var.yres;
#endif
//	fb_variable_print();
    return 0;
}

static int bcm7335_fb_setcolreg(unsigned regno, unsigned red, unsigned green,
        unsigned blue, unsigned transp,
        struct fb_info *info)
{
    __u16 *pRed = info->cmap.red;
    __u16 *pGreen = info->cmap.green;
    __u16 *pBlue = info->cmap.blue;
    __u16 *pTransp = info->cmap.transp;
    pRed[regno]    = (__u16)red;
    pGreen[regno]  = (__u16)green;
    pBlue[regno]   = (__u16)blue;
    pTransp[regno] = (__u16)transp;
    return 0;
}

static int bcm7335_setcmap(struct fb_cmap *cmap, struct fb_info *info)
{
    fb_copy_cmap(cmap, &info->cmap);
    return 0;
}


static int bcm7335_fb_pan_display(struct fb_var_screeninfo *var,
        struct fb_info *info)
{
    NEXUS_Rect SrcRect;

    if (((var->xoffset + var->xres) > var->xres_virtual)||
            ((var->yoffset + var->yres) > var->yres_virtual))
    {
        debug_fb("[SrcRect] EINVAL\n");
        return -EINVAL;
    }
    SrcRect.x = var->xoffset;
    SrcRect.y = var->yoffset;
    SrcRect.width =var->xres;
    SrcRect.height = var->yres;
    tux_x = SrcRect.x;
    tux_y = SrcRect.y;
    tux_width = SrcRect.width;
    tux_height = SrcRect.height;
    debug_av("[%s] ----->(%d,%d) \n",__func__,var->xres,var->yres);
#if 0
    if(tux_blit)
        blit_tuxosd(SrcRect.x,SrcRect.y,SrcRect.width,SrcRect.height);
    else
        blit_osd(SrcRect.x,SrcRect.y,SrcRect.width,SrcRect.height);
#endif
    info->var.xoffset = var->xoffset;
    info->var.yoffset = var->yoffset;

    /* atv_fullhd_hbbtv2.0_issue_20160414 */
    if(tux_blit == 0) /* blit manual mode */
    {
        /* framebuffer_update_wslee_20160421_ */
        if(canvas_fix_set == 0)
        {
            canvas_w_h_resolution_set(var->xres,var->yres);
        }
    }
    #if 0
    if(tux_blit)
        tux_blitup=1;
    #endif
    return 0;
}

static int  bcm7335_fb_blank(int blank_mode, struct fb_info *info)
{
    if (blank_mode == 0)
    {
        fill(bsp_p->frame_buffer[0].handle,0x0);
        fill(bsp_p->frame_buffer[1].handle,0x0);
    }
    else
    {

        fill(bsp_p->frame_buffer[0].handle,0xFF000000);
        fill(bsp_p->frame_buffer[1].handle,0xFF000000);
    }
    return 0;
}
static int bcm7335_ACCEL_(int cmd,int value)
{
    // debug_fb("[%s] cmd<%02x> val <%02x> \n",__func__,cmd,value);
    switch(cmd)
    {
        case ACC_RST_SOURCE:
#if 1 // mkseo_graphic
            accel_srcStride = 0;
            accel_srcWidth = 0;
            accel_srcHeight = 0;
            accel_srcSetSurface= false;
            accel_srcFormatPaladdr1=accel_srcFormatIndex=0;
#endif
            break;
        case  ACC_RST_DEST:
            break;
        case  ACC_RST_PATTERN:
            break;
        case  ACC_RST_BLEND:
            break;
        case  ACC_RST_OUTPUT:
            break;

        case  ACC_SRC_ADRRESS:
#if 1 // mkseo_graphic
            if(accel_setSrcRect == false && value!= 0)
                accel_blitSrcAddress = value;

            if(accel_setSrcRect == true && value!= 0)
                accel_blitDstAddress = value;
#endif
            break;
        case  ACC_SRC_STRIDE:
#if 1 // mkseo_graphic
            if(value != 0 && accel_srcSetSurface == false)
                accel_srcStride = value;
#endif
            break;
        case  ACC_SRC_WIDTH:
#if 1 // mkseo_graphic
            if(value != 0 && accel_srcSetSurface == false)
                accel_srcWidth = value;
#endif
            break;
        case  ACC_SRC_HEIGHT:
#if 1 // mkseo_graphic
            if(value != 0 && accel_srcSetSurface == false)
                accel_srcHeight = value;
#endif
            break;
        case  ACC_SRC_FORMAT:
            accel_srcFormat = value;
            break;

        case  ACC_SRC_FORMAT_INDEX:
#if 1 // mkseo_graphic
            accel_srcFormatIndex = value;
#endif
            break;
        case  ACC_SRC_FORMAT_PALADDR:
#if 1 // mkseo_graphic
            accel_srcFormatPaladdr = value;
#endif
            break;
        case  ACC_SRC_FORMAT_PALADDR1:
#if 1 // mkseo_graphic
            accel_srcFormatPaladdr1 = value;
#endif
            break;

        case  ACC_SET_SRCSURFACE:
#if 1 // mkseo_graphic
            accel_srcSetSurface = true;
#endif
            break;

        case  ACC_SET_SRCX:
#if 1 // mkseo_graphic
            if(accel_setSrcRect == false)
                accel_xPosition = value;
            else
                accel_dstXposition = value;
#endif
            break;
        case  ACC_SET_SRCY:
#if 1 // mkseo_graphic
            if(accel_setSrcRect == 0)
                accel_yPosition = value;
            else
                accel_dstYposition = value;
#endif
            break;
        case  ACC_SET_SRCWIDTH:
#if 1 // mkseo_graphic
            if(accel_setSrcRect == 0)
                accel_xWidth = value;
            else
                accel_dstXwidth = value;
#endif
            break;
        case  ACC_SET_SRCHEIGHT:
#if 1 // mkseo_graphic
            if(accel_setSrcRect == 0)
                accel_yHeight = value;
            else
                accel_dstYheight = value;
#endif
            break;

        case  ACC_SET_SRCRECT:
#if 1 // mkseo_graphic
            accel_setSrcRect =true;
#endif
            break;

        case  ACC_SET_OUTSURFACE:
            break;

        case  ACC_SET_OUTRECT:
            break;
        case  ACC_SEL_COLOR:
#if 1 // mkseo_graphic
            accel_fillColor = value;
            accel_fillCommand = true;
#endif
            break;
        case  ACC_SEL_COLORKEY0:
            break;
        case  ACC_SEL_COLORKEY1:
            break;
        case  ACC_SEL_COLORKEY2:
            break;
        case  ACC_SEL_COLORKEY3:
            break;
        case  ACC_SEL_COLORKEY:
            break;
        case  ACC_BLEND_FLAG:
            accel_blendflag= value;
            debug_fb("ACC_BLEND_FLAG %x \n",accel_blendflag);
            return -1;
            break;
        case  ACC_DO_IT:
            accel_accelDoit = true;
            break;
    }
    return 0;

}

static int  bcm7335_fb_ioctl(struct fb_info *info,unsigned int cmd,unsigned long arg)
{
    switch (cmd)
    {
        case (FBIO_BLIT) :
            blit_osd(info->var.xoffset,info->var.yoffset,info->var.xres,info->var.yres);
            break;
        case (FBIO_ACCEL) : /*FBIO_ACC*/
            {
                struct disp_command cmd_list;
                int i=0;

                if (copy_from_user(&cmd_list, (struct disp_command *)arg,sizeof(struct disp_command)))
                {
                    printk(KERN_ERR "[%s] <%d> KERN_ERR \n",__func__,__LINE__);
                    return -EFAULT;
                }
                if(bcm7335_ACCEL_(*((int*)(cmd_list.ptr)),*((int*)(cmd_list.ptr+sizeof(int)))))
                    return -1;
                for(i=0;i<cmd_list.len;i++)
                {
                    if(i%2==0 &&i>1 )
                    {
                        if(bcm7335_ACCEL_(*((int*)(cmd_list.ptr+(i*sizeof(int)))),*((int*)(cmd_list.ptr+((i+1)*sizeof(int))))))
                            return -1;
                    }
                }
#if 1 // mkseo_graphic
                if(accel_accelDoit == true)
                {
                    //debug_fb("\n");
                    if(accel_fillCommand == true)
                    {
                        NEXUS_Surface_Flush(bsp_p->frame_buffer[0].handle);
                        NEXUS_Surface_Flush(bsp_p->frame_buffer[1].handle);
                        fill_rect(bsp_p->canvas[GrpMode].handle, accel_fillColor, accel_xPosition, accel_yPosition, accel_xWidth, accel_yHeight);
                    }
                    else
                    {
                        if(accel_srcSetSurface)
                        {
                            accel_srcSetSurface = false;

                            if(blitCanvas.handle != NULL)
                                blit_destroy_surface();

                            /* Create Surface */
                            checkValue = blit_prepare_surface(GrpMode);
                        }

                        if(checkValue == 0 && blitCanvas.handle)
                        {
                        #if 1	/* wslee_epg_speed_up_20150121_ */
                            NEXUS_Surface_Flush(bsp_p->frame_buffer[0].handle);
                            NEXUS_Surface_Flush(bsp_p->frame_buffer[1].handle);
                        #endif
                            blit_execute(GrpMode);
                        }
                    }

                    accel_accelDoit = false;
                    accel_fillCommand = false;
                    accel_setSrcRect = false;

                }
#endif
                //debug_fb("***************************************\n");
            }
            break;
        case FBIO_WAITFORVSYNC:
            {
                debug_fb("*****************Wit for Sync**********************\n");
                nexus_ret= NEXUS_Graphics2D_Checkpoint(bsp_p->graphics, NULL);
                if (nexus_ret== NEXUS_GRAPHICS2D_QUEUED) {
                    nexus_ret= BKNI_WaitForEvent(bsp_p->event, BKNI_INFINITE);
                    BDBG_ASSERT(!nexus_ret);
                }
            }
            break;
        case (FBIO_SET_MANUAL_BLIT) : /*Wait fo Sync*/
            {
                // manual 0 , auto 1
                debug_fb("*****************FBIO_SET_MANUAL_BLIT***(%d)*******************\n", *(unsigned char *)arg);

#if 1 // mkseo_tux_commander
                if(*(unsigned char *)arg == 0)
                {
                    tux_blit = 1;
                    /* atv_fullhd_hbbtv2.0_issue_20160414 */
                    if(get_hbbtv_key_state())
                        tux_blitup = 1;
                    
                    if(kthread_run(blit_thread, NULL,"blit-task") < 0)
                    {
                        printk( "[InputKet][ERROR] : kernel_thread failed.\n" );
                        return -1;
                    }
                    
                    /* openpli_sd_and_fullhd_issue_wslee_20160408 */
                    /* when change sd->hd skin, sometimes bus error is generated */ 
                    BKNI_Sleep(5);
                    debug_fb(" #-  Blit Auto Mode \n");
                }
                else
                {
                    /* wslee_openpli_resolution_teletext_20160527 */
                    /* if press teletext key at no teletext channnel, remained to 720x576 resolution after display finish. */
                    change_resolution_by_autoblit = 0;
                    canvas_w_h_resolution_reset();

                    tux_blit = 0;
                    /* openpli_sd_and_fullhd_issue_wslee_20160408 */
                    /* when change sd->hd skin, sometimes bus error is generated */ 
                    BKNI_Sleep(5);
                    debug_fb(" #-  Blit Manual Mode \n");
                }
#endif
            }
            break;
        default:
            debug_fb("[%s]unknown command <%x> \n",__func__,cmd);
            break;
    }
    return 0;
}

#if 1 // mkseo_graphic
static int blit_prepare_surface(int mode)
{
    int	check_blitSrcAddress;
    int	check_srcFormatPaladdr;

    NEXUS_SurfaceCreateSettings createSettings;

    NEXUS_Surface_GetDefaultCreateSettings(&createSettings);

    createSettings.width = accel_srcWidth;
    createSettings.height = accel_srcHeight;
    if(accel_srcFormatPaladdr1==0x7e48888 && accel_srcFormatIndex == 0x100)
        createSettings.pixelFormat = NEXUS_PixelFormat_ePalette8;
    else
        createSettings.pixelFormat = UI_PIXEL_FORMAT;
    createSettings.heap =  bsp_p->platformConfig.heap[0];

    createSettings.pitch =  accel_srcStride;
    createSettings.pMemory =  (void*)accel_blitSrcAddress;
    createSettings.alignment=  24;
    createSettings.pPaletteMemory = (void*)accel_srcFormatPaladdr;

    check_blitSrcAddress = (accel_blitSrcAddress & 0x80000000);
    check_srcFormatPaladdr = (accel_srcFormatPaladdr & 0x80000000);
    createSettings.palettePixelFormat = UI_PIXEL_FORMAT;
#if 0
    debug_fb("=============================================\n");
    debug_fb("---accel_srcWidth --------------%d  \n", accel_srcWidth);
    debug_fb("---accel_srcHeight -------------%d  \n", accel_srcHeight);
    debug_fb("---accel_srcStride -------------%d  \n", accel_srcStride);
    debug_fb("---accel_blitSrcAddress --------%x  \n", accel_blitSrcAddress);
    debug_fb("---accel_srcFormat -------------%x  \n", accel_srcFormat);
    debug_fb("---accel_srcFormatIndex --------%d  \n", accel_srcFormatIndex);
    debug_fb("---accel_srcFormatPaladdr1 -----%x  \n", accel_srcFormatPaladdr1);
    debug_fb("---accel_srcFormatPaladdr ------%x  \n", accel_srcFormatPaladdr);
    debug_fb("=============================================\n");
#endif
    //createSettings.bitsPerPixel = 32;
    if(check_blitSrcAddress == 0)
    {
        unsigned int physicalAddress;

        //debug_fb("################## SRC ADDRESS CONVERT [prev] #################   %x  \n", accel_blitSrcAddress);
        debug_fb("-> %x  \n", accel_blitSrcAddress);
        physicalAddress = virt_to_phys((const void*)accel_blitSrcAddress);
        createSettings.pMemory =  (void*)physicalAddress;
        //return 1;
    }

    if(check_srcFormatPaladdr == 0)
    {
        unsigned int physicalAddress;

        //debug_fb("################## SRC PALADDRESS CONVERT #################   %x  \n", accel_srcFormatPaladdr);
        physicalAddress = virt_to_phys((const void*)accel_srcFormatPaladdr);
        createSettings.pPaletteMemory =  (void*)physicalAddress;
        //debug_fb("################## return #################   %x  \n", physicalAddress);
        //return 1;
    }

    blitCanvas.handle = NEXUS_Surface_Create(&createSettings);

    NEXUS_Surface_GetMemory(blitCanvas.handle, &blitCanvas.memory);
    NEXUS_Heap_GetStatus(createSettings.heap, &blitCanvas.memStatus);
    accel_srcFormatPaladdr1=accel_srcFormatIndex=0;

    return 0;
}

#if 1	/* wslee_framebuffer_update_20150115_ */
static void canvas_destroy_surface(int mode)
{
    if(bsp_p->canvas[mode].handle)
    {
        NEXUS_Surface_Flush(bsp_p->canvas[mode].handle);
        NEXUS_Surface_Destroy(bsp_p->canvas[mode].handle);
    }
}
#endif

static void blit_destroy_surface(void)
{
    NEXUS_Surface_Flush(blitCanvas.handle);
    NEXUS_Surface_Destroy(blitCanvas.handle);
}

static void blit_execute(int mode)
{
    NEXUS_Graphics2DBlitSettings blitSettings;

    if (!bsp_p->graphics)
    {
        bsp_p->graphics= NEXUS_Graphics2D_Open(0, NULL);
    }

    NEXUS_Graphics2D_GetDefaultBlitSettings(&blitSettings);

    /* source setting */
    blitSettings.source.surface = blitCanvas.handle;
    blitSettings.source.rect.x = accel_xPosition;
    blitSettings.source.rect.y = accel_yPosition;
    blitSettings.source.rect.width = accel_xWidth;
    blitSettings.source.rect.height = accel_yHeight;

    /* output setting */
    blitSettings.output.surface =  bsp_p->canvas[mode].handle;
    blitSettings.output.rect.x = accel_dstXposition;
    blitSettings.output.rect.y = accel_dstYposition;
    blitSettings.output.rect.width = accel_dstXwidth;
    blitSettings.output.rect.height = accel_dstYheight;

    /* common setting */
    blitSettings.constantColor = 0xFF00FF00; /* alpha is opaque */
    blitSettings.colorOp = NEXUS_BlitColorOp_eCopySource;
    blitSettings.alphaOp = NEXUS_BlitAlphaOp_eCopySource;

    nexus_ret= NEXUS_Graphics2D_Blit(bsp_p->graphics, &blitSettings);
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7362 || BCHP_CHIP == 73625 || BCHP_CHIP == 7439)	/* iqon-uhd */
    if (nexus_ret == NEXUS_GRAPHICS2D_QUEUE_FULL) {
        BKNI_WaitForEvent(bsp_p->spaceAvailableEvent, BKNI_INFINITE);
    }
    nexus_ret= NEXUS_Graphics2D_Checkpoint(bsp_p->graphics, NULL);
    if (nexus_ret== NEXUS_GRAPHICS2D_QUEUED)
        BKNI_WaitForEvent(bsp_p->event, BKNI_INFINITE);
#else
    nexus_ret= NEXUS_Graphics2D_Checkpoint(bsp_p->graphics, NULL);
    if (nexus_ret== NEXUS_GRAPHICS2D_QUEUED)
        BKNI_WaitForEvent(bsp_p->event, BKNI_INFINITE);
#endif
    NEXUS_Surface_Flush( bsp_p->canvas[mode].handle);
}
#endif
bool restartFlag=false;
static int bcm7355_fb_mmap(struct fb_info *info, struct vm_area_struct *vma)
{
    unsigned long off;
    unsigned long start;
    u32 len;
    /* wslee_openpli_fullhd_issue_20160405 */
    int  mode = get_frame_buffer_mode(info->var.xres);

    restartFlag=true;
    debug_fb("[%s] -----> \n",__func__);
    if (vma->vm_pgoff > (~0UL >> PAGE_SHIFT)) {
        return -EINVAL;
    }
    /* wslee_7335_update_20160429 */
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7362 || BCHP_CHIP == 73625)        /* (at_7362_initial_work) */
    /* openpli_sd_and_fullhd_issue_wslee_20160408 */
    start = virt_to_phys(bsp_p->canvas[mode].memory.buffer); 
#elif (BCHP_CHIP == 7439)			/* iqon-uhd */
	start = virt_to_phys(bsp_p->canvas[mode].memory.buffer); 
#else
    /* it need 7335 teletext display */
    if(tux_blit == 1 && mode==SDFB)
        start = virt_to_phys(bsp_p->frame_buffer[mode].memory.buffer); 
    else
        start = virt_to_phys(bsp_p->canvas[mode].memory.buffer); 
#endif
#if (BCHP_CHIP == 7439)			/* iqon-uhd wslee_20160830 */
    /**
     * @iqon-uhd : fix total memory 2Gb use cma(continous memory allocator) by babel_20161129. 
     * @fix : 0xff800000 -> 0xfe000000 (8MB->32MB)
     */
    #define PAGE_ARM_MASK  0xfe000000                  /* 32MB ? */

    len = PAGE_ALIGN((start & ~PAGE_ARM_MASK) + gfx_memory_size);
    off = vma->vm_pgoff << PAGE_SHIFT;
    start &= PAGE_ARM_MASK;
#else
    len = PAGE_ALIGN((start & ~PAGE_MASK) + gfx_memory_size);

    off = vma->vm_pgoff << PAGE_SHIFT;

    start &= PAGE_MASK;
#endif
    if ((vma->vm_end - vma->vm_start + off) > len)
    {
        return -EINVAL;
    }
    off += start;
    vma->vm_pgoff = off >> PAGE_SHIFT;

    //vma->vm_page_prot = pgprot_noncached(vma->vm_page_prot);

#if LINUX_VERSION_CODE > KERNEL_VERSION(3, 8, 2)
    vma->vm_flags |= VM_IO;
#else
    vma->vm_flags |= VM_IO | VM_RESERVED;
#endif

    if (io_remap_pfn_range(vma, vma->vm_start, off >> PAGE_SHIFT, vma->vm_end - vma->vm_start, vma->vm_page_prot))
    {
        return -EAGAIN;
    }
    return 0;

}
int  bcm7335_fb_syc(struct fb_info *p)
{
    return 0;

}
ssize_t bcm7335_fbread(struct fb_info *info, char __user *buf,size_t count, loff_t *ppos)
{
    debug_fb("[%s] -----> \n",__func__);
    return 0;
}
ssize_t bcm7335_fbwrite(struct fb_info *info, const char __user *buf,size_t count, loff_t *ppos)
{
    debug_fb("[%s] -----> \n",__func__);
    normalStandby_onOff = true;
    RestartE2Mode=1;
    RestartE2VFDMode=1;
    StopDMX4RestartE2();
    StopAV();
    Shutdown_AV(true);
    micom_standby();
    exit_uartThread();
    BKNI_Sleep(5000);
    return count;
}
static int bcm7355_fb_release(struct fb_info *info, int user)
{
    debug_av("[%s] -----> \n",__func__);
    standby_vfdmode();
    RestartE2Mode=1;
    RestartE2VFDMode=1;
    RestartFB=true;
    normalStandby_onOff = true;
    if(bsp_p->canvas[SDFB].handle)
    {
        NEXUS_Surface_Flush(bsp_p->canvas[SDFB].handle);
        NEXUS_Surface_Flush(bsp_p->frame_buffer[SDFB].handle);
    }
    if(bsp_p->canvas[HDFB].handle)
    {
        NEXUS_Surface_Flush(bsp_p->canvas[HDFB].handle);
        NEXUS_Surface_Flush(bsp_p->frame_buffer[HDFB].handle);
    }
    return 0;
}

/* ------------------------------------------------------------------------- */
/*
 * Frame buffer operations that we have implmented and support.
 * Some functions might be useful here but no one seems to use them
 * i.e cursor, sync, and imageblit etc.
 */
static struct fb_ops gphStbFB_ops = {
    .owner          = THIS_MODULE,
    .fb_write   = bcm7335_fbwrite,
    .fb_read   = bcm7335_fbread,
    .fb_check_var   = bcm7335_fb_check_var,
    .fb_set_par     = bcm7335_fb_set_par,
    .fb_setcolreg   = bcm7335_fb_setcolreg,
    .fb_setcmap     = bcm7335_setcmap,
    .fb_blank       = bcm7335_fb_blank,
    .fb_pan_display = bcm7335_fb_pan_display,
    .fb_mmap        = bcm7355_fb_mmap,
    .fb_release     = bcm7355_fb_release,
    .fb_sync        = bcm7335_fb_syc,
    .fb_ioctl       = bcm7335_fb_ioctl
};

static ssize_t phStbFB_show_memsize(struct device *dev, struct device_attribute *attr, char *buf)
{
    struct platform_device *p_dev = to_platform_device(dev);

    return snprintf(buf, PAGE_SIZE, "%lu\n", gphStbFB_info.fb_size[p_dev->id]);
}

static DEVICE_ATTR(size, S_IRUGO, phStbFB_show_memsize, NULL);

static ssize_t phStbFB_show_rev(struct device *dev, struct device_attribute *attr, char *buf)
{
    return snprintf(buf, PAGE_SIZE, "%d\n", 0);
}

static DEVICE_ATTR(revision, S_IRUGO, phStbFB_show_rev, NULL);


static ssize_t phStbFB_show_vendor(struct device *dev, struct device_attribute *attr, char *buf)
{
    return snprintf(buf, PAGE_SIZE, "0x%04x", 0xDEAF);
}

static DEVICE_ATTR(vendor, S_IRUGO, phStbFB_show_vendor, NULL);

static ssize_t phStbFB_show_device(struct device *dev, struct device_attribute *attr, char *buf)
{
    return snprintf(buf, PAGE_SIZE, "0x%04x", 0xABBA);
}

static DEVICE_ATTR(device, S_IRUGO, phStbFB_show_device, NULL);

#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 14, 0)        /* kernel-up */
static void phStbFB_remove_sysfs(struct device *dev)
#else
static void __devexit phStbFB_remove_sysfs(struct device *dev)
#endif
{
    device_remove_file(dev, &dev_attr_size);
    device_remove_file(dev, &dev_attr_revision);
    device_remove_file(dev, &dev_attr_device);
    device_remove_file(dev, &dev_attr_vendor);
}

static void phStbFb_create_sysfs(struct device *dev)
{
    device_create_file(dev, &dev_attr_size);
    device_create_file(dev, &dev_attr_revision);
    device_create_file(dev, &dev_attr_device);
    device_create_file(dev, &dev_attr_vendor);
}
static inline void phStbFB_setPixel(phStbVideoRenderer_GfxMode_t mode, u32 value, u8 *dst)
{
    switch (mode)
    {
        case(phStbVideoRenderer_GfxMode_ARGB4444) :
            *((u16*)dst) = (((value & 0xF0000000) >> 16) |
                    ((value & 0x00F00000) >> 12) |
                    ((value & 0x0000F000) >> 8)  |
                    ((value & 0x000000F0) >> 4));
            break;
        case(phStbVideoRenderer_GfxMode_RGB565) :
            *((u16*)dst) = (((value & 0x00F80000) >> 8) |
                    ((value & 0x0000FC00) >> 5) |
                    ((value & 0x000000F8) >> 3));
            break;
        case(phStbVideoRenderer_GfxMode_ARGB1555) :
            *((u16*)dst) = (((value & 0x80000000) >> 16) |
                    ((value & 0x00F80000) >> 9)  |
                    ((value & 0x0000F800) >> 6)  |
                    ((value & 0x000000F8) >> 3));
            break;
        case(phStbVideoRenderer_GfxMode_Clut256) :
            *dst = (((((value & 0x00FF0000) >> 16) / 32) * 32) +
                    ((((value & 0x0000FF00) >> 8) /  32) * 4) +
                    ((value & 0x000000FF) / 64));
            break;
        default:
            *((u32*)dst) = value;
            break;
    }
}
static phStbVideoRenderer_GfxMode_t phStbFb_setGraphicsMode(struct fb_info *pFbInfo)
{
    phStbVideoRenderer_GfxMode_t mode = phStbVideoRenderer_GfxMode_Invalid;

    if (0 == strcmp(gfx_display_mode, "RGB16"))
    {
        mode = phStbVideoRenderer_GfxMode_RGB565;

        pFbInfo->var.bits_per_pixel = NUM_RGB565_BLUE + NUM_RGB565_GREEN + NUM_RGB565_RED;
        pFbInfo->var.red.offset = NUM_RGB565_BLUE + NUM_RGB565_GREEN;
        pFbInfo->var.red.length = NUM_RGB565_RED;
        pFbInfo->var.green.offset = NUM_RGB565_BLUE;
        pFbInfo->var.green.length = NUM_RGB565_GREEN;
        pFbInfo->var.blue.offset =  0;
        pFbInfo->var.blue.length = NUM_RGB565_BLUE;
        pFbInfo->var.transp.offset = 0;
        pFbInfo->var.transp.length = 0;
    }
    else if (0 == strcmp(gfx_display_mode, "ARGB1555"))
    {
        mode = phStbVideoRenderer_GfxMode_ARGB1555;

        pFbInfo->var.bits_per_pixel = NUM_ARGB1555_BLUE + NUM_ARGB1555_GREEN + NUM_ARGB1555_RED + NUM_ARGB1555_TRANS;
        pFbInfo->var.red.offset = NUM_ARGB1555_BLUE + NUM_ARGB1555_GREEN;
        pFbInfo->var.red.length = NUM_ARGB1555_RED;
        pFbInfo->var.green.offset = NUM_ARGB1555_BLUE;
        pFbInfo->var.green.length = NUM_ARGB1555_GREEN;
        pFbInfo->var.blue.offset =  0;
        pFbInfo->var.blue.length = NUM_ARGB1555_BLUE;
        pFbInfo->var.transp.offset = NUM_ARGB1555_BLUE + NUM_ARGB1555_GREEN + NUM_ARGB1555_RED;
        pFbInfo->var.transp.length = NUM_ARGB1555_TRANS;
    }
    else  if (0 == strcmp(gfx_display_mode, "ARGB4444"))
    {
        mode = phStbVideoRenderer_GfxMode_ARGB4444;

        pFbInfo->var.bits_per_pixel = NUM_ARGB4444_BLUE + NUM_ARGB4444_GREEN + NUM_ARGB4444_RED + NUM_ARGB4444_TRANS;
        pFbInfo->var.red.offset = NUM_ARGB4444_BLUE + NUM_ARGB4444_GREEN;
        pFbInfo->var.red.length = NUM_ARGB4444_RED;
        pFbInfo->var.green.offset = NUM_ARGB4444_BLUE;
        pFbInfo->var.green.length = NUM_ARGB4444_GREEN;
        pFbInfo->var.blue.offset =  0;
        pFbInfo->var.blue.length = NUM_ARGB4444_BLUE;
        pFbInfo->var.transp.offset = NUM_ARGB4444_BLUE + NUM_ARGB4444_GREEN + NUM_ARGB4444_RED;
        pFbInfo->var.transp.length = NUM_ARGB4444_TRANS;
    }
    else if (0 == strncmp(gfx_display_mode, "ARGB", 4))
    {
        mode = phStbVideoRenderer_GfxMode_ARGB8888;

        pFbInfo->var.bits_per_pixel = NUM_ARGB8888_BLUE + NUM_ARGB8888_GREEN + NUM_ARGB8888_RED + NUM_ARGB8888_TRANS;
        pFbInfo->var.red.offset = NUM_ARGB8888_BLUE + NUM_ARGB8888_GREEN;
        pFbInfo->var.red.length = NUM_ARGB8888_RED;
        pFbInfo->var.green.offset = NUM_ARGB8888_BLUE;
        pFbInfo->var.green.length = NUM_ARGB8888_GREEN;
        pFbInfo->var.blue.offset =  0;
        pFbInfo->var.blue.length = NUM_ARGB8888_BLUE;
        pFbInfo->var.transp.offset = NUM_ARGB8888_BLUE + NUM_ARGB8888_GREEN + NUM_ARGB8888_RED;
        pFbInfo->var.transp.length = NUM_ARGB8888_TRANS;
    }
    else if (0 == strcmp(gfx_display_mode, "LUT8"))
    {
        mode = phStbVideoRenderer_GfxMode_Clut256;

        pFbInfo->var.bits_per_pixel = 8;
        pFbInfo->var.red.offset = NUM_CLUT8_BLUE + NUM_CLUT8_GREEN;
        pFbInfo->var.red.length = NUM_CLUT8_RED;
        pFbInfo->var.green.offset = NUM_CLUT8_BLUE;
        pFbInfo->var.green.length = NUM_CLUT8_GREEN;
        pFbInfo->var.blue.offset =  0;
        pFbInfo->var.blue.length = NUM_CLUT8_BLUE;
        pFbInfo->var.transp.offset = NUM_CLUT8_BLUE + NUM_CLUT8_GREEN + NUM_CLUT8_RED;
        pFbInfo->var.transp.length = NUM_CLUT8_TRANS;

        phStbFb_setDefaultCLUT(pFbInfo);
    }
    else
    {
        debug_fb(KERN_WARNING "Unrecognised graphics mode '%s'\n", gfx_display_mode);
    }
    debug_fb("recognised graphics mode '%s'\n", gfx_display_mode);
    return mode;
}
/*
 *  Initialization of the Framebuffer.
 */
static int __init phStbFB_probe(struct platform_device *p_dev)
{
    phStbVideoRenderer_GfxMode_t mode;
    int fbIndex = 0;
    int error;
    struct fb_info *pFbInfo;

    fbIndex = p_dev->id;
    
    if ((p_dev->id < 0) || (p_dev->id >= PHSTB_NUM_FB_DEVS))
    {
        return -ENODEV;
    }
#if SPIN_LOCK
    spin_lock_init(&gr_lock);
#endif
    pFbInfo = framebuffer_alloc(0, &p_dev->dev);
    gphStbFB_info.pfb_info[fbIndex] = pFbInfo;

    if (pFbInfo == NULL) 
    {
        printk(KERN_ERR "Error framebuffer_alloc\n");
        return -ENOMEM;
    }

    /*
     * Function pointers and fixed values filled in here.
     */
    pFbInfo->fbops = &gphStbFB_ops;
    pFbInfo->fix   = gphStbFB_fix;
    /* atv requirement for hbbtv2.0 support wslee_20160405 */
    sprintf(pFbInfo->fix.id, "%s", pFbInfo->fix.id);

    /* Check for a valid destination rectangle */
    if ((dest_rect[2] == 0) || (dest_rect[3] == 0))
    {
        /* Set up the Frame buffer destination */
        phStbFB_reset_destination_rect();
    }

    /* Bring up all modules for a platform in a default configuraiton for this platform */
    pFbInfo->var.xres   = pFbInfo->var.xres_virtual = width;
    pFbInfo->var.yres   = height;
    pFbInfo->var.width  = width;
    pFbInfo->var.height = height;

    /* Set up virtual resolution to enable double buffered display */
    pFbInfo->var.yres_virtual = double_buffered ? pFbInfo->var.yres * 2 : pFbInfo->var.yres;
    pFbInfo->var.vmode        = FB_VMODE_NONINTERLACED;

    /* Allocate a colour map */
    /* Set up the graphics mode */
    mode = phStbFb_setGraphicsMode(pFbInfo);
    if (mode == phStbVideoRenderer_GfxMode_Invalid)
    {
        return -EINVAL;
    }

    error = phStbFB_init_memory();
    if (error < 0)
    {
        return error;
    }
    pFbInfo->flags = (FBINFO_HWACCEL_DISABLED);
    if (fb_alloc_cmap(&pFbInfo->cmap, 256, 1) < 0)
    {
        printk(KERN_WARNING "Unable to allocate Colour Map\n");
        return -EINVAL;
    }


    /*Now register the framebuffer*/
    if (register_framebuffer(pFbInfo) < 0)
    {
        printk(KERN_WARNING "Unable to Register Framebuffer\n");
        return -EINVAL;
    }
    /*Now do sysfs stuff*/
    platform_set_drvdata(p_dev, pFbInfo);
    phStbFb_create_sysfs(&p_dev->dev);
#if 0
    /* no need it will make green screen problem */
    /*Fill with background colour*/
    {
        u8 *dst = (u8*)pFbInfo->screen_base;
        u8 increment = (pFbInfo->var.bits_per_pixel) / 8;
        int i=0;

        for(i = 0; i < gphStbFB_info.fb_size[fbIndex]; i+=increment)
        {
            phStbFB_setPixel(mode, background, dst + i);
        }
    }
#endif
    debug_fb(KERN_INFO "phStbFB : /dev/fb%d - %dx%d pixels (%s - %s; %s buffered)\n",
            pFbInfo->node,
            pFbInfo->var.xres,
            pFbInfo->var.yres,
            gfx_display_mode,
            ( (pFbInfo->var.xres == dest_rect[2]) &&
              (pFbInfo->var.yres == dest_rect[3]) ) ? "Not scaled" : "Scaled",
            pFbInfo->var.yres_virtual == (2*pFbInfo->var.yres) ? "Double" : "Single"
            );

    /*Success registering the devices so return 0*/
    return 0;
}

/*
 *  Cleanup
 */
#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 14, 0)    /* kernel-up */
static int phStbFB_remove(struct platform_device* p_dev)
#else
static int __devexit phStbFB_remove(struct platform_device* p_dev)
#endif
{
    int fbIndex = p_dev->id;

    /* Unregister fb*/
    unregister_framebuffer(gphStbFB_info.pfb_info[fbIndex]);

    /* Remove sysfs entries */
    phStbFB_remove_sysfs(&p_dev->dev);

    platform_set_drvdata(p_dev, NULL);

    /*
     * @todo
     * Should deallocate TMML regions here and deinit any code left over
     * However not sure what we are doing for this yet with regards to VideoRenderer so leaving it
     * for now.
     */

    /* deallocate colour map */
    fb_dealloc_cmap(&gphStbFB_info.pfb_info[fbIndex]->cmap);
    if (fbIndex == 0)
        phStbFB_free_memory();
    return 0;
}
static struct platform_driver gphStbFB_driver[PHSTB_NUM_FB_DEVS] = {
    {
        .driver = {
            .name = "fb0"
        },
        .probe = phStbFB_probe,
        #if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 14, 0)    /* kernel-up */        
        .remove = phStbFB_remove,
        #else
        .remove = __devexit_p(phStbFB_remove),
        #endif
    },
    {
        .driver = {
            .name = "fb1"
        },
        .probe = phStbFB_probe,
        #if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 14, 0)    /* kernel-up */        
        .remove = phStbFB_remove,
        #else
        .remove = __devexit_p(phStbFB_remove),
        #endif
    }
};

static struct platform_device gphStbFB_device[PHSTB_NUM_FB_DEVS] = {
    {
        .name = "fb0",
    },
    {
        .name = "fb1",
    }
};


int phStbFB_init(void)
{
    int fbIndex;
    /*
     *  For kernel boot options (in 'video=phStbFB:<option>:<option>...' format)
     */
    num_fb = 1;
    for(fbIndex = 0; fbIndex < num_fb; fbIndex++)
    {
        int ret;
        ret = platform_driver_register(&gphStbFB_driver[fbIndex]);
        if (!ret)
        {
            gphStbFB_device[fbIndex].id = fbIndex;

            ret = platform_device_register(&gphStbFB_device[fbIndex]);
            if (ret)
            {
                platform_driver_unregister(&gphStbFB_driver[fbIndex]);
                return ret;
            }
        }
    }
    return 0;
}

void phStbFB_exit(void)
{
    int fbIndex;

    for(fbIndex = 0; fbIndex < num_fb; fbIndex++)
    {
        platform_driver_unregister(&gphStbFB_driver[fbIndex]);
    }
}

/* ------------------------------------------------------------------------- */
/**
 * @brief Modularization Parameters etc.
 */
static void fill_rect(NEXUS_SurfaceHandle surface, uint32_t color,int x,int y,int w,int h)
{
    NEXUS_Graphics2DFillSettings fillSettings;

    /* wslee_openpli_resolution_teletext_testsceen_20160527 */
    /* this modified for openpli testscreen menu */
    if(GetBlitMode() == 0 && x == 0 && y == 0) /* if blit manual mode and x=0 and y=0 */
    {
        if(w == OFFSET_SDWRES && h == OFFSET_SDHRES)
        {
            canvas_w_h_resolution_reset();
        }
        else if(w == OFFSET_WRES && h == OFFSET_HRES)
        {
            canvas_w_h_resolution_reset();
        }
        else if(w == OFFSET_WHDRES && h == OFFSET_HHDRES)
        {
            canvas_w_h_resolution_reset();
        }
    }

    if (!bsp_p->graphics) {
        bsp_p->graphics= NEXUS_Graphics2D_Open(0, NULL);
    }

    NEXUS_Graphics2D_GetDefaultFillSettings(&fillSettings);

    fillSettings.surface = surface;
    fillSettings.color = color;
    fillSettings.rect.width = w;
    fillSettings.rect.height = h;
    fillSettings.rect.x= x;
    fillSettings.rect.y= y;
    nexus_ret= NEXUS_Graphics2D_Fill(bsp_p->graphics, &fillSettings);
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7362 || BCHP_CHIP == 73625 || BCHP_CHIP == 7439)	/* iqon-uhd */
    if (nexus_ret == NEXUS_GRAPHICS2D_QUEUE_FULL) {
        BKNI_WaitForEvent(bsp_p->spaceAvailableEvent, BKNI_INFINITE);
    }
    nexus_ret= NEXUS_Graphics2D_Checkpoint(bsp_p->graphics, NULL);
    if (nexus_ret== NEXUS_GRAPHICS2D_QUEUED)
    {
        BKNI_WaitForEvent(bsp_p->event, BKNI_INFINITE);
    }
#else
    nexus_ret= NEXUS_Graphics2D_Checkpoint(bsp_p->graphics, NULL);
    if (nexus_ret== NEXUS_GRAPHICS2D_QUEUED)
    {
        BKNI_WaitForEvent(bsp_p->event, BKNI_INFINITE);
    }
#endif
    NEXUS_Surface_Flush(surface);
}

static void fill(NEXUS_SurfaceHandle surface, uint32_t color)
{
    NEXUS_Graphics2DFillSettings fillSettings;

    if (!bsp_p->graphics) {
        bsp_p->graphics= NEXUS_Graphics2D_Open(0, NULL);
    }

    NEXUS_Graphics2D_GetDefaultFillSettings(&fillSettings);
    fillSettings.surface = surface;
    fillSettings.color = color;
    nexus_ret= NEXUS_Graphics2D_Fill(bsp_p->graphics, &fillSettings);
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7362 || BCHP_CHIP == 73625 || BCHP_CHIP == 7439)	/* iqon-uhd */
    if (nexus_ret == NEXUS_GRAPHICS2D_QUEUE_FULL) {
        BKNI_WaitForEvent(bsp_p->spaceAvailableEvent, BKNI_INFINITE);
    }
    nexus_ret= NEXUS_Graphics2D_Checkpoint(bsp_p->graphics, NULL);
    if (nexus_ret== NEXUS_GRAPHICS2D_QUEUED)
    {
        BKNI_WaitForEvent(bsp_p->event, BKNI_INFINITE);
    }
#else

    nexus_ret= NEXUS_Graphics2D_Checkpoint(bsp_p->graphics, NULL);
    if (nexus_ret== NEXUS_GRAPHICS2D_QUEUED)
    {
        BKNI_WaitForEvent(bsp_p->event, BKNI_INFINITE);
    }
#endif

}

NEXUS_DisplayHandle  get_displayHandle(int idx)
{
    return bsp_p->display[idx];

}
EXPORT_SYMBOL(get_displayHandle);
static void offset_resolution_Set(int xres,int yres)
{
    NEXUS_SurfaceCreateSettings createSettings;
    static int offset_width,offset_heigh;
    /* wslee_openpli_fullhd_issue_20160405 */
    int  mode = get_frame_buffer_mode(xres);

    if(offset_width==xres && offset_heigh==yres)
        return;
    NEXUS_Surface_GetDefaultCreateSettings(&createSettings);
    createSettings.width = xres;
#if 1	/* wslee_framebuffer_update_20150115_ */
    #if (BCHP_CHIP == 7346 || BCHP_CHIP == 7362 || BCHP_CHIP == 73625)  /* wslee_atv_hd_aspect_ratio_issue_20150129_  atv_accel_alloc_fail_report */
    createSettings.height = yres * 8;    
    #elif (BCHP_CHIP == 7439)			/* iqon-uhd */
    createSettings.height = yres * 2;
    #else /* 7335 should use max this size (yres*3), otherwise atv image have halt issue & openwebif channel change issue */
    createSettings.height = yres*3;
    #endif
#else
    createSettings.height = yres*2;
#endif
    createSettings.pixelFormat = UI_PIXEL_FORMAT;
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7362 || BCHP_CHIP == 73625 || BCHP_CHIP == 7439) 	/* iqon-uhd */
#if (BCMSDK_VER == 20130612 || BCMSDK_VER == 20130918 || BCMSDK_VER == 20140613 || BCMSDK_VER == 20140919 || BCMSDK_VER == 20151217 || BCMSDK_VER >= 20160329)
    createSettings.alignment= 24; /*HBBTV Browser OSD noise workarund mem alignment*/
    createSettings.heap =  bsp_p->platformConfig.heap[0];
    if(mode==HDFB)
        createSettings.pMemory = (uint8_t *)bsp_p->canvas[SDFB].memory.buffer;
#else
    createSettings.heap = NEXUS_Platform_GetFramebufferHeap( mode);
    if(mode==SDFB)
        createSettings.pMemory = (uint8_t *)bsp_p->left3d_framebuffer.memory.buffer;
    else
        createSettings.pMemory = (uint8_t *)bsp_p->canvas[SDFB].memory.buffer;
#endif
#else
    createSettings.alignment= 24; /*HBBTV Browser OSD noise workarund mem alignment*/
    createSettings.heap =  bsp_p->platformConfig.heap[0];
    if(mode==HDFB)
        createSettings.pMemory = (uint8_t *)bsp_p->canvas[SDFB].memory.buffer;
#endif
    bsp_p->canvas[mode].handle = NEXUS_Surface_Create(&createSettings);
    NEXUS_Surface_GetMemory(bsp_p->canvas[mode].handle, &bsp_p->canvas[mode].memory);
    nexus_ret= NEXUS_Heap_GetStatus(createSettings.heap, &bsp_p->canvas[mode].memStatus);
    BDBG_ASSERT(nexus_ret==NEXUS_SUCCESS);
    BKNI_Memset(bsp_p->canvas[mode].memory.buffer,0,createSettings.height * bsp_p->canvas[mode].memory.pitch);
    gfx_memory_size=createSettings.height * bsp_p->canvas[mode].memory.pitch;
    offset_width=xres;offset_heigh=yres;
    width=xres;height=yres;
}

static void _display_resolution_Set(int index, VIDEO_RESOLUTION_L resolution, VIDEO_FORMAT_L video_format, NEXUS_DisplaySettings *dsp)
{
    NEXUS_Display_GetSettings(bsp_p->display[index], dsp);
    if (index)
    {
        switch (resolution)
        {
            default:
            case eVR_PAL:
                dsp->format = NEXUS_VideoFormat_ePal;
                break;
            case eVR_NTSC:
                dsp->format = NEXUS_VideoFormat_eNtsc;
                break;
        }
    }
    else
    {
        switch (resolution)
        {
            case eVR_480I:
                dsp->format = NEXUS_VideoFormat_eNtsc;
                break;
            case eVR_576I:
                dsp->format = NEXUS_VideoFormat_ePal;
                break;
            case eVR_1080P:
                dsp->format = NEXUS_VideoFormat_e1080p;
                break;
            case eVR_720P:
                dsp->format =  NEXUS_VideoFormat_e720p50hz;
                break;
            case eVR_480P:
                dsp->format = NEXUS_VideoFormat_e480p;
                break;
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7362 || BCHP_CHIP == 73625)    /* (at_7362_initial_work) */  
            case eVR_1080I:
            case eVR_1080I50:
                dsp->format = NEXUS_VideoFormat_e1080i50hz;
                break;
#elif (BCHP_CHIP == 7439)		/* iqon-uhd */
            case eVR_1080I:
            case eVR_1080I50:
                dsp->format = NEXUS_VideoFormat_e1080i50hz;
                break;
#else
            case eVR_1080I:
                dsp->format = NEXUS_VideoFormat_e1080i;
                break;
            case eVR_1080I50:
                dsp->format = NEXUS_VideoFormat_e1080i50hz;
                break;
#endif
            case eVR_1080P24:
                dsp->format = NEXUS_VideoFormat_e1080p24hz;
                break;
            case eVR_1080P25:
                dsp->format = NEXUS_VideoFormat_e1080p25hz;
                break;
            case eVR_1080P30:
                dsp->format = NEXUS_VideoFormat_e1080p30hz;
                break;
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7362 || BCHP_CHIP == 73625)    /* (at_7362_initial_work) */  
            case eVR_1080P50:
                dsp->format = NEXUS_VideoFormat_e1080p50hz;
                break;
            case eVR_1080P60:
                dsp->format = NEXUS_VideoFormat_e1080p60hz;
                break;
#elif (BCHP_CHIP == 7439)	/* iqon-uhd */
            case eVR_1080P50:
                dsp->format = NEXUS_VideoFormat_e1080p50hz;
                break;
            case eVR_1080P60:
                dsp->format = NEXUS_VideoFormat_e1080p60hz;
                break;
#endif
            case eVR_1250I50:
                dsp->format = NEXUS_VideoFormat_e1250i50hz;
                break;
            case eVR_720P24:
                dsp->format = NEXUS_VideoFormat_e720p24hz;
                break;
            case eVR_720P50:
                dsp->format = NEXUS_VideoFormat_e720p50hz;
                break;
            case eVR_576P:
                dsp->format = NEXUS_VideoFormat_e576p;
                break;
            case eVR_1440X240:
                dsp->format = NEXUS_VideoFormat_eCustomer1440x240p60hz;
                break;
            case eVR_1440X288_50:
                dsp->format = NEXUS_VideoFormat_eCustomer1440x288p50hz;
                break;
            case eVR_1366X768:
                dsp->format = NEXUS_VideoFormat_eCustomer1366x768p60hz;
                break;
            case eVR_1366X768_50:
                dsp->format = NEXUS_VideoFormat_eCustomer1366x768p50hz;
                break;
            case eVR_640X480:
                dsp->format = NEXUS_VideoFormat_eVesa640x400p60hz;
                break;
            case eVR_800X600:
                dsp->format = NEXUS_VideoFormat_eVesa800x600p60hz;
                break;
            case eVR_1024X768:
                dsp->format = NEXUS_VideoFormat_eVesa1024x768p60hz;
                break;
            case eVR_1280X768:
                dsp->format = NEXUS_VideoFormat_eVesa1280x768p60hz;
                break;
            case eVR_1280X720_50:
                dsp->format = NEXUS_VideoFormat_eVesa1280x720p50hz;
                break;
            case eVR_1280X720:
                dsp->format = NEXUS_VideoFormat_eVesa1280x720p60hz;
                break;
            case eVR_1280X720_REDUCEDBLANK:
                dsp->format = NEXUS_VideoFormat_eVesa1280x720pReducedBlank;
                break;
#if (BCHP_CHIP == 7439)			/* iqon-uhd-resolution-wslee */ 
            case eVR_3840X2160_24:
                dsp->format = NEXUS_VideoFormat_e3840x2160p24hz;
                break;
            case eVR_3840X2160_25:
                dsp->format = NEXUS_VideoFormat_e3840x2160p25hz;
                break;
            case eVR_3840X2160_30:
                dsp->format = NEXUS_VideoFormat_e3840x2160p30hz;
                break;
            case eVR_3840X2160_50:
                dsp->format = NEXUS_VideoFormat_e3840x2160p50hz;
                break;
            case eVR_3840X2160_60:
                dsp->format = NEXUS_VideoFormat_e3840x2160p60hz;
                break;
#endif
            default:
                dsp->format = NEXUS_VideoFormat_ePal;
                return;
                break;
        }

    }
    dsp->aspectRatio= NEXUS_DisplayAspectRatio_e16x9;
    NEXUS_Display_SetSettings(bsp_p->display[index], dsp);
    if(dsp->format==NEXUS_VideoFormat_eNtsc || dsp->format==NEXUS_VideoFormat_e1080p30hz || dsp->format==NEXUS_VideoFormat_e480p)
        nts_dropField(true);
    else
        nts_dropField(false);
}
void dsp_ResetAspectRatio(void)
{
    int index=1;
    NEXUS_DisplaySettings dsp;
    NEXUS_Display_GetSettings(bsp_p->display[index], &dsp);
    NEXUS_Display_SetSettings(bsp_p->display[index], &dsp);

}
bool Auto_wss=0;
void dsp_AspectRatio(char *aspect)
{
    int index=1;
    NEXUS_DisplaySettings dsp;
    Auto_wss=0;
    static int pre_aspectmode=-1;
    int aspectmode;
    NEXUS_Display_GetSettings(bsp_p->display[index], &dsp);
    if(!strncmp(aspect,"16:9",sizeof("16:9")) || !strncmp(aspect,"16:10",sizeof("16:10")))
        dsp.aspectRatio= NEXUS_DisplayAspectRatio_e16x9;
    else if(!strncmp(aspect,"4:3",sizeof("4:3")))
        dsp.aspectRatio= NEXUS_DisplayAspectRatio_e4x3;
    else
        dsp.aspectRatio= NEXUS_DisplayAspectRatio_eAuto;
    NEXUS_Display_SetSettings(bsp_p->display[index], &dsp);
    ///    NEXUS_DisplayModule_SetUpdateMode(NEXUS_DisplayUpdateMode_eAuto);
    if(!strncmp(aspect,"4:3",sizeof("4:3")))
    {
        tvlite_scart_aspect_ratio_Set(0);
        debug_av("----no Wss mode \n");
        aspectmode=0;
    }
    else if(!strncmp(aspect,"16:9",sizeof("16:9")) || !strncmp(aspect,"16:10",sizeof("16:10")))
    {
        tvlite_scart_aspect_ratio_Set(1);
        aspectmode=1;
    }
    else
    {
        //tvlite_scart_aspect_ratio_Set(1);
        debug_av("---Auto Mode mode \n");
        Auto_wss=1;
        if(pre_aspectmode!=aspectmode)
        {
            if(Is_WideScreen()==true)
                tvlite_scart_aspect_ratio_Set(1);
            else
                tvlite_scart_aspect_ratio_Set(0);
            pre_aspectmode=aspectmode;
        }
    }

}
void Remove_Display(bool remove)
{
    NEXUS_HdmiOutputHandle 	hdmiOutput=get_hdmiDacHandle();
    debug_fb("# [%s] ==== \n",__func__);
    if(RestartFB)
    {
        RestartFB=false;
        IsAvStandBymode=false;
        return;
    }
    if(remove)
    {
        Set_AvStandbymode(true);
        brcm7335_DMX_Sleep();
        tvlite_scart_standby_mode_Set();
#if BCHP_CHIP == 7335
        NEXUS_HdmiOutput_PrevGetStatus(hdmiOutput);
        /* 2014/06/03, sidabary-hdmi-pink */
        #if 0
        NEXUS_HdmiOutput_Disconnect_priv(hdmiOutput);
        #else
        NEXUS_HdmiOutput_SetTmdsSignal(hdmiOutput,false);
        #endif
        NEXUS_Display_RemoveOutput(bsp_p->display[1], NEXUS_ComponentOutput_GetConnector(bsp_p->platformConfig.outputs.component[0]));
        NEXUS_Display_RemoveOutput(bsp_p->display[0], NEXUS_ComponentOutput_GetConnector(bsp_p->platformConfig.outputs.component[0]));
#else
        NEXUS_Display_RemoveAllOutputs(bsp_p->display[1]);
        NEXUS_Display_RemoveAllOutputs(bsp_p->display[0]);
#endif
    }
    else
    {
        Set_AvStandbymode(false);
        tvlite_scart_Wakeup();
#if BCHP_CHIP == 7335
        NEXUS_Display_AddOutput(bsp_p->display[1], NEXUS_ComponentOutput_GetConnector(bsp_p->platformConfig.outputs.component[0]));
        /* 2014/06/03, sidabary-hdmi-pink */
        NEXUS_Display_AddOutput(bsp_p->display[0], NEXUS_ComponentOutput_GetConnector(bsp_p->platformConfig.outputs.component[0]));        
#else
        NEXUS_CompositeOutputSettings CompositeSetting;
        NEXUS_Display_AddOutput(bsp_p->display[0], NEXUS_ComponentOutput_GetConnector(bsp_p->platformConfig.outputs.component[0]));
        NEXUS_Display_AddOutput(bsp_p->display[0], NEXUS_HdmiOutput_GetVideoConnector(bsp_p->platformConfig.outputs.hdmi[0]));
        if (bsp_p->platformConfig.outputs.composite[0]) {
            NEXUS_Display_AddOutput(bsp_p->display[1], NEXUS_CompositeOutput_GetConnector(bsp_p->platformConfig.outputs.composite[0]));
            NEXUS_CompositeOutput_GetSettings(bsp_p->platformConfig.outputs.composite[0], &CompositeSetting);
            NEXUS_CompositeOutput_SetSettings(bsp_p->platformConfig.outputs.composite[0], &CompositeSetting);
        }
#endif
#if 0   /* 2014/06/03, sidabary-hdmi-pink */      
#if BCHP_CHIP == 7335
        NEXUS_HdmiOutput_PrevSettings(hdmiOutput);
        NEXUS_HdmiOutput_SetTmdsSignal(hdmiOutput,true);
#endif
#endif
        display_resolution_Set__(wakeup_resolution, wakeup_video_format,false);
        NEXUS_Display_SetGraphicsSettings(bsp_p->display[0], &bsp_p->GraphicSettings[0]);
        NEXUS_Display_SetGraphicsSettings(bsp_p->display[1], &bsp_p->GraphicSettings[1]);
        NEXUS_Surface_SetSettings(bsp_p->frame_buffer[0].handle, &bsp_p->surface_settings[0]);
        NEXUS_Surface_SetSettings(bsp_p->frame_buffer[1].handle, &bsp_p->surface_settings[1]);
        NEXUS_Display_SetGraphicsFramebuffer(bsp_p->display[0],bsp_p->frame_buffer[0].handle);
        NEXUS_Display_SetGraphicsFramebuffer(bsp_p->display[1],bsp_p->frame_buffer[1].handle);
        NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[0], &bsp_p->ws[0]);
        NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[1], &bsp_p->ws[1]);
        /* 2014/06/03, sidabary-hdmi-pink */
        #if BCHP_CHIP == 7335
        NEXUS_HdmiOutput_PrevSettings(hdmiOutput);        
        NEXUS_HdmiOutput_SetTmdsSignal(hdmiOutput,true);
        #endif
        NEXUS_DisplayModule_SetUpdateMode(NEXUS_DisplayUpdateMode_eAuto);
    }

}
static void Shutdown_AV(bool off)
{
    NEXUS_HdmiOutputHandle 	hdmiOutput=get_hdmiDacHandle();
    debug_fb("# [%s] ==== \n",__func__);
    if(off)
    {
        Set_AvStandbymode(true);
        tvlite_scart_standby_mode_Set();
        NEXUS_HdmiOutput_PrevGetStatus(hdmiOutput);
        NEXUS_HdmiOutput_Disconnect_priv(hdmiOutput);
#if BCHP_CHIP == 7335
        NEXUS_Display_RemoveOutput(bsp_p->display[1], NEXUS_ComponentOutput_GetConnector(bsp_p->platformConfig.outputs.component[0]));
        NEXUS_Display_RemoveOutput(bsp_p->display[0], NEXUS_ComponentOutput_GetConnector(bsp_p->platformConfig.outputs.component[0]));
#else
        NEXUS_Display_RemoveAllOutputs(bsp_p->display[1]);
        NEXUS_Display_RemoveAllOutputs(bsp_p->display[0]);
#endif
    }
    else
    {
        Set_AvStandbymode(false);
        tvlite_scart_Wakeup();
#if BCHP_CHIP == 7335
        NEXUS_Display_AddOutput(bsp_p->display[1], NEXUS_ComponentOutput_GetConnector(bsp_p->platformConfig.outputs.component[0]));
#else
        NEXUS_Display_AddOutput(bsp_p->display[0], NEXUS_ComponentOutput_GetConnector(bsp_p->platformConfig.outputs.component[0]));
#endif
        display_resolution_Set__(wakeup_resolution, wakeup_video_format,false);
#if BCHP_CHIP == 7335
        NEXUS_HdmiOutput_PrevSettings(hdmiOutput);
#endif
        NEXUS_Display_SetGraphicsSettings(bsp_p->display[0], &bsp_p->GraphicSettings[0]);
        NEXUS_Display_SetGraphicsSettings(bsp_p->display[1], &bsp_p->GraphicSettings[1]);
        NEXUS_Surface_SetSettings(bsp_p->frame_buffer[0].handle, &bsp_p->surface_settings[0]);
        NEXUS_Surface_SetSettings(bsp_p->frame_buffer[1].handle, &bsp_p->surface_settings[1]);
        NEXUS_Display_SetGraphicsFramebuffer(bsp_p->display[0],bsp_p->frame_buffer[0].handle);
        NEXUS_Display_SetGraphicsFramebuffer(bsp_p->display[1],bsp_p->frame_buffer[1].handle);
        NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[0], &bsp_p->ws[0]);
        NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[1], &bsp_p->ws[1]);
        NEXUS_DisplayModule_SetUpdateMode(NEXUS_DisplayUpdateMode_eAuto);

    }

}
void Set_AvStandbymode(bool bOn)
{
    IsAvStandBymode=bOn;
}

bool Get_AvStandbymodeStatus(void)
{
    return IsAvStandBymode;
}


/*
 * Display Initialize
 */
static int display_resolution_Set__(VIDEO_RESOLUTION_L resolution, VIDEO_FORMAT_L video_format,bool force)
{
    NEXUS_DisplaySettings ds0;
    static int preVidres;
    if (_video_resolution == resolution && _video_format == video_format && force==false)
    {
        return S_OK;
    }

    debug_fb("# in display_resolution_Set__[] resolution = %d    video_format = %d \n", resolution, video_format);
    _display_resolution_Set(0, resolution, video_format, &ds0); /* hd */
    _display_resolution_Set(1, resolution, video_format, &ds0); /* sd */

    /*********************************************
     *	frame buffer Resolution Set for display 0
     ********************************************/
    NEXUS_Display_GetSettings(bsp_p->display[1], &bsp_p->displaySettings[1]);
    NEXUS_VideoFormat_GetInfo(bsp_p->displaySettings[1].format, &bsp_p->video_format_settings[1]);		/* Save Video format */
    NEXUS_Display_GetGraphicsSettings(bsp_p->display[1], &bsp_p->GraphicSettings[1]);
    debug_fb(" @@@@@@@@ bsp_p->GraphicSettings[1](x=%d,width=%d,clip.width=%d,clip.height=%d)\n",bsp_p->GraphicSettings[1].position.x,bsp_p->GraphicSettings[1].position.width,bsp_p->GraphicSettings[1].clip.width,bsp_p->GraphicSettings[1].clip.height);
    nexus_ret=NEXUS_Display_SetGraphicsSettings(bsp_p->display[1], &bsp_p->GraphicSettings[1]);
    BDBG_ASSERT(nexus_ret==NEXUS_SUCCESS);

    NEXUS_Display_GetSettings(bsp_p->display[0], &bsp_p->displaySettings[0]);
    NEXUS_VideoFormat_GetInfo(bsp_p->displaySettings[0].format, &bsp_p->video_format_settings[0]);		/* Save Video format */
    NEXUS_Display_GetGraphicsSettings(bsp_p->display[0], &bsp_p->GraphicSettings[0]);
    
#if (BCHP_CHIP == 7439)	/* iqon-uhd-resolution-wslee */
    debug_fb("@@@@@@@@ bsp_p->GraphicSettings[0](x=%d,width=%d,clip.width=%d,clip.height=%d)\n",bsp_p->GraphicSettings[0].position.x,bsp_p->GraphicSettings[0].position.width,bsp_p->GraphicSettings[0].clip.width,bsp_p->GraphicSettings[0].clip.height);
    /* uhd resolution(3840x2160) can't support by 7252s, because clip width & height change to full hd size(1920x1080) */ 
    switch(resolution)
    {
        case eVR_3840X2160_24:
        case eVR_3840X2160_25:
        case eVR_3840X2160_30:
        case eVR_3840X2160_50:
        case eVR_3840X2160_60:
            bsp_p->GraphicSettings[0].clip.width  = FHD_FB_WIDTH;
            bsp_p->GraphicSettings[0].clip.height = FHD_FB_HEIGHT;
       default:
            break;
    }
#endif

    /* moved here from _3d_mode__, without this, osd not shown when change a/v setting on 3d mode */
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7439) 	/* iqon-uhd-3dupdate */		
    switch (bsp_p->displaySettings[0].display3DSettings.orientation)
    {
        case NEXUS_VideoOrientation_e3D_LeftRight:
            bsp_p->GraphicSettings[0].position.x = MAX_OFFSET;
            bsp_p->GraphicSettings[0].position.width = bsp_p->video_format_settings[0].width/2 - bsp_p->GraphicSettings[0].position.x*2;
            bsp_p->GraphicSettings[0].clip.width = FHD_FB_WIDTH/2; 
            bsp_p->GraphicSettings[0].clip.height = FHD_FB_HEIGHT;
            break;
        case NEXUS_VideoOrientation_e3D_OverUnder:
            bsp_p->GraphicSettings[0].position.x = MAX_OFFSET;
            bsp_p->GraphicSettings[0].position.width = bsp_p->video_format_settings[0].width - bsp_p->GraphicSettings[0].position.x*2;
            bsp_p->GraphicSettings[0].clip.width = FHD_FB_WIDTH/2;	// osd broken
            bsp_p->GraphicSettings[0].clip.height = FHD_FB_HEIGHT/2;
            break;
        case NEXUS_VideoOrientation_e2D:
#if (BCHP_CHIP == 7439) 	/* iqon-uhd-3dupdate-wslee */		
            /* In case of 7439, without this, it will delete osd popup menu by change 3d mode */
            bsp_p->GraphicSettings[0].position.x = MAX_OFFSET;
            bsp_p->GraphicSettings[0].position.width = bsp_p->video_format_settings[0].width - bsp_p->GraphicSettings[0].position.x*2;
            bsp_p->GraphicSettings[0].clip.width = FHD_FB_WIDTH;
            bsp_p->GraphicSettings[0].clip.height = FHD_FB_HEIGHT;
#endif
            break;
    }
#endif
    nexus_ret=NEXUS_Display_SetGraphicsSettings(bsp_p->display[0], &bsp_p->GraphicSettings[0]);
    BDBG_ASSERT(nexus_ret==NEXUS_SUCCESS);

    NEXUS_Display_GetSettings(bsp_p->display[1], &ds0);
    ds0.aspectRatio= NEXUS_DisplayAspectRatio_e16x9;
    NEXUS_Display_SetSettings(bsp_p->display[1], &ds0);
    NEXUS_Display_GetSettings(bsp_p->display[0], &ds0);
    ds0.aspectRatio= NEXUS_DisplayAspectRatio_e16x9;
    NEXUS_Display_SetSettings(bsp_p->display[0], &ds0);

    NEXUS_Surface_GetSettings(bsp_p->frame_buffer[0].handle, &bsp_p->surface_settings[0]);
    NEXUS_Surface_SetSettings(bsp_p->frame_buffer[0].handle, &bsp_p->surface_settings[0]);

    NEXUS_Surface_GetSettings(bsp_p->frame_buffer[1].handle, &bsp_p->surface_settings[1]);
    NEXUS_Surface_SetSettings(bsp_p->frame_buffer[1].handle, &bsp_p->surface_settings[1]);

    if(bsp_p->display[0])
    {
        /* Now we can grow graphics */
        nexus_ret= NEXUS_Display_SetGraphicsFramebuffer(bsp_p->display[0],bsp_p->frame_buffer[0].handle);
        BDBG_ASSERT(!nexus_ret);
    }
    if(bsp_p->display[1])
    {
        nexus_ret= NEXUS_Display_SetGraphicsFramebuffer(bsp_p->display[1],bsp_p->frame_buffer[1].handle);
        BDBG_ASSERT(!nexus_ret);
    }
    /* get the default window setting */
    NEXUS_VideoWindow_GetSettings(bsp_p->VideoWindowHandle[0], &bsp_p->ws[0]);
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7439) 	/* iqon-uhd-3dupdate-wslee */
    /* force full screen on 3d mode */
    if (bsp_p->displaySettings[0].display3DSettings.orientation)
        bsp_p->ws[0].contentMode = NEXUS_VideoWindowContentMode_eFull;
#endif
    NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[0], &bsp_p->ws[0]);
    
    /* get the default window setting */
    NEXUS_VideoWindow_GetSettings(bsp_p->VideoWindowHandle[1], &bsp_p->ws[1]);
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7439) 	/* iqon-uhd-3dupdate-wslee */
    /* force full screen on 3d mode */
    if (bsp_p->displaySettings[1].display3DSettings.orientation)
        bsp_p->ws[1].contentMode = NEXUS_VideoWindowContentMode_eFull;
#endif
    NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[1], &bsp_p->ws[1]);
    
    NEXUS_DisplayModule_SetAutomaticPictureQuality();
    NEXUS_DisplayModule_SetUpdateMode(NEXUS_DisplayUpdateMode_eAuto);
    _video_resolution = resolution;
    _video_format = video_format;

#if (BCHP_CHIP == 7346) || (BCHP_CHIP == 7439)	/* iqon-uhd */
    /* pip window problem after resolution change */
    set_video_size_video1(bsp_p->pip_ws.position.x, bsp_p->pip_ws.position.y, bsp_p->pip_ws.position.width, bsp_p->pip_ws.position.height, "not_used");
#endif

    isPalMode();
#if (BCHP_CHIP == 7335)     /* BCHP_CHIP != 7346 (at_7362_initial_work) */
    if(preVidres!=vidresolution)
    {

        if(vidresolution <= eVR_576I || vidresolution == eVR_576P)
        {
            fill(bsp_p->frame_buffer[0].handle,0x0);
            fill(bsp_p->frame_buffer[1].handle,0x0);
        }
        preVidres=vidresolution;
    }
#endif
    NEXUS_HdmiOutput_PrevGetStatus(bsp_p->platformConfig.outputs.hdmi[0]);
    return S_OK;

}
int display_resolution_Set(VIDEO_RESOLUTION_L resolution, VIDEO_FORMAT_L video_format)
{
    vidresolution=resolution;

    return display_resolution_Set__(resolution, video_format,false);
}
static void Remove_AudiInputs(void)
{
    NEXUS_AudioOutput_RemoveAllInputs(NEXUS_SpdifOutput_GetConnector(bsp_p->platformConfig.outputs.spdif[0]));
    NEXUS_AudioOutput_RemoveAllInputs(NEXUS_HdmiOutput_GetAudioConnector(bsp_p->platformConfig.outputs.hdmi[0]));

    /* 2014/06/09, sida-audio-analog */
    NEXUS_AudioOutput_RemoveAllInputs(NEXUS_AudioDac_GetConnector(bsp_p->platformConfig.outputs.audioDacs[0]));

#if BCHP_CHIP == 7335
    NEXUS_Ac3Encode_RemoveAllInputs(bsp_p->ac3Encode);
    NEXUS_DtsEncode_RemoveAllInputs(bsp_p->dtsEncode);
    if(bsp_p->DolbyVolumeHandle)
        NEXUS_DolbyVolume_RemoveAllInputs(bsp_p->DolbyVolumeHandle);
#else
    #if 1  /* Use dts handle same to 7335 models. (wslee_downmix_update_20141112)  */
	if(bsp_p->dtsEncode)
	{
    	NEXUS_DtsEncode_RemoveAllInputs(bsp_p->dtsEncode);
	}
    #endif
    if(bsp_p->DolbyVolume258Handle)
        NEXUS_DolbyVolume258_RemoveAllInputs(bsp_p->DolbyVolume258Handle);
#endif
#if 0
    NEXUS_AudioMixer_RemoveAllInputs(bsp_p->mixer);
#endif

}
static void pcm_DownMixMode(void)
{
#if BCHP_CHIP == 7335
    if(bsp_p->DolbyVolumeHandle)
    {
        NEXUS_DolbyVolume_AddInput(bsp_p->DolbyVolumeHandle,
                NEXUS_AudioDecoder_GetConnector(bsp_p->AudDecoderHandle, NEXUS_AudioDecoderConnectorType_eStereo));
    }
#else
    if(bsp_p->DolbyVolume258Handle)
    {
        NEXUS_DolbyVolume258_AddInput(bsp_p->DolbyVolume258Handle,
                NEXUS_AudioDecoder_GetConnector(bsp_p->AudDecoderHandle, NEXUS_AudioDecoderConnectorType_eStereo));
    }
#endif
    NEXUS_AudioOutput_AddInput(NEXUS_SpdifOutput_GetConnector(bsp_p->platformConfig.outputs.spdif[0]),
            NEXUS_AudioDecoder_GetConnector(bsp_p->AudDecoderHandle, NEXUS_AudioDecoderConnectorType_eStereo));

    NEXUS_AudioOutput_AddInput(NEXUS_HdmiOutput_GetAudioConnector(bsp_p->platformConfig.outputs.hdmi[0]),
            NEXUS_AudioDecoder_GetConnector(bsp_p->AudDecoderHandle,NEXUS_AudioDecoderConnectorType_eStereo));

#if (BCHP_CHIP == 7362) || (BCHP_CHIP == 73625)   /* dolby_downmix_issue : wslee */
    if(!Dags_7362_NoRCAOutput())
    {
        NEXUS_AudioOutput_AddInput(NEXUS_AudioDac_GetConnector(bsp_p->platformConfig.outputs.audioDacs[0]),
                               NEXUS_AudioDecoder_GetConnector(bsp_p->AudDecoderHandle,NEXUS_AudioDecoderConnectorType_eStereo));
    }
#else
    /* 2014/06/09, sida-audio-analog */
    NEXUS_AudioOutput_AddInput(NEXUS_AudioDac_GetConnector(bsp_p->platformConfig.outputs.audioDacs[0]),
                               NEXUS_AudioDecoder_GetConnector(bsp_p->AudDecoderHandle,NEXUS_AudioDecoderConnectorType_eStereo));
#endif
}

void set_spdif_passthrough(bool downmix, NEXUS_AudioCodec audioCodec)
{
    Remove_AudiInputs();
    switch (audioCodec)
    {
        case NEXUS_AudioCodec_eDts:
        case NEXUS_AudioCodec_eDtsHd:
            if(downmix)
                pcm_DownMixMode();
            else
            {
#if (BCHP_CHIP == 7362) || (BCHP_CHIP == 73625)   /* wslee_7362_dts_check_20151130_ */
               if(bsp_p->DolbyVolume258Handle)
                {
                    NEXUS_DolbyVolume258_AddInput(bsp_p->DolbyVolume258Handle,
                            NEXUS_AudioDecoder_GetConnector(bsp_p->AudPassthruHandle, NEXUS_AudioDecoderConnectorType_eCompressed));
                }
                NEXUS_AudioOutput_AddInput(NEXUS_SpdifOutput_GetConnector(bsp_p->platformConfig.outputs.spdif[0]),
                        NEXUS_AudioDecoder_GetConnector(bsp_p->AudPassthruHandle, NEXUS_AudioDecoderConnectorType_eCompressed));
                NEXUS_AudioOutput_AddInput(NEXUS_HdmiOutput_GetAudioConnector(bsp_p->platformConfig.outputs.hdmi[0]),
                        NEXUS_AudioDecoder_GetConnector(bsp_p->AudPassthruHandle, NEXUS_AudioDecoderConnectorType_eCompressed));
                if(!Dags_7362_NoRCAOutput())
                {
                    NEXUS_AudioOutput_AddInput(NEXUS_AudioDac_GetConnector(bsp_p->platformConfig.outputs.audioDacs[0]),
                                           NEXUS_AudioDecoder_GetConnector(bsp_p->AudDecoderHandle /*bsp_p->AudPassthruHandle */,NEXUS_AudioDecoderConnectorType_eStereo));
                }
#elif (BCHP_CHIP == 7346)    
                if(bsp_p->DolbyVolume258Handle)
                {
                    NEXUS_DolbyVolume258_AddInput(bsp_p->DolbyVolume258Handle,
                            NEXUS_AudioDecoder_GetConnector(bsp_p->AudPassthruHandle, NEXUS_AudioDecoderConnectorType_eMultichannel));
                }
                NEXUS_DtsEncode_AddInput(bsp_p->dtsEncode,
                        NEXUS_AudioDecoder_GetConnector(bsp_p->AudPassthruHandle,NEXUS_AudioDecoderConnectorType_eMultichannel));
                NEXUS_AudioOutput_AddInput(NEXUS_SpdifOutput_GetConnector(bsp_p->platformConfig.outputs.spdif[0]),
                        NEXUS_DtsEncode_GetConnector(bsp_p->dtsEncode));
                NEXUS_AudioOutput_AddInput(NEXUS_HdmiOutput_GetAudioConnector(bsp_p->platformConfig.outputs.hdmi[0]),
                        NEXUS_DtsEncode_GetConnector(bsp_p->dtsEncode));
                NEXUS_AudioOutput_AddInput(NEXUS_AudioDac_GetConnector(bsp_p->platformConfig.outputs.audioDacs[0]),
                                           NEXUS_AudioDecoder_GetConnector(bsp_p->AudPassthruHandle,NEXUS_AudioDecoderConnectorType_eStereo));
#elif (BCHP_CHIP == 7439)	/* iqon-uhd */
                /* iqon-uhd-dts-audio-wslee  */
                if(bsp_p->DolbyVolume258Handle)
                {
                    NEXUS_DolbyVolume258_AddInput(bsp_p->DolbyVolume258Handle,
                            NEXUS_AudioDecoder_GetConnector(bsp_p->AudPassthruHandle, NEXUS_AudioDecoderConnectorType_eCompressed));
                }
                NEXUS_AudioOutput_AddInput(NEXUS_SpdifOutput_GetConnector(bsp_p->platformConfig.outputs.spdif[0]),
                        NEXUS_AudioDecoder_GetConnector(bsp_p->AudPassthruHandle, NEXUS_AudioDecoderConnectorType_eCompressed));
                NEXUS_AudioOutput_AddInput(NEXUS_HdmiOutput_GetAudioConnector(bsp_p->platformConfig.outputs.hdmi[0]),
                        NEXUS_AudioDecoder_GetConnector(bsp_p->AudPassthruHandle, NEXUS_AudioDecoderConnectorType_eCompressed));
                NEXUS_AudioOutput_AddInput(NEXUS_AudioDac_GetConnector(bsp_p->platformConfig.outputs.audioDacs[0]),
                        NEXUS_AudioDecoder_GetConnector(bsp_p->AudDecoderHandle /*bsp_p->AudPassthruHandle */,NEXUS_AudioDecoderConnectorType_eStereo));
#else
                if(bsp_p->DolbyVolumeHandle)
                {
                    NEXUS_DolbyVolume_AddInput(bsp_p->DolbyVolumeHandle,
                            NEXUS_AudioDecoder_GetConnector(bsp_p->AudPassthruHandle, NEXUS_AudioDecoderConnectorType_eMultichannel));
                }
                NEXUS_DtsEncode_AddInput(bsp_p->dtsEncode,
                        NEXUS_AudioDecoder_GetConnector(bsp_p->AudPassthruHandle,NEXUS_AudioDecoderConnectorType_eMultichannel));
                NEXUS_AudioOutput_AddInput(NEXUS_SpdifOutput_GetConnector(bsp_p->platformConfig.outputs.spdif[0]),
                        NEXUS_DtsEncode_GetConnector(bsp_p->dtsEncode));
                NEXUS_AudioOutput_AddInput(NEXUS_HdmiOutput_GetAudioConnector(bsp_p->platformConfig.outputs.hdmi[0]),
                        NEXUS_DtsEncode_GetConnector(bsp_p->dtsEncode));
                NEXUS_AudioOutput_AddInput(NEXUS_AudioDac_GetConnector(bsp_p->platformConfig.outputs.audioDacs[0]),
                                           NEXUS_AudioDecoder_GetConnector(bsp_p->AudPassthruHandle,NEXUS_AudioDecoderConnectorType_eStereo));
#endif
            }
            break;
        case NEXUS_AudioCodec_eAc3Plus:
            if(downmix)
                pcm_DownMixMode();
            else
            {
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7362 || BCHP_CHIP == 73625 || BCHP_CHIP == 7439)	/* iqon-uhd */
                if(bsp_p->DolbyVolume258Handle)
                {
                    NEXUS_DolbyVolume258_AddInput(bsp_p->DolbyVolume258Handle,
      					  NEXUS_AudioDecoder_GetConnector(bsp_p->AudPassthruHandle,NEXUS_AudioDecoderConnectorType_eCompressed));
                }

                /* iqon-uhd-dolby-audio-wslee : bsp_p->AudDecoderHandle -> bsp_p->AudPassthruHandle */
                NEXUS_AudioOutput_AddInput(
                        NEXUS_SpdifOutput_GetConnector(bsp_p->platformConfig.outputs.spdif[0]),
                        NEXUS_AudioDecoder_GetConnector(bsp_p->AudPassthruHandle, NEXUS_AudioDecoderConnectorType_eCompressed));
                #if 0 /* same to gigablue if audio sound to HDMI when downmix is off, use "1". ((wslee_downmix_update_20141112)) */
                NEXUS_AudioOutput_AddInput(
                        NEXUS_HdmiOutput_GetAudioConnector(bsp_p->platformConfig.outputs.hdmi[0]),
                        NEXUS_AudioDecoder_GetConnector(bsp_p->AudPassthruHandle, NEXUS_AudioDecoderConnectorType_eStereo));
                #else /* same to vu+ */
                NEXUS_AudioOutput_AddInput(
                        NEXUS_HdmiOutput_GetAudioConnector(bsp_p->platformConfig.outputs.hdmi[0]),
                        NEXUS_AudioDecoder_GetConnector(bsp_p->AudPassthruHandle, NEXUS_AudioDecoderConnectorType_eCompressed));
                #endif
#else
                if(bsp_p->DolbyVolumeHandle)
                {
                    NEXUS_DolbyVolume_AddInput(bsp_p->DolbyVolumeHandle,
                            NEXUS_AudioDecoder_GetConnector(bsp_p->AudPassthruHandle, NEXUS_AudioDecoderConnectorType_eMultichannel));
                }

                NEXUS_Ac3Encode_AddInput(bsp_p->ac3Encode,
                        NEXUS_AudioDecoder_GetConnector(bsp_p->AudPassthruHandle, NEXUS_AudioDecoderConnectorType_eMultichannel));

                NEXUS_AudioOutput_AddInput(NEXUS_SpdifOutput_GetConnector(bsp_p->platformConfig.outputs.spdif[0]),
                        (NEXUS_AudioInput) NEXUS_Ac3Encode_GetConnector(bsp_p->ac3Encode));
				
                #if 0 /* same to gigablue if audio sound to HDMI when downmix is off, use "1". ((wslee_downmix_update_20141112)) */
                NEXUS_AudioOutput_AddInput(NEXUS_HdmiOutput_GetAudioConnector(bsp_p->platformConfig.outputs.hdmi[0]),
                        NEXUS_AudioDecoder_GetConnector(bsp_p->AudPassthruHandle,NEXUS_AudioDecoderConnectorType_eStereo));
                #else /* same to vu+ */
                NEXUS_AudioOutput_AddInput(NEXUS_HdmiOutput_GetAudioConnector(bsp_p->platformConfig.outputs.hdmi[0]),
                        (NEXUS_AudioInput) NEXUS_Ac3Encode_GetConnector(bsp_p->ac3Encode));
                #endif
#endif
#if (BCHP_CHIP == 7362) || (BCHP_CHIP == 73625)  /* dolby_downmix_issue : wslee */
                if(!Dags_7362_NoRCAOutput())
                {
                    NEXUS_AudioOutput_AddInput(NEXUS_AudioDac_GetConnector(bsp_p->platformConfig.outputs.audioDacs[0]),
                                           NEXUS_AudioDecoder_GetConnector(bsp_p->AudDecoderHandle /*bsp_p->AudPassthruHandle */,NEXUS_AudioDecoderConnectorType_eStereo));
                }
#elif (BCHP_CHIP == 7439)	/* iqon-uhd */
                /* iqon-uhd-dolby-audio-wslee */
                NEXUS_AudioOutput_AddInput(NEXUS_AudioDac_GetConnector(bsp_p->platformConfig.outputs.audioDacs[0]),
                        NEXUS_AudioDecoder_GetConnector(bsp_p->AudDecoderHandle /*bsp_p->AudPassthruHandle */,NEXUS_AudioDecoderConnectorType_eStereo));
#else
                /* 2014/06/09, sida-audio-analog */
                NEXUS_AudioOutput_AddInput(NEXUS_AudioDac_GetConnector(bsp_p->platformConfig.outputs.audioDacs[0]),
                                           NEXUS_AudioDecoder_GetConnector(bsp_p->AudPassthruHandle,NEXUS_AudioDecoderConnectorType_eStereo));
#endif
            }
            break;
        case NEXUS_AudioCodec_eAc3:
            if(downmix)
                pcm_DownMixMode();
            else
            {
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7362 || BCHP_CHIP == 73625 || BCHP_CHIP == 7439) /* iqon-uhd */
                if(bsp_p->DolbyVolume258Handle)
                {
                    NEXUS_DolbyVolume258_AddInput(bsp_p->DolbyVolume258Handle,
                            NEXUS_AudioDecoder_GetConnector(bsp_p->AudPassthruHandle, NEXUS_AudioDecoderConnectorType_eCompressed));
                }
                NEXUS_AudioOutput_AddInput(
                        NEXUS_SpdifOutput_GetConnector(bsp_p->platformConfig.outputs.spdif[0]),
                        NEXUS_AudioDecoder_GetConnector(bsp_p->AudPassthruHandle, NEXUS_AudioDecoderConnectorType_eCompressed));
                #if 0 /* same to gigablue if audio sound to HDMI when downmix is off, use "1". ((wslee_downmix_update_20141112)) */
                NEXUS_AudioOutput_AddInput(
                        NEXUS_HdmiOutput_GetAudioConnector(bsp_p->platformConfig.outputs.hdmi[0]),
                        NEXUS_AudioDecoder_GetConnector(bsp_p->AudPassthruHandle, NEXUS_AudioDecoderConnectorType_eStereo));
                #else /* same to vu+ */
                NEXUS_AudioOutput_AddInput(
                        NEXUS_HdmiOutput_GetAudioConnector(bsp_p->platformConfig.outputs.hdmi[0]),
                        NEXUS_AudioDecoder_GetConnector(bsp_p->AudPassthruHandle, NEXUS_AudioDecoderConnectorType_eCompressed));
                #endif
#else
                if(bsp_p->DolbyVolumeHandle)
                {
                    NEXUS_DolbyVolume_AddInput(bsp_p->DolbyVolumeHandle,
                            NEXUS_AudioDecoder_GetConnector(bsp_p->AudPassthruHandle, NEXUS_AudioDecoderConnectorType_eMultichannel));
                }
                NEXUS_Ac3Encode_AddInput(bsp_p->ac3Encode,
                        NEXUS_AudioDecoder_GetConnector(bsp_p->AudPassthruHandle, NEXUS_AudioDecoderConnectorType_eMultichannel));

                NEXUS_AudioOutput_AddInput(NEXUS_SpdifOutput_GetConnector(bsp_p->platformConfig.outputs.spdif[0]),
                        (NEXUS_AudioInput) NEXUS_Ac3Encode_GetConnector(bsp_p->ac3Encode));

                #if 0 /* same to gigablue if audio sound to HDMI when downmix is off, use "1". ((wslee_downmix_update_20141112)) */
                NEXUS_AudioOutput_AddInput(NEXUS_HdmiOutput_GetAudioConnector(bsp_p->platformConfig.outputs.hdmi[0]),
                        NEXUS_AudioDecoder_GetConnector(bsp_p->AudPassthruHandle,NEXUS_AudioDecoderConnectorType_eStereo));
                #else /* same to vu+ */
                NEXUS_AudioOutput_AddInput(NEXUS_HdmiOutput_GetAudioConnector(bsp_p->platformConfig.outputs.hdmi[0]),
                        (NEXUS_AudioInput) NEXUS_Ac3Encode_GetConnector(bsp_p->ac3Encode));
                #endif
#endif
#if (BCHP_CHIP == 7362 || BCHP_CHIP == 73625)   /* dolby_downmix_issue : wslee */
                if(!Dags_7362_NoRCAOutput())
                {
                    NEXUS_AudioOutput_AddInput(NEXUS_AudioDac_GetConnector(bsp_p->platformConfig.outputs.audioDacs[0]),
                                           NEXUS_AudioDecoder_GetConnector(bsp_p->AudDecoderHandle /*bsp_p->AudPassthruHandle */,NEXUS_AudioDecoderConnectorType_eStereo));
                }
#elif (BCHP_CHIP == 7439)	/* iqon-uhd */
                /* iqon-uhd-dolby-audio-wslee */
                NEXUS_AudioOutput_AddInput(NEXUS_AudioDac_GetConnector(bsp_p->platformConfig.outputs.audioDacs[0]),
                        NEXUS_AudioDecoder_GetConnector(bsp_p->AudDecoderHandle /*bsp_p->AudPassthruHandle */,NEXUS_AudioDecoderConnectorType_eStereo));
#else
                /* 2014/06/09, sida-audio-analog */
                NEXUS_AudioOutput_AddInput(NEXUS_AudioDac_GetConnector(bsp_p->platformConfig.outputs.audioDacs[0]),
                                           NEXUS_AudioDecoder_GetConnector(bsp_p->AudPassthruHandle,NEXUS_AudioDecoderConnectorType_eStereo));
#endif
            }
            break;
        default:
            pcm_DownMixMode();
            break;
    }
}
void  videoColor_Settings(NEXUS_PictureCtrlCommonSettings val, int index)
{
    NEXUS_PictureCtrlCommonSettings videoSettings;
#if 0
    debug_fb("----[%s] contrast   <%x>---\n",__func__,val.contrast);
    debug_fb("----[%s] brightness <%x>---\n",__func__,val.brightness);
    debug_fb("----[%s] hue        <%x>---\n",__func__,val.hue);
    debug_fb("----[%s] sharpness  <%x>---\n",__func__,val.sharpness);
    debug_fb("----[%s] saturation <%x>---\n",__func__,val.saturation);
#endif
    NEXUS_PictureCtrl_GetCommonSettings(bsp_p->VideoWindowHandle[index],&videoSettings);
    videoSettings.contrast=val.contrast;
    videoSettings.brightness=val.brightness;
    videoSettings.hue=val.hue;
    videoSettings.sharpness=val.sharpness;
    videoSettings.saturation=val.saturation;
    nexus_ret=NEXUS_PictureCtrl_SetCommonSettings(bsp_p->VideoWindowHandle[index],&videoSettings);
    BDBG_ASSERT(!nexus_ret);
}

void   videoColor_Adv_Settings(NEXUS_PictureCtrlAdvColorSettings val, int index)
{
    NEXUS_PictureCtrlAdvColorSettings pictureAdvSettings;

    NEXUS_PictureCtrl_GetAdvColorSettings(bsp_p->VideoWindowHandle[index],&pictureAdvSettings);
    pictureAdvSettings.fleshTone = val.fleshTone;
    pictureAdvSettings.blueBoost = val.blueBoost;
    pictureAdvSettings.greenBoost = val.greenBoost;
    nexus_ret= NEXUS_PictureCtrl_SetAdvColorSettings(bsp_p->VideoWindowHandle[index],&pictureAdvSettings);
    BDBG_ASSERT(!nexus_ret);
}
void 	videoScreen_Split(NEXUS_VideoWindowSplitScreenSettings val, int index)
{
    NEXUS_VideoWindowSplitScreenSettings splitScreen;

    NEXUS_VideoWindow_GetSplitScreenSettings(bsp_p->VideoWindowHandle[index], &splitScreen);
    splitScreen.hue = val.hue;
    splitScreen.contrast = val.contrast;
    splitScreen.brightness = val.brightness;
    splitScreen.colorTemp = val.colorTemp;
    splitScreen.sharpness = val.sharpness;
    splitScreen.contrastStretch = val.contrastStretch;
    splitScreen.dnr = val.dnr;
    splitScreen.anr = val.anr;
    splitScreen.dejagging = val.dejagging;
    splitScreen.deringing = val.deringing;
    splitScreen.autoFlesh = val.autoFlesh;
    splitScreen.blueBoost = val.blueBoost;
    splitScreen.greenBoost = val.greenBoost;
    splitScreen.blueStretch = val.blueStretch;
    nexus_ret= NEXUS_VideoWindow_SetSplitScreenSettings(bsp_p->VideoWindowHandle[index], &splitScreen);
    BDBG_ASSERT(!nexus_ret);
}

void  videoDnr_Settings(NEXUS_VideoWindowDnrSettings val, int index)
{
    NEXUS_VideoWindowDnrSettings dnrSettings;

    NEXUS_VideoWindow_GetDnrSettings(bsp_p->VideoWindowHandle[index], &dnrSettings);
    dnrSettings.mnr = val.mnr;
    dnrSettings.bnr = val.bnr;
    dnrSettings.dcr = val.dcr;
    nexus_ret= NEXUS_VideoWindow_SetDnrSettings(bsp_p->VideoWindowHandle[index], &dnrSettings);
    BDBG_ASSERT(!nexus_ret);
}
static void videoContrast_DefaultGain(int index)
{
    NEXUS_PictureCtrlAdvColorSettings pictureAdvSettings;
    int i=0;
    for(i=0;i<2;i++)
    {
        NEXUS_PictureCtrl_GetAdvColorSettings(bsp_p->VideoWindowHandle[i],&pictureAdvSettings);
        pictureAdvSettings.attenuationR= 0;
        pictureAdvSettings.attenuationG= 0;
        pictureAdvSettings.attenuationB= 0;
        pictureAdvSettings.attenuationRbgEnabled= true;
        nexus_ret= NEXUS_PictureCtrl_SetAdvColorSettings(bsp_p->VideoWindowHandle[i],&pictureAdvSettings);
        BDBG_ASSERT(!nexus_ret);
    }
}
void videoContrast_Stretch(NEXUS_PictureCtrlContrastStretch val, int index)
{
    NEXUS_PictureCtrlContrastStretch contrastStretchSettings;

    NEXUS_PictureCtrl_GetContrastStretch(bsp_p->VideoWindowHandle[index], &contrastStretchSettings);
    contrastStretchSettings.gain = val.gain;
    //	contrastStretchSettings.gainShift = 8;
    contrastStretchSettings.enabled = val.gain;
    nexus_ret= NEXUS_PictureCtrl_SetContrastStretch(bsp_p->VideoWindowHandle[index], &contrastStretchSettings);
    BDBG_ASSERT(!nexus_ret);
}
void create_syncChannel(void)
{
    NEXUS_SyncChannel_GetDefaultSettings(&bsp_p->syncChannelSettings);
    bsp_p->syncChannel = NEXUS_SyncChannel_Create(&bsp_p->syncChannelSettings);

}
void set_syncChannel(bool synon)
{
#if 0
    NEXUS_SyncChannel_GetSettings(bsp_p->syncChannel, &bsp_p->syncChannelSettings);
    if(synon)
    {
        bsp_p->syncChannelSettings.videoInput = NEXUS_VideoDecoder_GetConnector(bsp_p->VideoDecoderHandle);
        bsp_p->syncChannelSettings.audioInput[0] = NEXUS_AudioDecoder_GetConnector(bsp_p->AudDecoderHandle[0], NEXUS_AudioDecoderConnectorType_eStereo);
        bsp_p->syncChannelSettings.audioInput[1] = NEXUS_AudioDecoder_GetConnector(bsp_p->AudDecoderHandle[1], NEXUS_AudioDecoderConnectorType_eCompressed);
        bsp_p->syncChannelSettings.enablePrecisionLipsync = true;
        bsp_p->syncChannelSettings.enableMuteControl= true;
        bsp_p->syncChannelSettings.simultaneousUnmute= true;
    }
    else
    {
        bsp_p->syncChannelSettings.videoInput =NULL;
        bsp_p->syncChannelSettings.audioInput[0] =NULL;
        bsp_p->syncChannelSettings.audioInput[1] =NULL;
    }
    NEXUS_SyncChannel_SetSettings(bsp_p->syncChannel, &bsp_p->syncChannelSettings);
#endif

}
EXPORT_SYMBOL(set_syncChannel);
NEXUS_DmaHandle get_dma()
{
    return bsp_p->dma;
}
/* HBBTV OSD Noise  Workaround */
#define DMA_BLOCK   1*1024*1024
#define DMA_JOBS    1
static void init_Dma(void)
{
#if 1
    bsp_p->dma = NEXUS_Dma_Open(0, NULL);
#else
    void *pMem1=NULL, *pMem2=NULL;
    NEXUS_DmaJobSettings jobSettings;
    NEXUS_DmaJobHandle dmaJobs[DMA_JOBS];
    unsigned block,i;
    bsp_p->dma = NEXUS_Dma_Open(0, NULL);

    NEXUS_Memory_Allocate(DMA_BLOCK, NULL, &pMem1);
    NEXUS_Memory_Allocate(DMA_BLOCK, NULL, &pMem2);
    BKNI_CreateEvent(&bsp_p->dmaevent);
    for(block=DMA_BLOCK;block > 16; block /=4) {
        memset(pMem1, 0x01, block);
        memset(pMem2, 0x02, block);
        NEXUS_DmaJob_GetDefaultSettings(&jobSettings);
        jobSettings.numBlocks = 1;
        for(i=0;i<DMA_JOBS;i++) {
            dmaJobs[i] = NEXUS_DmaJob_Create(bsp_p->dma, &jobSettings);
        }
    }

#endif

}
void Set_RecPumpDescramabler(int idx,int slotid)
{
    bsp_p->recpumpDescramblerIndex[idx]=slotid;
}
int Get_RecPumpDescramabler(int idx)
{
    return bsp_p->recpumpDescramblerIndex[idx];
}
void Set_RecPumpState(int idx,bool started)
{
    bsp_p->recpumpIsStarted[idx]=started;
}

/* sidabary-work-record-remux */
/* to check whether any recording operation is started or not */
/* if you get more stable method to decide recording status in the future, pls change to that */
bool BspStatus_OnRecording_State(void)
{
    int idx;

    for(idx = 0 ; idx < MAX_SUPPORTED_REC ; idx++)
    {
        if(bsp_p->recpumpIsStarted[idx])
            return  true;
    }            
    return  false;            
}

uint8_t Get_FreePump(void)
{
    int i;
    for (i=0;i< MAX_SUPPORTED_REC;i++)
    {
        if(bsp_p->recpumpIsStarted[i]==false)
            return i;
    }
    return MAX_SUPPORTED_REC;

}
bool Get_RecPumpState(int idx)
{
    return bsp_p->recpumpIsStarted[idx];
}
NEXUS_RecpumpHandle get_recpump(int idx)
{
    return bsp_p->recpump[idx];
}
static void init_recypump(void)
{
    int i;
#if RECPUMP_USE
    NEXUS_RecpumpOpenSettings RecSettings;
    NEXUS_Recpump_GetDefaultOpenSettings(&RecSettings);
    RecSettings.index.bufferSize = 0;
    RecSettings.index.dataReadyThreshold = 0;
    for (i=0;i< MAX_SUPPORTED_REC;i++)
        bsp_p->recpump[i] = NEXUS_Recpump_Open(i, &RecSettings);
#endif


}
void Astm_Sync(bool start,NEXUS_AudioCodec audioCodec)
{
#if 0 /* no need manual mode */
#if BCHP_CHIP == 7346
    if(start)
    {
        if( bsp_p->astmstarted==false)
        {
            NEXUS_AstmSettings AstmSettings;
            NEXUS_Astm_GetSettings(bsp_p->astm, &AstmSettings);
            switch (audioCodec)
            {
                case NEXUS_AudioCodec_eDts:
                case NEXUS_AudioCodec_eDtsHd:
                case NEXUS_AudioCodec_eAc3:
                case NEXUS_AudioCodec_eAc3Plus:
                    AstmSettings.stcMaster= bsp_p->AudDecoderHandle;
                    debug_ca("Sync Start AC3 \n");
                    break;
                default:
                    AstmSettings.stcMaster= bsp_p->AudDecoderHandle;
                    debug_ca("Sync Start MPEG \n");
                    break;

            }
            NEXUS_Astm_SetSettings(bsp_p->astm, &AstmSettings);
            NEXUS_Astm_Start(bsp_p->astm);
            bsp_p->astmstarted=true;
        }
    }
    else
    {
        if(bsp_p->astmstarted)
        {
            NEXUS_Astm_Stop(bsp_p->astm);
            bsp_p->astmstarted=false;
        }
    }
#endif
#endif
}
void Astm_SyncMode(void)
{
#if  0
    NEXUS_Astm_GetDefaultSettings(&bsp_p->astmSettings);
    bsp_p->astmSettings.stcChannel = bsp_p->stcChannel;
    bsp_p->astmSettings.videoDecoder = bsp_p->VideoDecoderHandle[0];
    bsp_p->astmSettings.audioDecoder[0] = bsp_p->AudDecoderHandle;
    bsp_p->astmSettings.audioDecoder[1] = bsp_p->AudDecoderHandle;
    bsp_p->astmSettings.stcMaster = bsp_p->AudDecoderHandle; /* audio master is preferred */
    bsp_p->astmSettings.stcSource =NEXUS_AstmStcSource_ePts;
    bsp_p->astm = NEXUS_Astm_Create(&bsp_p->astmSettings);
    bsp_p->astmstarted=false;
#endif
}

static void init_playpump(void)
{
    NEXUS_PlaypumpOpenSettings playPumpSettings;
    NEXUS_Playpump_GetDefaultOpenSettings(&playPumpSettings);
    BKNI_CreateEvent(&bsp_p->PlaypumpEvent[PVR_PLAYPUMP]);
#if VTUNER_ON
    BKNI_CreateEvent(&bsp_p->PlaypumpEvent[VTUNER0_PUMP]);
    #if (NEXUS_NUM_PLAYPUMPS > VTUNER1_PUMP)                            /* sidabary-7362a0-00, consider platform playpump number */
    BKNI_CreateEvent(&bsp_p->PlaypumpEvent[VTUNER1_PUMP]);
    #endif    
#endif
    bsp_p->Playpump[VIDEO_PLAYPUMP]  = NEXUS_Playpump_Open(VIDEO_PLAYPUMP,&playPumpSettings);
    bsp_p->Playpump[AUDIO_PLAYPUMP]  = NEXUS_Playpump_Open(AUDIO_PLAYPUMP,&playPumpSettings);
    bsp_p->Playpump[PVR_PLAYPUMP]    = NEXUS_Playpump_Open(PVR_PLAYPUMP,&playPumpSettings);
#if VTUNER_ON
    bsp_p->Playpump[VTUNER0_PUMP]    = NEXUS_Playpump_Open(VTUNER0_PUMP,&playPumpSettings);
    #if (NEXUS_NUM_PLAYPUMPS > VTUNER1_PUMP)                            /* sidabary-7362a0-00, consider platform playpump number */
    bsp_p->Playpump[VTUNER1_PUMP]    = NEXUS_Playpump_Open(VTUNER1_PUMP,&playPumpSettings);
    #endif    
#endif
}

void  display_Initialize__AV(void)
{
	NEXUS_Error						retCode;
	NEXUS_VideoDecoderSettings		videoDecoderSettings;
    NEXUS_StcChannelSettings 		stcSettings;
    NEXUS_VideoDecoderOpenSettings 	vidOpenSettings;
    NEXUS_AudioDecoderOpenSettings 	audOpenSettings;
	

    NEXUS_Platform_GetConfiguration(&bsp_p->platformConfig);
    /* Bring up audio decoders and connect to outputs */
    /* Bring up the primary audio decoder */
    NEXUS_AudioDecoder_GetDefaultOpenSettings(&audOpenSettings);
    /*If you set multichannelFormat = NEXUS_AudioMultichannelFormat_eNone, then NEXUS_AudioDecoderConnectorType_eMultichannel will simply result in stereo.*/
    audOpenSettings.type= NEXUS_AudioDecoderType_eDecode;
    audOpenSettings.multichannelFormat =NEXUS_AudioMultichannelFormat_eNone;
    bsp_p->AudDecoderHandle= NEXUS_AudioDecoder_Open(0, &audOpenSettings);
    audOpenSettings.multichannelFormat = NEXUS_AudioMultichannelFormat_e5_1;
    audOpenSettings.type= NEXUS_AudioDecoderType_ePassthrough;
    bsp_p->AudPassthruHandle = NEXUS_AudioDecoder_Open(1, &audOpenSettings);
#if BCHP_CHIP == 7335
    bsp_p->DolbyVolumeHandle=NEXUS_DolbyVolume_Open(NULL);
#else
    bsp_p->DolbyVolume258Handle=NEXUS_DolbyVolume258_Open(NULL);
#endif
#if 0 /* it is need lic. */
    bsp_p->truVolume = NEXUS_TruVolume_Open(NULL);
    /* Send processed stereo output to DAC */
    NEXUS_TruVolume_AddInput(bsp_p->truVolume, NEXUS_AudioDecoder_GetConnector(bsp_p->AudDecoderHandle, NEXUS_AudioDecoderConnectorType_eStereo));
    NEXUS_AudioOutput_AddInput(
            NEXUS_AudioDac_GetConnector(bsp_p->platformConfig.outputs.audioDacs[0]),
            NEXUS_TruVolume_GetConnector(bsp_p->truVolume));
    /* Open mixer to mix the description and primary audio */
    NEXUS_AudioMixer_GetDefaultSettings(&bsp_p->mixerSettings);
    bsp_p->mixer = NEXUS_AudioMixer_Open(&bsp_p->mixerSettings);
    /* Add both decoders to the mixer */
    NEXUS_AudioMixer_AddInput(bsp_p->mixer, NEXUS_AudioDecoder_GetConnector(bsp_p->AudDecoderHandle, NEXUS_AudioDecoderConnectorType_eStereo));
    /* Set the Mixer to use DSP mixing */
    NEXUS_AudioMixer_GetSettings(bsp_p->mixer, &bsp_p->mixerSettings);
    bsp_p->mixerSettings.master = NEXUS_AudioDecoder_GetConnector(bsp_p->AudDecoderHandle, NEXUS_AudioDecoderConnectorType_eStereo);
    NEXUS_AudioMixer_SetSettings(bsp_p->mixer, &bsp_p->mixerSettings);
#endif

    bsp_p->dtsEncode = NEXUS_DtsEncode_Open(NULL);
    bsp_p->ac3Encode = NEXUS_Ac3Encode_Open(NULL);
    
    /* bring up decoder and connect to display */
    /* iqon-upt5uhd */
#if	(BCHP_CHIP == 7439)
    NEXUS_VideoDecoder_GetDefaultOpenSettings(&vidOpenSettings);
    vidOpenSettings.excessDirModeEnabled = true;
    bsp_p->VideoDecoderHandle[0] = NEXUS_VideoDecoder_Open(0, &vidOpenSettings); 
    bsp_p->VideoDecoderHandle[1] = NEXUS_VideoDecoder_Open(1, &vidOpenSettings); 

	/* (iqon-uptAAuhd), decoder 0 only support 4k size decoding... */
	if(bsp_p->VideoDecoderHandle[0] != NULL)
	{
		NEXUS_VideoDecoder_GetSettings(bsp_p->VideoDecoderHandle[0],&videoDecoderSettings);
		TRACE_SIDA(("%s: video_decoder_0 maxWidth/height(%d/%d)\n",__func__,videoDecoderSettings.maxWidth,videoDecoderSettings.maxHeight));			
	    videoDecoderSettings.maxWidth  = 3840;
    	videoDecoderSettings.maxHeight = 2160;
    	retCode = NEXUS_VideoDecoder_SetSettings(bsp_p->VideoDecoderHandle[0],&videoDecoderSettings);
    	TRACE_SIDA(("%s: video_decoder_0 settings %s.\n",__func__,retCode ? "fail" : "ok"));
	}
	if(bsp_p->VideoDecoderHandle[1] != NULL)
	{
		NEXUS_VideoDecoder_GetSettings(bsp_p->VideoDecoderHandle[1],&videoDecoderSettings);
		TRACE_SIDA(("%s: video_decoder_1 maxWidth/height(%d/%d)\n",__func__,videoDecoderSettings.maxWidth,videoDecoderSettings.maxHeight));	
	}
    
    #if	0
    bsp_p->VideoDecoderHandle[2] = NEXUS_VideoDecoder_Open(2, &vidOpenSettings); 
    bsp_p->VideoDecoderHandle[3] = NEXUS_VideoDecoder_Open(3, &vidOpenSettings); 
    #endif
#else    
    NEXUS_VideoDecoder_GetDefaultOpenSettings(&vidOpenSettings);
    vidOpenSettings.excessDirModeEnabled = true;
    bsp_p->VideoDecoderHandle[0] = NEXUS_VideoDecoder_Open(0, &vidOpenSettings); /* take default capabilities */
#if NUM_VIDEO==2
    bsp_p->VideoDecoderHandle[1] = NEXUS_VideoDecoder_Open(1, &vidOpenSettings); /* take default capabilities */
#endif
#endif

#if (BCHP_CHIP == 7362 || BCHP_CHIP == 73625)   /* dolby_downmix_issue : wslee */
    if(!Dags_7362_NoRCAOutput())
    {
        NEXUS_AudioOutput_AddInput(NEXUS_AudioDac_GetConnector(bsp_p->platformConfig.outputs.audioDacs[0]),
            NEXUS_AudioDecoder_GetConnector(bsp_p->AudDecoderHandle, NEXUS_AudioDecoderConnectorType_eStereo));
    }
#else
    /* Output PCM to DAC, SPDIF, and HDMI by default */
    NEXUS_AudioOutput_AddInput(NEXUS_AudioDac_GetConnector(bsp_p->platformConfig.outputs.audioDacs[0]),
            NEXUS_AudioDecoder_GetConnector(bsp_p->AudDecoderHandle, NEXUS_AudioDecoderConnectorType_eStereo));
#endif
    /**********************************************************************************************************/
    NEXUS_AudioOutput_AddInput(NEXUS_SpdifOutput_GetConnector(bsp_p->platformConfig.outputs.spdif[0]),
            NEXUS_AudioDecoder_GetConnector(bsp_p->AudDecoderHandle, NEXUS_AudioDecoderConnectorType_eStereo));
    NEXUS_AudioOutput_AddInput(NEXUS_HdmiOutput_GetAudioConnector(bsp_p->platformConfig.outputs.hdmi[0]),
            NEXUS_AudioDecoder_GetConnector(bsp_p->AudDecoderHandle, NEXUS_AudioDecoderConnectorType_eStereo));
    /************************************************************************************************/
    /* bring up display */
    /************************************************************************************************/
    NEXUS_Display_GetDefaultSettings(&bsp_p->displaySettings[0]);
    bsp_p->displaySettings[0].displayType= NEXUS_DisplayType_eAuto;
    bsp_p->displaySettings[0].background = 0xFF000000;
    bsp_p->displaySettings[0].vecIndex = 0;
    bsp_p->displaySettings[0].format = NEXUS_VideoFormat_e1080i50hz;
#if (BCHP_CHIP == 7346) || (BCHP_CHIP == 7439) 	/* iqon-uhd-3dupdate-wslee */
    bsp_p->displaySettings[0].alignmentTarget = bsp_p->display[1]; /* set the alignment target to the SD display */
    bsp_p->displaySettings[0].timingGenerator=NEXUS_VideoOrientation_e3D_OverUnder;
#endif
    bsp_p->display[0] = NEXUS_Display_Open(0, &bsp_p->displaySettings[0]);			/* HDMI, Component */
    /************************************************************************************************/
    NEXUS_Display_GetDefaultSettings(&bsp_p->displaySettings[1]);
    bsp_p->displaySettings[1].format = NEXUS_VideoFormat_ePal;
    bsp_p->displaySettings[1].displayType= NEXUS_DisplayType_eAuto;
    bsp_p->displaySettings[1].background = 0xFF000000;
    bsp_p->displaySettings[1].vecIndex = 1;
    bsp_p->display[1] = NEXUS_Display_Open(1, &bsp_p->displaySettings[1]);			/* SVideo, Composite */
    /************************************************************************************************/
    NEXUS_StcChannel_GetDefaultSettings(0, &stcSettings);
    stcSettings.timebase = NEXUS_Timebase_e0;
    stcSettings.mode = NEXUS_StcChannelMode_eAuto; /* live */
    stcSettings.modeSettings.Auto.behavior =NEXUS_StcChannelAutoModeBehavior_eAudioMaster;
    bsp_p->stcChannel = NEXUS_StcChannel_Open(0, &stcSettings);
#if (BCHP_CHIP == 7346) || (BCHP_CHIP == 7439)  /* iqon-uhd */
    NEXUS_StcChannel_GetDefaultSettings(1, &stcSettings);
    stcSettings.timebase                   = NEXUS_Timebase_e1;
    stcSettings.mode                       = NEXUS_StcChannelMode_eAuto; /* PIP live */
    stcSettings.modeSettings.Auto.behavior = NEXUS_StcChannelAutoModeBehavior_eFirstAvailable;
    bsp_p->stcPIPChannel = NEXUS_StcChannel_Open(1, &stcSettings);
    Astm_SyncMode();
#endif



}
void avsync_Livemode(int live,NEXUS_PidChannelHandle channelHandle)
{
    NEXUS_StcChannelSettings stcSettings;
    if(live==2) /*PIP */
        NEXUS_StcChannel_GetSettings(bsp_p->stcPIPChannel, &stcSettings);
    else
        NEXUS_StcChannel_GetSettings(bsp_p->stcChannel, &stcSettings);
    stcSettings.mode = NEXUS_StcChannelMode_eAuto;
    if(live)
        stcSettings.modeSettings.Auto.behavior =NEXUS_StcChannelAutoModeBehavior_eFirstAvailable;
    else
        stcSettings.modeSettings.Auto.behavior =NEXUS_StcChannelAutoModeBehavior_eAudioMaster;
    stcSettings.modeSettings.Auto.transportType = NEXUS_TransportType_eTs;
    stcSettings.modeSettings.pcr.pidChannel = channelHandle;
    if(live==2)
        nexus_ret= NEXUS_StcChannel_SetSettings(bsp_p->stcPIPChannel, &stcSettings);
    else
        nexus_ret= NEXUS_StcChannel_SetSettings(bsp_p->stcChannel, &stcSettings);
    BDBG_ASSERT(!nexus_ret);

}
void Stc_Pause(bool frozen)
{
    if(frozen)
        NEXUS_StcChannel_SetRate(bsp_p->stcChannel, 300, 300);
    else
        NEXUS_StcChannel_SetRate(bsp_p->stcChannel, 0, 0);
    NEXUS_StcChannel_Freeze( bsp_p->stcChannel,frozen );

}
void Close_Pip(void)
{

    NEXUS_Surface_Destroy(bsp_p->still_canvas.handle);
    NEXUS_StillDecoder_Close(bsp_p->stillDecoder);

}
void Open_Pip(void)
{
    bsp_p->stillDecoder = NEXUS_StillDecoder_Open(bsp_p->VideoDecoderHandle[0], 0, NULL);


}
int display_Initialize__bsp(VIDEO_RESOLUTION_L resolution, VIDEO_FORMAT_L video_format )
{
    NEXUS_SurfaceCreateSettings createSettings;
    NEXUS_HdmiOutputStatus hdmi_output_status;
    NEXUS_DisplaySettings ds0;
    unsigned loops = 0;
    _video_resolution = resolution;
    _video_format = video_format;

    /***************************************************************************/
    if(bsp_p->platformConfig.outputs.hdmi[0]){
        NEXUS_Display_GetSettings(bsp_p->display[0], &ds0);
        NEXUS_Display_AddOutput(bsp_p->display[0], NEXUS_HdmiOutput_GetVideoConnector(bsp_p->platformConfig.outputs.hdmi[0]));
        NEXUS_HdmiOutput_GetSettings(bsp_p->platformConfig.outputs.hdmi[0], &bsp_p->hdmi_output_settings);
        bsp_p->hdmi_output_settings.hotplugCallback.callback = hotplug_callback;
        bsp_p->hdmi_output_settings.preemphasisEnabled = true;
        bsp_p->hdmi_output_settings.hotplugCallback.context = bsp_p->platformConfig.outputs.hdmi[0];
        bsp_p->hdmi_output_settings.hotplugCallback.param = (int)bsp_p->display[0];
        bsp_p->hdmi_output_settings.preFormatChangeAvMuteDelay= 500;
        bsp_p->hdmi_output_settings.postFormatChangeAvMuteDelay= 500;
        NEXUS_HdmiOutput_SetSettings(bsp_p->platformConfig.outputs.hdmi[0], &bsp_p->hdmi_output_settings);
        for (loops = 0; loops < 10; loops++) {
            nexus_ret= NEXUS_HdmiOutput_GetStatus(bsp_p->platformConfig.outputs.hdmi[0],&hdmi_output_status);
            BDBG_ASSERT(!nexus_ret);
            if (hdmi_output_status.connected) {
                break;
            }
            BKNI_Sleep(1000);
        }

        /* sidabary-work-hdmi-00 */
#if __hdmi_trace__
        printk("[sida] dispVF(%d)\n",ds0.format);
        printk("[sida] connect(%d)\n",hdmi_output_status.connected);
        printk("[sida] device(%d)\n",hdmi_output_status.hdmiDevice);
        printk("[sida] name(%s)\n",hdmi_output_status.monitorName);
        printk("[sida] preVF(%d)\n",hdmi_output_status.preferredVideoFormat);
        printk("[sida] VF(%d)\n",hdmi_output_status.videoFormat);
        {
            int iidx;
            for(iidx = 0 ; iidx < NEXUS_VideoFormat_eMax ; iidx++)
            {
                printk("[sida] (%03d)support(%d)\n",iidx,hdmi_output_status.videoFormatSupported[iidx]);
            }
        }
#endif

        if (!hdmi_output_status.connected)// return 0;
        {
            NEXUS_Display_SetSettings(bsp_p->display[0], &ds0);
            hotplug_callback(bsp_p->platformConfig.outputs.hdmi[0], (int)bsp_p->display[0]);
        }
    }
#if HAVE_DVIINPUT
    NEXUS_HdDviInput_GetDefaultSettings(&bsp_p->hdDviInputSettings);
    bsp_p->hdDviInput = NEXUS_HdDviInput_Open(0, &bsp_p->hdDviInputSettings);
#endif

    /************************************************************************************************/
    if (bsp_p->platformConfig.outputs.composite[0]) {
        NEXUS_Display_AddOutput(bsp_p->display[1], NEXUS_CompositeOutput_GetConnector(bsp_p->platformConfig.outputs.composite[0]));
    }
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7362 || BCHP_CHIP == 73625 || BCHP_CHIP == 7439)
    NEXUS_CompositeOutputSettings CompositeSetting;
    NEXUS_CompositeOutput_GetSettings(bsp_p->platformConfig.outputs.composite[0], &CompositeSetting);
    //    CompositeSetting.dac=NEXUS_VideoDac_e3; /* Scart RGB */
    NEXUS_CompositeOutput_SetSettings(bsp_p->platformConfig.outputs.composite[0], &CompositeSetting);
#endif
    bsp_p->VideoWindowHandle[1] = NEXUS_VideoWindow_Open(bsp_p->display[1], 0);
    NEXUS_VideoWindow_AddInput(bsp_p->VideoWindowHandle[1], NEXUS_VideoDecoder_GetConnector(bsp_p->VideoDecoderHandle[0]));
#if (BCHP_CHIP == 7346)
    bsp_p->VideoPIPWindowHandle[1] = NEXUS_VideoWindow_Open(bsp_p->display[1], 1);
    NEXUS_VideoWindow_AddInput(bsp_p->VideoPIPWindowHandle[1], NEXUS_VideoDecoder_GetConnector(bsp_p->VideoDecoderHandle[1]));
    NEXUS_VideoWindow_GetSettings(bsp_p->VideoPIPWindowHandle[1], &bsp_p->ws[1]);
    bsp_p->ws[1].visible = false;
    NEXUS_VideoWindow_SetSettings(bsp_p->VideoPIPWindowHandle[1], &bsp_p->ws[1]);
#elif (BCHP_CHIP == 7439)
    bsp_p->VideoPIPWindowHandle[1] = NEXUS_VideoWindow_Open(bsp_p->display[1], 1);
    NEXUS_VideoWindow_AddInput(bsp_p->VideoPIPWindowHandle[1], NEXUS_VideoDecoder_GetConnector(bsp_p->VideoDecoderHandle[1]));
    NEXUS_VideoWindow_GetSettings(bsp_p->VideoPIPWindowHandle[1], &bsp_p->ws[1]);
    bsp_p->ws[1].visible = false;
    NEXUS_VideoWindow_SetSettings(bsp_p->VideoPIPWindowHandle[1], &bsp_p->ws[1]);
#endif
    /***************************************************************************/
    if (bsp_p->platformConfig.outputs.component[0]) {
        NEXUS_ComponentOutputSettings ncos;
        NEXUS_Display_AddOutput(bsp_p->display[0], NEXUS_ComponentOutput_GetConnector(bsp_p->platformConfig.outputs.component[0]));
        NEXUS_ComponentOutput_GetSettings(bsp_p->platformConfig.outputs.component[0], &ncos);
        ncos.type = NEXUS_ComponentOutputType_eYPrPb;
        NEXUS_ComponentOutput_SetSettings(bsp_p->platformConfig.outputs.component[0], &ncos);
    }

    /***************************************************************************/
    bsp_p->VideoWindowHandle[0] = NEXUS_VideoWindow_Open(bsp_p->display[0], 0);
    NEXUS_VideoWindow_AddInput(bsp_p->VideoWindowHandle[0], NEXUS_VideoDecoder_GetConnector(bsp_p->VideoDecoderHandle[0]));
#if (BCHP_CHIP == 7346)
    bsp_p->VideoPIPWindowHandle[0] = NEXUS_VideoWindow_Open(bsp_p->display[0], 1);
    NEXUS_VideoWindow_AddInput(bsp_p->VideoPIPWindowHandle[0], NEXUS_VideoDecoder_GetConnector(bsp_p->VideoDecoderHandle[1]));
    NEXUS_VideoWindow_GetSettings(bsp_p->VideoPIPWindowHandle[0], &bsp_p->ws[0]);
    bsp_p->ws[0].visible = false;
    NEXUS_VideoWindow_SetSettings(bsp_p->VideoPIPWindowHandle[0], &bsp_p->ws[0]);
#elif (BCHP_CHIP == 7439)	/* iqon-uhd */
    bsp_p->VideoPIPWindowHandle[0] = NEXUS_VideoWindow_Open(bsp_p->display[0], 1);
    NEXUS_VideoWindow_AddInput(bsp_p->VideoPIPWindowHandle[0], NEXUS_VideoDecoder_GetConnector(bsp_p->VideoDecoderHandle[1]));
    NEXUS_VideoWindow_GetSettings(bsp_p->VideoPIPWindowHandle[0], &bsp_p->ws[0]);
    bsp_p->ws[0].visible = false;
    NEXUS_VideoWindow_SetSettings(bsp_p->VideoPIPWindowHandle[0], &bsp_p->ws[0]);
#endif
    /************************************************************************************************/
    BKNI_CreateEvent(&bsp_p->still_picture_event);
    BKNI_CreateEvent(&bsp_p->event);
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7362 || BCHP_CHIP == 73625 || BCHP_CHIP == 7439)
    BKNI_CreateEvent(&bsp_p->spaceAvailableEvent);
#endif
    bsp_p->graphics = NEXUS_Graphics2D_Open(0, NULL);
    NEXUS_Graphics2D_GetSettings(bsp_p->graphics, &bsp_p->gfxSettings);
    bsp_p->gfxSettings.checkpointCallback.callback = gfx_complete;
    bsp_p->gfxSettings.checkpointCallback.context = bsp_p->event;
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7362 || BCHP_CHIP == 73625 || BCHP_CHIP == 7439)
    bsp_p->gfxSettings.packetSpaceAvailable.callback = gfx_complete;
    bsp_p->gfxSettings.packetSpaceAvailable.context = bsp_p->spaceAvailableEvent;
#endif 
    NEXUS_Graphics2D_SetSettings(bsp_p->graphics, &bsp_p->gfxSettings);
    /* Create HD Graphics Actual FrameBuffer (960 x 1080) */
    /************************************************************************************/
    NEXUS_Surface_GetDefaultCreateSettings(&createSettings);
    createSettings.width = FHD_FB_WIDTH;
    createSettings.height = FHD_FB_HEIGHT;
    createSettings.pixelFormat = UI_PIXEL_FORMAT;
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7362 || BCHP_CHIP == 73625)        /* (at_7362_initial_work) */
    createSettings.heap = NEXUS_Platform_GetFramebufferHeap(0);
#elif (BCHP_CHIP == 7439)
	createSettings.heap = NEXUS_Platform_GetFramebufferHeap(0);
#else
    createSettings.heap =  bsp_p->platformConfig.heap[0];
    createSettings.alignment = 12; /* 2^12 = 4K alignment needed for RAC. see nexus_dma.h for detailed description of cache coherency requirements. */
#endif
    bsp_p->frame_buffer[0].handle = NEXUS_Surface_Create(&createSettings);
    NEXUS_Surface_GetMemory(bsp_p->frame_buffer[0].handle, &bsp_p->frame_buffer[0].memory);
    nexus_ret= NEXUS_Heap_GetStatus(createSettings.heap, &bsp_p->frame_buffer[0].memStatus);
    BDBG_ASSERT(nexus_ret==NEXUS_SUCCESS);

    //_display_resolution_Set(0, resolution,video_format, &ds0);
    /************************************************************************************/
    /* Backup HD display in bsp_p->video_format_settings[0] */
    /************************************************************************************/
    NEXUS_Display_GetSettings(bsp_p->display[0], &bsp_p->displaySettings[0]);
    NEXUS_VideoFormat_GetInfo(bsp_p->displaySettings[0].format, &bsp_p->video_format_settings[0]);		/* Save Video format */
    /************************************************************************************/
    NEXUS_Display_GetSettings(bsp_p->display[1], &bsp_p->displaySettings[1]);
    NEXUS_VideoFormat_GetInfo(bsp_p->displaySettings[1].format, &bsp_p->video_format_settings[1]);		/* Save Video format */
    /************************************************************************************/
    /* HD FrameBuffer use 720x576|480 to fit NEXUS_VideoFormat_e1080i format */
    /************************************************************************************/
    NEXUS_Display_GetGraphicsSettings(bsp_p->display[0], &bsp_p->GraphicSettings[0]);
    bsp_p->GraphicSettings[0].position.height = bsp_p->video_format_settings[0].height;
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7362 || BCHP_CHIP == 73625 || BCHP_CHIP == 7439)
    bsp_p->GraphicSettings[0].position.x=MAX_OFFSET;
    bsp_p->GraphicSettings[0].position.width = bsp_p->video_format_settings[0].width-bsp_p->GraphicSettings[0].position.x*2;
#else
    bsp_p->GraphicSettings[0].position.width = bsp_p->video_format_settings[0].width;
#endif
    bsp_p->GraphicSettings[0].clip.height = FHD_FB_HEIGHT;
    bsp_p->GraphicSettings[0].clip.width = FHD_FB_WIDTH;
    bsp_p->GraphicSettings[0].enabled = true;
#if defined(__DEBUG_FRAME_BUFF1__)
  	printk("@@@@@@@@@@@@@ HD Framebuffer : pos(%d : %d, %d)clip(%d,%d)\n",bsp_p->GraphicSettings[0].position.x,bsp_p->GraphicSettings[0].position.width,bsp_p->GraphicSettings[0].position.height,bsp_p->GraphicSettings[0].clip.width,bsp_p->GraphicSettings[0].clip.height);
#endif
    bsp_p->GraphicSettings[0].chromakeyEnabled = false;
    bsp_p->GraphicSettings[0].antiflutterFilter = true;//false;	/* Looks better */
    nexus_ret=NEXUS_Display_SetGraphicsSettings(bsp_p->display[0], &bsp_p->GraphicSettings[0]);

#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7439) 	/* iqon-uhd-3dupdate-wslee */
    NEXUS_VideoFormat_GetInfo(bsp_p->displaySettings[0].format, &bsp_p->video_format_settings[0]);		/* Save Video format */
    NEXUS_Surface_GetDefaultCreateSettings(&createSettings);
    createSettings.pixelFormat = NEXUS_PixelFormat_eA8_R8_G8_B8;
    createSettings.width       = bsp_p->video_format_settings[0].width; /* use full res */
    createSettings.height      = bsp_p->video_format_settings[0].height;
    
    createSettings.heap = NEXUS_Platform_GetFramebufferHeap(0);
    bsp_p->left3d_framebuffer.handle= NEXUS_Surface_Create(&createSettings);
    bsp_p->right3d_framebuffer.handle= NEXUS_Surface_Create(&createSettings);
    NEXUS_Surface_GetMemory(bsp_p->left3d_framebuffer.handle, &bsp_p->left3d_framebuffer.memory);
    NEXUS_Surface_GetMemory(bsp_p->right3d_framebuffer.handle, &bsp_p->right3d_framebuffer.memory);

    /* fill with black */
#if (BCHP_CHIP != 7439) 	/* iqon-uhd-3dupdate-wslee */
    /* 7439 will create halt by below BKNI_Memset() */
    BKNI_Memset(bsp_p->left3d_framebuffer.memory.buffer, 0, createSettings.height * bsp_p->left3d_framebuffer.memory
            .pitch);
    BKNI_Memset(bsp_p->right3d_framebuffer.memory.buffer, 0, createSettings.height * bsp_p->right3d_framebuffer.memory
            .pitch);
#endif
    NEXUS_Graphics_GetDefaultFramebuffer3D(&bsp_p->framebuffer3d);
    /* same framebuffer for both eyes */
    bsp_p->framebuffer3d.main = bsp_p->frame_buffer[0].handle;
    bsp_p->framebuffer3d.right = bsp_p->frame_buffer[0].handle;
    bsp_p->framebuffer3d.orientation =  NEXUS_VideoOrientation_e3D_OverUnder;//NEXUS_VideoOrientation_e3D_LeftRight;
    nexus_ret = NEXUS_Display_SetGraphicsFramebuffer3D(bsp_p->display[0], &bsp_p->framebuffer3d);
    BDBG_ASSERT(!nexus_ret);
#endif

    /************************************************************************************/
    /* Create SD Graphics Actual FrameBuffer (960 x 1080) */
    /* Composite/SVideo Port use SD Display */
    /************************************************************************************/
    NEXUS_Surface_GetDefaultCreateSettings(&createSettings);
    createSettings.width = SD_FB_WIDTH;
    createSettings.height = SD_FB_HEIGHT*2;
    createSettings.pixelFormat = UI_PIXEL_FORMAT;
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7362 || BCHP_CHIP == 73625)        /* (at_7362_initial_work) */
    createSettings.heap = NEXUS_Platform_GetFramebufferHeap(1);
#elif (BCHP_CHIP == 7439)
	createSettings.heap = NEXUS_Platform_GetFramebufferHeap(1);	
#else
    createSettings.heap =  bsp_p->platformConfig.heap[0];
    createSettings.alignment = 12; /* 2^12 = 4K alignment needed for RAC. see nexus_dma.h for detailed description of cache coherency requirements. */
#endif
    bsp_p->frame_buffer[1].handle = NEXUS_Surface_Create(&createSettings);
    NEXUS_Surface_GetMemory(bsp_p->frame_buffer[1].handle, &bsp_p->frame_buffer[1].memory);
    nexus_ret= NEXUS_Heap_GetStatus(createSettings.heap, &bsp_p->frame_buffer[1].memStatus);
    BDBG_ASSERT(nexus_ret==NEXUS_SUCCESS);
    //_display_resolution_Set(1, resolution, video_format, &ds1);
    /* Backup HD display in bsp_p->video_format_settings[0] */
    /************************************************************************************/
    /* SD FrameBuffer use 720x576|480 to fit NEXUS_VideoFormat_eNtsc|Pal format */
    /************************************************************************************/
    NEXUS_Display_GetGraphicsSettings(bsp_p->display[1], &bsp_p->GraphicSettings[1]);
    bsp_p->GraphicSettings[1].position.height = bsp_p->video_format_settings[1].height;
    bsp_p->GraphicSettings[1].position.width = bsp_p->video_format_settings[1].width;
    bsp_p->GraphicSettings[1].clip.height =SD_FB_HEIGHT;
    bsp_p->GraphicSettings[1].clip.width = SD_FB_WIDTH;
    bsp_p->GraphicSettings[1].enabled = true;
    bsp_p->GraphicSettings[1].chromakeyEnabled = false;
    bsp_p->GraphicSettings[1].antiflutterFilter = true;	/* Looks better */
    nexus_ret=NEXUS_Display_SetGraphicsSettings(bsp_p->display[1], &bsp_p->GraphicSettings[1]);
    BDBG_ASSERT(nexus_ret==NEXUS_SUCCESS);
    NEXUS_Display_GetSettings(bsp_p->display[1], &ds0);
    ds0.frameRateMaster=NEXUS_VideoDecoder_GetConnector(bsp_p->VideoDecoderHandle[0]);
    NEXUS_Display_SetSettings(bsp_p->display[1], &ds0);
    NEXUS_Display_GetSettings(bsp_p->display[0], &ds0);
    ds0.frameRateMaster=NEXUS_VideoDecoder_GetConnector(bsp_p->VideoDecoderHandle[0]);
    NEXUS_Display_SetSettings(bsp_p->display[0], &ds0);
    /************************************************************************************/
    /* FrameBuffer Auto Cache Flush Setting, we'll never to cpu draws to framebuffer, so disable needless cache flushes */
    /************************************************************************************/
    NEXUS_Surface_GetSettings(bsp_p->frame_buffer[0].handle, &bsp_p->surface_settings[0]);
    NEXUS_Surface_SetSettings(bsp_p->frame_buffer[0].handle, &bsp_p->surface_settings[0]);

    NEXUS_Surface_GetSettings(bsp_p->frame_buffer[1].handle, &bsp_p->surface_settings[1]);
    NEXUS_Surface_SetSettings(bsp_p->frame_buffer[1].handle, &bsp_p->surface_settings[1]);
    NEXUS_VideoFormat_GetInfo(bsp_p->displaySettings[1].format, &bsp_p->video_format_settings[1]);		/* Save Video format */
#if 1
    if(bsp_p->display[0])
    {
        /* Now we can grow graphics */
        nexus_ret= NEXUS_Display_SetGraphicsFramebuffer(bsp_p->display[0],bsp_p->frame_buffer[0].handle);
        BDBG_ASSERT(!nexus_ret);
    }
    if(bsp_p->display[1])
    {
        nexus_ret= NEXUS_Display_SetGraphicsFramebuffer(bsp_p->display[1],bsp_p->frame_buffer[1].handle);
        BDBG_ASSERT(!nexus_ret);
    }
#endif
#if 1	/* wslee_framebuffer_update_20150115_ */
    offset_resolution_Set(720,576);
#else
    offset_resolution_Set(720,1080);
#endif
    canvas_init_memory(720);

#if 1	/* wslee_framebuffer_update_20150115_ */
    offset_resolution_Set(OFFSET_WHDRES,OFFSET_HHDRES);
#else
    offset_resolution_Set(OFFSET_WHDRES,OFFSET_HHDRES*2);
#endif
    canvas_init_memory(OFFSET_WHDRES);
    offset_hdwidth  = OFFSET_WHDRES;
    offset_hdheight = OFFSET_HHDRES;

	#if defined(__DEBUG_FRAME_BUFF1__)
  	printk("@@@@@@@@@@@@@ offset_resolution : (%d, %d)\n",OFFSET_WHDRES,OFFSET_HHDRES);
	#endif

    /* get the default window setting */
    NEXUS_VideoWindow_GetSettings(bsp_p->VideoWindowHandle[0], &bsp_p->ws[0]);
    bsp_p->ws[0].letterBoxDetect = true;
    /* Turn on display */
    bsp_p->ws[0].visible = true;
    bsp_p->ws[0].zorder = 1;
    bsp_p->ws[0].autoMaster= true;
    NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[0], &bsp_p->ws[0]);
    /* get the default window setting */
    bsp_p->ws[0].contentMode=NEXUS_VideoWindowContentMode_eFull;
    NEXUS_VideoWindow_GetSettings(bsp_p->VideoWindowHandle[1], &bsp_p->ws[1]);
    bsp_p->ws[1].letterBoxDetect = true;
    /* Turn on display */
    bsp_p->ws[1].autoMaster= true;
    bsp_p->ws[1].visible = true;
    bsp_p->ws[1].zorder = 1;
    bsp_p->ws[1].contentMode=NEXUS_VideoWindowContentMode_eFull;
    NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[1], &bsp_p->ws[1]);
#if (BCHP_CHIP == 7346) || (BCHP_CHIP == 7439)	/* iqon-uhd */
    /* get the PIP default window setting */
    NEXUS_VideoWindow_GetSettings(bsp_p->VideoPIPWindowHandle[0], &bsp_p->ws[0]);
    bsp_p->ws[0].visible = false;
    bsp_p->ws[0].zorder = 2;
    bsp_p->ws[0].preferSyncLock = true;	// pip video broken problem
    NEXUS_VideoWindow_SetSettings(bsp_p->VideoPIPWindowHandle[0], &bsp_p->ws[0]);
    NEXUS_VideoWindow_GetSettings(bsp_p->VideoPIPWindowHandle[1], &bsp_p->ws[1]);
    bsp_p->ws[1].visible = false;
    bsp_p->ws[1].zorder = 2;
    bsp_p->ws[1].preferSyncLock = true;	// pip video broken problem
    NEXUS_VideoWindow_SetSettings(bsp_p->VideoPIPWindowHandle[1], &bsp_p->ws[1]);
#endif
    NEXUS_DisplayModule_SetAutomaticPictureQuality();
    NEXUS_DisplayModule_SetUpdateMode(NEXUS_DisplayUpdateMode_eAuto);
    create_syncChannel();
    
    gDspInitialize = 1;    		/* wslee_hdmi_update_20141031 */
	
    return 0;
}
void set_video_size_video1(int x,int y,int w,int h,char *aspect)
{
#if (BCHP_CHIP == 7346) || (BCHP_CHIP == 7439)
    int i=0;
    NEXUS_DisplaySettings dsp;
    NEXUS_VideoWindowSettings windowSettings;
    NEXUS_CalculateVideoWindowPositionSettings pos[2];
    NEXUS_VideoFormat_GetInfo(bsp_p->displaySettings[0].format, &bsp_p->video_format_settings[0]);		/* Save Video format */
    NEXUS_VideoFormat_GetInfo(bsp_p->displaySettings[1].format, &bsp_p->video_format_settings[1]);		/* Save Video format */
    debug_av("[%s} x %d y %d w %d h %d \n",__func__,x,y,w,h);
    if (0 != strcmp(aspect, "3dmode"))
    {
        bsp_p->pip_ws.position.x = x;
        bsp_p->pip_ws.position.y = y;
        bsp_p->pip_ws.position.width = w;
        bsp_p->pip_ws.position.height = h;
    }
    if(h==0 && w==0)
    {
        /* (2014/02/10) sidabary-remux-pip-review */
        Update_Pip_Mode(false);

        for(i=0;i<2;i++)
        {
            NEXUS_VideoWindow_GetSettings(bsp_p->VideoPIPWindowHandle[i], &windowSettings);
            windowSettings.visible = false;
            windowSettings.preferSyncLock= true;
            nexus_ret= NEXUS_VideoWindow_SetSettings(bsp_p->VideoPIPWindowHandle[i], &windowSettings);
            BDBG_ASSERT(!nexus_ret);
        }
    }
    else
    {
        /* (2014/02/10) sidabary-remux-pip-review */
        Update_Pip_Mode(true);

        NEXUS_GetDefaultCalculateVideoWindowPositionSettings(&pos[SDFB]);
        pos[SDFB].viewport.x = x+xresoffset[SDFB]/4+FBSDX_OFFSET/4;
        pos[SDFB].viewport.y = y+yresoffset[SDFB]/2+FBSDY_OFFSET/2;
        pos[SDFB].viewport.width = w-xresoffset[SDFB]-FBSDWIDTH_OFFSET/4;
        pos[SDFB].viewport.height = h-yresoffset[SDFB]-FBSDHEIGHT_OFFSET/2;
        pos[SDFB].displayWidth  = bsp_p->video_format_settings[1].width;
        pos[SDFB].displayHeight = bsp_p->video_format_settings[1].height;
        NEXUS_VideoWindow_GetSettings(bsp_p->VideoPIPWindowHandle[1], &windowSettings);
	#if (BCHP_CHIP == 7346) || (BCHP_CHIP == 7439) 
        nexus_ret= NEXUS_CalculateVideoWindowPosition(&pos[SDFB],&windowSettings, &windowSettings);
	#else
        nexus_ret= NEXUS_CalculateVideoWindowPosition(&pos[SDFB], &windowSettings);
	#endif
        BDBG_ASSERT(!nexus_ret);
        windowSettings.visible = true;
        windowSettings.preferSyncLock= true;
        nexus_ret= NEXUS_VideoWindow_SetSettings(bsp_p->VideoPIPWindowHandle[1], &windowSettings);
        BDBG_ASSERT(!nexus_ret);
        /*HD Video Clip */

        NEXUS_DisplaySettings displaySettings;
        NEXUS_Display_GetSettings(bsp_p->display[i], &displaySettings);
        if (displaySettings.display3DSettings.orientation == NEXUS_VideoOrientation_e3D_LeftRight)
        {
            x = x / 2;
            w = w / 2;
        }
        else if (displaySettings.display3DSettings.orientation == NEXUS_VideoOrientation_e3D_OverUnder)
        {
            y = y / 2;
            h = h / 2;
        }

        NEXUS_GetDefaultCalculateVideoWindowPositionSettings(&pos[HDFB]);
        pos[HDFB].viewport.x=(bsp_p->video_format_settings[0].width*x)/(bsp_p->video_format_settings[1].width)+xresoffset[HDFB]/2+FBHDX_OFFSET;
        pos[HDFB].viewport.y=(bsp_p->video_format_settings[0].height*y)/(bsp_p->video_format_settings[1].height)+yresoffset[HDFB]/2+FBHDY_OFFSET ;
        pos[HDFB].viewport.width =(bsp_p->video_format_settings[0].width*w)/bsp_p->video_format_settings[1].width - xresoffset[HDFB]-FBHDWIDTH_OFFSET;
        pos[HDFB].viewport.height=(bsp_p->video_format_settings[0].height*h)/bsp_p->video_format_settings[1].height- yresoffset[HDFB]-FBHDHEIGHT_OFFSET;
        pos[HDFB].displayWidth = bsp_p->video_format_settings[0].width;
        pos[HDFB].displayHeight =bsp_p->video_format_settings[0].height;
        NEXUS_VideoWindow_GetSettings(bsp_p->VideoPIPWindowHandle[0], &windowSettings);
        windowSettings.visible = true;
        windowSettings.preferSyncLock= true;
#if (BCHP_CHIP == 7346) || (BCHP_CHIP == 7439) 
        nexus_ret= NEXUS_CalculateVideoWindowPosition(&pos[HDFB],&windowSettings, &windowSettings);
#else
        nexus_ret= NEXUS_CalculateVideoWindowPosition(&pos[HDFB], &windowSettings);
#endif
        BDBG_ASSERT(!nexus_ret);
        nexus_ret= NEXUS_VideoWindow_SetSettings(bsp_p->VideoPIPWindowHandle[0], &windowSettings);
        BDBG_ASSERT(!nexus_ret);
    }

    NEXUS_DisplayModule_SetAutomaticPictureQuality();
    NEXUS_DisplayModule_SetUpdateMode(NEXUS_DisplayUpdateMode_eAuto);
#endif
    debug_av("[%s] updated %s\n",__func__,aspect);

}
void set_video_zoomReset(void)
{
    int i=0;
    NEXUS_VideoWindowSettings windowSettings;
    NEXUS_CalculateVideoWindowPositionSettings pos[2];
    bool fullHdmode=false;
    if(vidresolution==eVR_1080P30 || vidresolution==eVR_1080P24)
        fullHdmode=true;
    for(i=0;i<2;i++)
    {
        NEXUS_VideoWindow_GetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);

        if(fullHdmode)
        {
            NEXUS_VideoWindow_GetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
            windowSettings.position.x = 0;
            windowSettings.position.y = FHD_VIDEOHOFFSET;
            windowSettings.position.width=bsp_p->video_format_settings[i].width;
            windowSettings.position.height=bsp_p->video_format_settings[i].height-FHD_VIDEOHSIZEOFFSET;
            windowSettings.visible = true;
            nexus_ret= NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
            BDBG_ASSERT(!nexus_ret);

        }
        else
        {
            NEXUS_VideoWindow_GetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
            windowSettings.position.x = 0;
            windowSettings.position.y = 0;
            windowSettings.position.width=bsp_p->video_format_settings[i].width;
            windowSettings.position.height=bsp_p->video_format_settings[i].height;
            windowSettings.visible = true;
            nexus_ret= NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
            BDBG_ASSERT(!nexus_ret);

        }
    }

    NEXUS_DisplayModule_SetAutomaticPictureQuality();
    NEXUS_DisplayModule_SetUpdateMode(NEXUS_DisplayUpdateMode_eAuto);

}
void set_video_zoom(int zoomin,int rate)
{
    int i=0;
    NEXUS_VideoWindowSettings windowSettings;
    NEXUS_CalculateVideoWindowPositionSettings pos[2];
    int zoomw,zoomh;
    int maxrate=0;
    bool fullHdmode=false;
    NEXUS_VideoFormat_GetInfo(bsp_p->displaySettings[0].format, &bsp_p->video_format_settings[0]);		/* Save Video format */
    NEXUS_VideoFormat_GetInfo(bsp_p->displaySettings[1].format, &bsp_p->video_format_settings[1]);		/* Save Video format */
    if(vidresolution==eVR_1080P30 || vidresolution==eVR_1080P24)
        fullHdmode=true;
    for(i=0;i<2;i++)
    {
        NEXUS_VideoWindow_GetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);

        if(zoomin==1)
        {
            debug_fb("Zoomin  %d \n",rate);
            NEXUS_VideoDecoderStatus vstatus;
            NEXUS_VideoDecoderHandle vidHandle = (NEXUS_VideoDecoderHandle)get_vidHandle(0);
            NEXUS_VideoDecoder_GetStatus_Avd(vidHandle, &vstatus);
            if(vstatus.display.width<=720 && vidresolution >= eVR_720P)
            {
                set_video_zoomReset();
                return;
            }
            if(rate>3) rate=3;
            zoomw= bsp_p->video_format_settings[i].width/10 * rate;
            zoomh= bsp_p->video_format_settings[i].height/10 * rate;
            NEXUS_GetDefaultCalculateVideoWindowPositionSettings(&pos[i]);
            pos[i].viewport.x =0;
            pos[i].viewport.y = 0;
            pos[i].viewport.width =bsp_p->video_format_settings[i].width + zoomw;
            pos[i].viewport.height=(bsp_p->video_format_settings[i].height) + zoomh;
            pos[i].displayWidth  = bsp_p->video_format_settings[i].width;
            pos[i].displayHeight = bsp_p->video_format_settings[i].height;
            NEXUS_VideoWindow_GetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7362 || BCHP_CHIP == 73625 || BCHP_CHIP == 7439) 
            nexus_ret= NEXUS_CalculateVideoWindowPosition(&pos[i],&windowSettings, &windowSettings);
#else
            nexus_ret= NEXUS_CalculateVideoWindowPosition(&pos[i], &windowSettings);
#endif
            BDBG_ASSERT(!nexus_ret);
            windowSettings.clipBase.x = zoomw/2;
            windowSettings.clipBase.y = zoomh/2;
            windowSettings.clipBase.width =pos[i].displayWidth;
            windowSettings.clipBase.height=pos[i].displayHeight;
            windowSettings.contentMode=NEXUS_VideoWindowContentMode_eZoom;
            nexus_ret= NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
            BDBG_ASSERT(!nexus_ret);
        }
        else if(zoomin==2)
        {
            debug_fb("Zoomout  %d \n",rate);
            zoomw= bsp_p->video_format_settings[i].width/10 * rate;
            zoomh= bsp_p->video_format_settings[i].height/10 * rate;
            NEXUS_GetDefaultCalculateVideoWindowPositionSettings(&pos[i]);
            pos[i].viewport.x = zoomw/2;
            pos[i].viewport.y = zoomh/2;
            pos[i].viewport.width =bsp_p->video_format_settings[i].width - zoomw;
            pos[i].viewport.height=(bsp_p->video_format_settings[i].height) - zoomh;
            pos[i].displayWidth  = bsp_p->video_format_settings[i].width;
            pos[i].displayHeight = bsp_p->video_format_settings[i].height;
            NEXUS_VideoWindow_GetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7362 || BCHP_CHIP == 73625 || BCHP_CHIP == 7439)
            nexus_ret= NEXUS_CalculateVideoWindowPosition(&pos[i],&windowSettings, &windowSettings);
#else
            nexus_ret= NEXUS_CalculateVideoWindowPosition(&pos[i], &windowSettings);
#endif
            BDBG_ASSERT(!nexus_ret);
            windowSettings.clipBase.x = 0;
            windowSettings.clipBase.y = 0;
            windowSettings.clipBase.width =pos[i].displayWidth;
            windowSettings.clipBase.height=pos[i].displayHeight;
            nexus_ret= NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
            BDBG_ASSERT(!nexus_ret);
        }
        else
        {
            if(fullHdmode)
            {
                NEXUS_VideoWindow_GetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
                windowSettings.position.x = 0;
                windowSettings.position.y = FHD_VIDEOHOFFSET;
                windowSettings.position.width=bsp_p->video_format_settings[i].width;
                windowSettings.position.height=bsp_p->video_format_settings[i].height-FHD_VIDEOHSIZEOFFSET;
                windowSettings.visible = true;
                nexus_ret= NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
                BDBG_ASSERT(!nexus_ret);

            }
            else
            {
                NEXUS_VideoWindow_GetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
                windowSettings.position.x = 0;
                windowSettings.position.y = 0;
                windowSettings.position.width=bsp_p->video_format_settings[i].width;
                windowSettings.position.height=bsp_p->video_format_settings[i].height;
                windowSettings.visible = true;
                nexus_ret= NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
                BDBG_ASSERT(!nexus_ret);

            }
        }
    }

    NEXUS_DisplayModule_SetAutomaticPictureQuality();
    NEXUS_DisplayModule_SetUpdateMode(NEXUS_DisplayUpdateMode_eAuto);

}
void reset_FHDVideo(void)
{
    static bool reset_Video=false;
    if(reset_Video==false)
    {
        if(vidresolution==eVR_1080P30 || vidresolution==eVR_1080P24)
        {
            set_video_zoom(2,6);
            set_video_zoom(0,1);
        }
        reset_Video=true;
    }
}


void set_video_size_video0(int x,int y,int w,int h,char *aspect)
{
    int i=0;
    bool fullHdmode=false;
    NEXUS_VideoWindowSettings windowSettings;
    NEXUS_CalculateVideoWindowPositionSettings pos[2];
    if(!strncmp(aspect,"16:9",sizeof("16:9")) || !strncmp(aspect,"16:10",sizeof("16:10")))
        NexusAspect= NEXUS_DisplayAspectRatio_e16x9;
    else if(!strncmp(aspect,"4:3",sizeof("4:3")))
        NexusAspect= NEXUS_DisplayAspectRatio_e4x3;
    else
        NexusAspect= NEXUS_DisplayAspectRatio_eAuto;
    if(vidresolution==eVR_1080P30 || vidresolution==eVR_1080P24)
        fullHdmode=true;
    if(h==0 && w==0)
    {
        for(i=0;i<2;i++)
        {
            NEXUS_VideoFormat_GetInfo(bsp_p->displaySettings[i].format, &bsp_p->video_format_settings[i]);		/* Save Video format */
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7439) 	/* iqon-uhd-3dupdate-wslee */
            NEXUS_DisplaySettings displaySettings;
            NEXUS_Display_GetSettings(bsp_p->display[i], &displaySettings);
            if (displaySettings.display3DSettings.orientation == NEXUS_VideoOrientation_e3D_LeftRight)
            {
                NEXUS_VideoWindow_GetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
                windowSettings.position.x = x;
                windowSettings.position.y = y;
                windowSettings.position.width = bsp_p->video_format_settings[i].width / 2;
                windowSettings.position.height = bsp_p->video_format_settings[i].height;
                windowSettings.visible = true;
                nexus_ret= NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
                BDBG_ASSERT(!nexus_ret);
            }
            else if (displaySettings.display3DSettings.orientation == NEXUS_VideoOrientation_e3D_OverUnder)
            {
                NEXUS_VideoWindow_GetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
                windowSettings.position.x = x;
                windowSettings.position.y = y;
                windowSettings.position.width = bsp_p->video_format_settings[i].width;
                windowSettings.position.height = bsp_p->video_format_settings[i].height / 2;
                windowSettings.visible = true;
                nexus_ret= NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
                BDBG_ASSERT(!nexus_ret);
            }
            else 
#endif
                if(fullHdmode)
                {
                    NEXUS_VideoWindow_GetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
                    windowSettings.position.x = x;
                    windowSettings.position.y = y+FHD_VIDEOHOFFSET;
                    windowSettings.position.width=bsp_p->video_format_settings[i].width;
                    windowSettings.position.height=bsp_p->video_format_settings[i].height-FHD_VIDEOHSIZEOFFSET;
                    windowSettings.visible = true;
                    nexus_ret= NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
                    BDBG_ASSERT(!nexus_ret);

                }
                else
                {
                    NEXUS_VideoWindow_GetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
                    windowSettings.position.x = x;
                    windowSettings.position.y = y;
                    windowSettings.position.width=bsp_p->video_format_settings[i].width;
                    windowSettings.position.height=bsp_p->video_format_settings[i].height;
                    windowSettings.visible = true;
                    nexus_ret= NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
                    BDBG_ASSERT(!nexus_ret);

                }
        }

    }
    else
    {
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7439) 	/* iqon-uhd-3dupdate-wslee */
        NEXUS_DisplaySettings displaySettings;
        NEXUS_Display_GetSettings(bsp_p->display[i], &displaySettings);
        if (displaySettings.display3DSettings.orientation == NEXUS_VideoOrientation_e3D_LeftRight)
        {
            x = x / 2;
            w = w / 2;
        }
        else if (displaySettings.display3DSettings.orientation == NEXUS_VideoOrientation_e3D_OverUnder)
        {
            y = y / 2;
            h = h / 2;
        }
#endif
        NEXUS_GetDefaultCalculateVideoWindowPositionSettings(&pos[SDFB]);
        pos[SDFB].viewport.x = x+xresoffset[SDFB]/4+FBSDX_OFFSET/4;
        pos[SDFB].viewport.y = y+yresoffset[SDFB]/2+FBSDY_OFFSET/2;
        pos[SDFB].viewport.width = w-xresoffset[SDFB]-FBSDWIDTH_OFFSET/4;
        pos[SDFB].viewport.height = h-yresoffset[SDFB]-FBSDHEIGHT_OFFSET/2;
        pos[SDFB].displayWidth  = bsp_p->video_format_settings[1].width;
        pos[SDFB].displayHeight = bsp_p->video_format_settings[1].height;
        NEXUS_VideoWindow_GetSettings(bsp_p->VideoWindowHandle[1], &windowSettings);
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7362 || BCHP_CHIP == 73625 || BCHP_CHIP == 7439)
        nexus_ret= NEXUS_CalculateVideoWindowPosition(&pos[SDFB],&windowSettings, &windowSettings);
#else
        nexus_ret= NEXUS_CalculateVideoWindowPosition(&pos[SDFB], &windowSettings);
#endif
        BDBG_ASSERT(!nexus_ret);
        if(fullHdmode)
            windowSettings.position.height-=FHD_VIDEOHSIZEOFFSET;
        nexus_ret= NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[1], &windowSettings);
        BDBG_ASSERT(!nexus_ret);
        /*HD Video Clip */
        NEXUS_GetDefaultCalculateVideoWindowPositionSettings(&pos[HDFB]);
        pos[HDFB].viewport.x=(bsp_p->video_format_settings[0].width*x)/(bsp_p->video_format_settings[1].width)+xresoffset[HDFB]/2+FBHDX_OFFSET;
        pos[HDFB].viewport.y=(bsp_p->video_format_settings[0].height*y)/(bsp_p->video_format_settings[1].height)+yresoffset[HDFB]/2+FBHDY_OFFSET ;
        pos[HDFB].viewport.width =(bsp_p->video_format_settings[0].width*w)/bsp_p->video_format_settings[1].width - xresoffset[HDFB]-FBHDWIDTH_OFFSET;
        pos[HDFB].viewport.height=(bsp_p->video_format_settings[0].height*h)/bsp_p->video_format_settings[1].height- yresoffset[HDFB]-FBHDHEIGHT_OFFSET;
        pos[HDFB].displayWidth = bsp_p->video_format_settings[0].width;
        pos[HDFB].displayHeight =bsp_p->video_format_settings[0].height;
        NEXUS_VideoWindow_GetSettings(bsp_p->VideoWindowHandle[0], &windowSettings);
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7362 || BCHP_CHIP == 73625 || BCHP_CHIP == 7439)
        nexus_ret= NEXUS_CalculateVideoWindowPosition(&pos[HDFB],&windowSettings, &windowSettings);
#else
        nexus_ret= NEXUS_CalculateVideoWindowPosition(&pos[HDFB], &windowSettings);
#endif
        BDBG_ASSERT(!nexus_ret);
        if(fullHdmode)
            windowSettings.position.height-=FHD_VIDEOHSIZEOFFSET;
        nexus_ret= NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[0], &windowSettings);
        BDBG_ASSERT(!nexus_ret);
    }

    NEXUS_DisplayModule_SetAutomaticPictureQuality();
    NEXUS_DisplayModule_SetUpdateMode(NEXUS_DisplayUpdateMode_eAuto);

    /* wslee_openpli_fullhd_issue_20160405 */
    if(GetBlitMode() == 0 || change_resolution_by_autoblit) /* blit mode or resolution change */
    {
        change_resolution_by_autoblit = 0;
        canvas_w_h_resolution_reset();
    }
    debug_av("[%s] updated %s\n",__func__,aspect);
}

#if 1 // mkseo_standby_hdout_debug
void VideoVisibleOff()
{
    int i;
    NEXUS_VideoWindowSettings windowSettings;

    for(i=0;i<2;i++)
    {
        NEXUS_VideoWindow_GetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
        windowSettings.visible = false;
        NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
    }
}

void VideoVisibleOn()
{
    int i;
    NEXUS_VideoWindowSettings windowSettings;

    for(i=0;i<2;i++)
    {
        NEXUS_VideoWindow_GetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
        windowSettings.visible = true;
        NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
    }
}

void HD_VideoClip()
{
    NEXUS_CalculateVideoWindowPositionSettings pos[2];
    NEXUS_VideoWindowSettings windowSettings;
    int i, x, y, w, h;
    bool fullHdmode=false;

    if(vidresolution==eVR_1080P30 || vidresolution==eVR_1080P24)
        fullHdmode=true;

    x=38; y=81; w=252; h=209;

    /*HD Video Clip */
    NEXUS_VideoFormat_GetInfo(bsp_p->displaySettings[0].format, &bsp_p->video_format_settings[0]);		/* Save Video format */
    NEXUS_VideoFormat_GetInfo(bsp_p->displaySettings[1].format, &bsp_p->video_format_settings[1]);		/* Save Video format */
    NEXUS_GetDefaultCalculateVideoWindowPositionSettings(&pos[HDFB]);
    pos[HDFB].viewport.x=(bsp_p->video_format_settings[0].width*x)/(bsp_p->video_format_settings[1].width)+xresoffset[HDFB]/2+FBHDX_OFFSET;
    pos[HDFB].viewport.y=(bsp_p->video_format_settings[0].height*y)/(bsp_p->video_format_settings[1].height)+yresoffset[HDFB]/2+FBHDY_OFFSET ;
    pos[HDFB].viewport.width =(bsp_p->video_format_settings[0].width*w)/bsp_p->video_format_settings[1].width - xresoffset[HDFB]-FBHDWIDTH_OFFSET;
    pos[HDFB].viewport.height=(bsp_p->video_format_settings[0].height*h)/bsp_p->video_format_settings[1].height- yresoffset[HDFB]-FBHDHEIGHT_OFFSET;
    pos[HDFB].displayWidth = bsp_p->video_format_settings[0].width;
    pos[HDFB].displayHeight =bsp_p->video_format_settings[0].height;
    NEXUS_VideoWindow_GetSettings(bsp_p->VideoWindowHandle[0], &windowSettings);
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7362 || BCHP_CHIP == 73625 || BCHP_CHIP == 7439)
    nexus_ret= NEXUS_CalculateVideoWindowPosition(&pos[HDFB],&windowSettings, &windowSettings);
#else
    nexus_ret= NEXUS_CalculateVideoWindowPosition(&pos[HDFB], &windowSettings);
#endif
    BDBG_ASSERT(!nexus_ret);
    if(fullHdmode)
        windowSettings.position.height-=FHD_VIDEOHSIZEOFFSET;
    nexus_ret= NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[0], &windowSettings);
    BDBG_ASSERT(!nexus_ret);

    x=0; y=0; w=0; h=0;
    if(h==0 && w==0)
    {
        for(i=0;i<2;i++)
        {
        	/* video window size problem when play video first time on 3d mode, still remains flickering problem */
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7439) 	/* iqon-uhd-3dupdate-wslee */
            NEXUS_DisplaySettings displaySettings;
            NEXUS_Display_GetSettings(bsp_p->display[i], &displaySettings);
            if (displaySettings.display3DSettings.orientation == NEXUS_VideoOrientation_e3D_LeftRight)
            {
                NEXUS_VideoWindow_GetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
                windowSettings.position.x = x;
                windowSettings.position.y = y;
                windowSettings.position.width = bsp_p->video_format_settings[i].width / 2;
                windowSettings.position.height = bsp_p->video_format_settings[i].height;
                windowSettings.visible = true;
                nexus_ret= NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
                BDBG_ASSERT(!nexus_ret);
            }
            else if (displaySettings.display3DSettings.orientation == NEXUS_VideoOrientation_e3D_OverUnder)
            {
                NEXUS_VideoWindow_GetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
                windowSettings.position.x = x;
                windowSettings.position.y = y;
                windowSettings.position.width = bsp_p->video_format_settings[i].width;
                windowSettings.position.height = bsp_p->video_format_settings[i].height / 2;
                windowSettings.visible = true;
                nexus_ret= NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
                BDBG_ASSERT(!nexus_ret);
            }
            else 
#endif
                if(fullHdmode)
                {
                    NEXUS_VideoWindow_GetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
                    windowSettings.position.x = x;
                    windowSettings.position.y = y+FHD_VIDEOHOFFSET;
                    windowSettings.position.width=bsp_p->video_format_settings[i].width;
                    windowSettings.position.height=bsp_p->video_format_settings[i].height-FHD_VIDEOHSIZEOFFSET;
                    windowSettings.visible = true;
                    nexus_ret= NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
                    BDBG_ASSERT(!nexus_ret);

                }
                else
                {
                    NEXUS_VideoWindow_GetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
                    windowSettings.position.x = x;
                    windowSettings.position.y = y;
                    windowSettings.position.width=bsp_p->video_format_settings[i].width;
                    windowSettings.position.height=bsp_p->video_format_settings[i].height;
                    windowSettings.visible = true;
                    nexus_ret= NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[i], &windowSettings);
                    BDBG_ASSERT(!nexus_ret);
                }
        }
    }
    NEXUS_DisplayModule_SetAutomaticPictureQuality();
    NEXUS_DisplayModule_SetUpdateMode(NEXUS_DisplayUpdateMode_eAuto);
    printk("- HD_VideoClip out -\n");
}

/* 2014/05/26, sidabary-epg-video, called when video is released only when 7335 model(vix image) */
#if (BCHP_CHIP != 7346 && BCHP_CHIP != 7362 && BCHP_CHIP != 73625 && BCHP_CHIP != 7439)
void HD_VideoClip2(void)
{
    int                                         i,x,y,w,h;     
    NEXUS_Error                                 errcode;
    NEXUS_CalculateVideoWindowPositionSettings  pos;
    NEXUS_VideoWindowSettings                   windowSettings;
    NEXUS_VideoWindowSettings                   windowSettings_backup[2];
    NEXUS_Rect                                  clipbackup;
    
    /* get current video window settings */
    for(i = 0 ; i < 2 ; i++)
    {
        NEXUS_VideoWindow_GetSettings(bsp_p->VideoWindowHandle[i], &windowSettings_backup[i]);
    }        

    /* change video settings temporarily, xywh has no special meaning */
    x = 16;
    y = 16;
    w = 256;
    h = 256;
    NEXUS_VideoFormat_GetInfo(bsp_p->displaySettings[0].format, &bsp_p->video_format_settings[0]);		/* Save Video format */
    NEXUS_VideoFormat_GetInfo(bsp_p->displaySettings[1].format, &bsp_p->video_format_settings[1]);		/* Save Video format */
    NEXUS_GetDefaultCalculateVideoWindowPositionSettings(&pos);
    
    pos.viewport.x      = (bsp_p->video_format_settings[0].width * x)  / (bsp_p->video_format_settings[1].width) + xresoffset[HDFB]/2+FBHDX_OFFSET;
    pos.viewport.y      = (bsp_p->video_format_settings[0].height * y) / (bsp_p->video_format_settings[1].height) + yresoffset[HDFB]/2+FBHDY_OFFSET ;
    pos.viewport.width  = (bsp_p->video_format_settings[0].width * w)  / bsp_p->video_format_settings[1].width - xresoffset[HDFB]-FBHDWIDTH_OFFSET;
    pos.viewport.height = (bsp_p->video_format_settings[0].height * h) / bsp_p->video_format_settings[1].height- yresoffset[HDFB]-FBHDHEIGHT_OFFSET;
    pos.displayWidth    = bsp_p->video_format_settings[0].width;
    pos.displayHeight   = bsp_p->video_format_settings[0].height;
    
    NEXUS_VideoWindow_GetSettings(bsp_p->VideoWindowHandle[0], &windowSettings);
    NEXUS_CalculateVideoWindowPosition(&pos, &windowSettings);
    windowSettings.visible = false;
    errcode = NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[0], &windowSettings);
    if(errcode != NEXUS_SUCCESS)
    {
        printk("hdclip2 temporary set error.\n");
    }

    /* recover to previous video window settings */
    for(i = 0 ; i < 2 ; i++)
    {
        clipbackup = windowSettings_backup[i].clipRect;
        
    
        windowSettings_backup[i].visible = true;
        errcode = NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[i], &windowSettings_backup[i]);
        if(errcode != NEXUS_SUCCESS)
        {
            printk("hdclip2 v-window(%d) recovery error.\n",i);
        }
    }
    
    NEXUS_DisplayModule_SetAutomaticPictureQuality();
    NEXUS_DisplayModule_SetUpdateMode(NEXUS_DisplayUpdateMode_eAuto);
}
#endif

#endif

void set_resolution(char * vid_res,char *aspect)
{
    VIDEO_RESOLUTION_L resolution;
    
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7362 || BCHP_CHIP == 73625)    /* (at_7362_initial_work) */
    resolution=eVR_720P;
#elif (BCHP_CHIP == 7439)
	resolution = eVR_720P;
#else
    resolution=eVR_1080I;
#endif
    if(!strncmp(vid_res,"pal",sizeof("pal")-1))
    {
        resolution=eVR_PAL;
    }
    else if(!strncmp(vid_res,"ntsc",sizeof("ntsc")-1))
    {
        resolution=eVR_NTSC;
    }
    else if(!strncmp(vid_res,"480i",sizeof("480i")-1))
    {
        resolution=eVR_480I;
    }
    else if(!strncmp(vid_res,"576i",sizeof("576i")-1))
    {
        resolution=eVR_576I;
    }
    else if(!strncmp(vid_res,"480p",sizeof("480p")-1))
    {
        resolution=eVR_480P;
    }
    else if(!strncmp(vid_res,"1080i50",sizeof("1080i50")-1))
    {
        resolution=eVR_1080I50;
    }
    else if(!strncmp(vid_res,"1080i60",sizeof("1080i60")-1))
    {
        resolution=eVR_1080I50;
    }
    else if(!strncmp(vid_res,"1080i",sizeof("1080i")-1))
    {
        resolution=eVR_1080I;
    }
    else if(!strncmp(vid_res,"1080p24",sizeof("1080p24")-1))
    {
        resolution=eVR_1080P24;
    }
    else if(!strncmp(vid_res,"1080p25",sizeof("1080p25")-1))
    {
        resolution=eVR_1080P25;
    }
    else if(!strncmp(vid_res,"1080p30",sizeof("1080p30")-1))
    {
        resolution=eVR_1080P30;
    }
    else if(!strncmp(vid_res,"1080p50",sizeof("1080p50")-1))
    {
        resolution=eVR_1080P50;
    }
    else if(!strncmp(vid_res,"1080p60",sizeof("1080p60")-1))
    {
        resolution=eVR_1080P60;
    }
    else if(!strncmp(vid_res,"1080p",sizeof("1080p")-1))
    {
        resolution=eVR_1080P;
    }
    else if(!strncmp(vid_res,"1250i50",sizeof("1250i50")-1))
    {
        resolution=eVR_1250I50;
    }
    else if(!strncmp(vid_res,"720p24",sizeof("720p24")-1))
    {
        resolution=eVR_720P24;
    }
    else if(!strncmp(vid_res,"720p50",sizeof("720p50")-1))
    {
        resolution=eVR_720P50;
    }
    else if(!strncmp(vid_res,"720p",sizeof("720p")-1))
    {
        resolution=eVR_720P;
    }
    else if(!strncmp(vid_res,"576p",sizeof("576p")-1))
    {
        resolution=eVR_576P;
    }
    else if(!strncmp(vid_res,"1440x240",sizeof("1440x240")-1))
    {
        resolution=eVR_1440X240;
    }
    else if(!strncmp(vid_res,"1440x288_50",sizeof("1440x288_50")-1))
    {
        resolution=eVR_1440X288_50;
    }
    else if(!strncmp(vid_res,"1366x768",sizeof("1366x768")-1))
    {
        resolution=eVR_1366X768;
    }
    else if(!strncmp(vid_res,"1366x768_50",sizeof("1366x768_50")-1))
    {
        resolution=eVR_1366X768_50;
    }
    else if(!strncmp(vid_res,"640x480",sizeof("640x480")-1))
    {
        resolution=eVR_640X480;
    }
    else if(!strncmp(vid_res,"800x600",sizeof("800x600")-1))
    {
        resolution=eVR_800X600;
    }
    else if(!strncmp(vid_res,"1024x768",sizeof("1024x768")-1))
    {
        resolution=eVR_1024X768;
    }
    else if(!strncmp(vid_res,"1280x768",sizeof("1280x768")-1))
    {
        resolution=eVR_1280X768;
    }
    else if(!strncmp(vid_res,"1280x720_50",sizeof("1280x720_50")-1))
    {
        resolution=eVR_1280X720_50;
    }
    else if(!strncmp(vid_res,"1280x720",sizeof("1280x720")-1))
    {
        resolution=eVR_1280X720;
    }
    else if(!strncmp(vid_res,"1280x720_reducedblank",sizeof("1280x720_reducedblank")-1))
    {
        resolution=eVR_1280X720_REDUCEDBLANK;
    }
#if (BCHP_CHIP == 7439)			/* iqon-uhd-resolution-wslee */ 
    else if(!strncmp(vid_res,"2160p24",sizeof("2160p24")-1))
    {
        resolution=eVR_3840X2160_24;
    }
    else if(!strncmp(vid_res,"2160p25",sizeof("2160p25")-1))
    {
        resolution=eVR_3840X2160_25;
    }
    else if(!strncmp(vid_res,"2160p30",sizeof("2160p30")-1))
    {
        resolution=eVR_3840X2160_30;
    }
    else if(!strncmp(vid_res,"2160p50",sizeof("2160p50")-1))
    {
        resolution=eVR_3840X2160_50;
    }
    else if(!strncmp(vid_res,"2160p",sizeof("2160p")-1))
    {
        resolution=eVR_3840X2160_60;
    }
#endif
    else
    {
        return;
    }

    wakeup_resolution=resolution;
    display_resolution_Set(resolution,videoFmt);

}
void set_aspect(char * vid_aspect)
{
#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7439) 	/* iqon-uhd-3dupdate-wslee */
    /* to be full screen on 3d mode */
    if (bsp_p->displaySettings[0].display3DSettings.orientation)
        return;
#endif
    if(tux_blit) return;

    bool fullHdmode=false;
    if(vidresolution==eVR_1080P30 || vidresolution==eVR_1080P24)
        fullHdmode=true;
    NEXUS_VideoWindowContentMode contentMode=NEXUS_VideoWindowContentMode_eFull; 
    memset(g_vidaspect, 0, sizeof (g_vidaspect));
    BKNI_Memcpy(g_vidaspect, vid_aspect, sizeof(vid_aspect));
    if(!strncmp(vid_aspect,"bestfit",sizeof("bestfit")))
    {
        contentMode=NEXUS_VideoWindowContentMode_eFull;
        debug_av("[%s][%d] <<%s>>n",__func__,__LINE__,vid_aspect);

    }
    else if(!strncmp(vid_aspect,"letterbox",sizeof("letterbox")))
    {
        contentMode=NEXUS_VideoWindowContentMode_eBox;
        debug_av("[%s][%d] <<%s>>n",__func__,__LINE__,vid_aspect);
    }
    else if(!strncmp(vid_aspect,"panscan",sizeof("panscan")))
    {
        if(fullHdmode)
            contentMode=NEXUS_VideoWindowContentMode_eFull;
        else
            contentMode=NEXUS_VideoWindowContentMode_ePanScan;
        debug_av("[%s][%d] <<%s>>n",__func__,__LINE__,vid_aspect);
    }
    else if(!strncmp(vid_aspect,"nonlinear",sizeof("nonlinear")))
    {
        contentMode=NEXUS_VideoWindowContentMode_eFull;
        debug_av("[%s][%d] <<%s>>n",__func__,__LINE__,vid_aspect);
    }
    else
        return;

    NEXUS_VideoWindow_GetSettings(bsp_p->VideoWindowHandle[0], &bsp_p->ws[0]);
    bsp_p->ws[0].contentMode=contentMode;
    NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[0], &bsp_p->ws[0]);

    NEXUS_VideoWindow_GetSettings(bsp_p->VideoWindowHandle[1], &bsp_p->ws[1]);
    bsp_p->ws[1].contentMode=contentMode;
    NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[1], &bsp_p->ws[1]);
    NEXUS_DisplayModule_SetAutomaticPictureQuality();
    NEXUS_DisplayModule_SetUpdateMode(NEXUS_DisplayUpdateMode_eAuto);

}
#if 1 // mkseo_tux_commander
bool blitAuto_function(bool force)
{
    return 0;
    
#if (BCHP_CHIP == 7335) /* FIXME for 7356*/
    if(tux_blit && tux_y==0)
    {
        /* atv_fullhd_hbbtv2.0_issue_20160414 */
        if(tux_width >=1280) /* HBBTV RCU Action no need  */
            return 1;
        if( BKNI_Memcmp(bsp_p->canvas[1].memory.buffer, bsp_p->frame_buffer[0].memory.buffer, 2048) != 0 || force)
        {
            BKNI_Sleep(200);
            debug_fb("[%s] \n",__func__);
            blit_osd(tux_x, tux_y, tux_width, tux_height);
        }
        return 1;
    }
#endif
    return 0;
}
bool blitAuto_txtfunction(bool force)
{
    int i=0;
    /* atv_fullhd_hbbtv2.0_issue_20160414 */
    if(tux_width >=1280) /* HBBTV RCU Action no need */
        return 1;
#if (BCHP_CHIP == 7335) /* FIXME for 7356*/
    if( BKNI_Memcmp(bsp_p->frame_buffer[1].memory.buffer, bsp_p->frame_buffer[0].memory.buffer, 2048) != 0 || force)
#endif
        blit_tuxosd(tux_x, tux_y, tux_width, tux_height);
    return 0;
}
bool GetBrowserMode(void)
{
    /* atv_fullhd_hbbtv2.0_issue_20160414, 7335_initial_issue_fix_20060426 */
    if(tux_blit && tux_width >=1280) /* HBBTV RCU Action no need */
        return	true;
    return	false;
}

bool GetBlitMode(void)
{
    return	tux_blit;
}
#endif

/* songingeun, for drawing progress */
#ifdef FONT_12X22
#include "font_sun12x22.h"
#else
#include "font_sun8x16.h"
#endif

#define SPACE       1
#define BAR_STEP	20

int x_bytes_per_font(int xpixels)
{
    return ((xpixels%0x8) ? (xpixels/0x8 + 1) : xpixels/0x8);
}

int y_bytes_per_font(int ypixels)
{
    return ypixels;
}

int bytes_per_font(int xpixels, int ypixels)
{
    return y_bytes_per_font(ypixels) * x_bytes_per_font(xpixels);
}

void draw_progress(int percent)
{
    /* get the progress bar string */
    unsigned char str[BAR_STEP+5];
    int i;
    sprintf(&str[BAR_STEP], "%d%", percent);
    for(i = 0; i<BAR_STEP; i++)
    {
        if(i < (percent/(100/BAR_STEP)))
            str[i] = 219;
        else
            str[i] = ' ';
    }

    unsigned char *dst;
    unsigned char *font;

    /* wslee_openpli_fullhd_issue_20160405 */
    int  mode = get_frame_buffer_mode(gphStbFB_info.pfb_info[0]->var.xres);

    int scale = 2;//mode == SDFB ? 1 : 2;
	
    /* framebuffer_update_wslee_20160421_ */
    #if 1
    if(percent >= 100) return;
    #else
    static int progress_percent = 0;
    if(progress_percent == percent || percent >= 100) return;
    progress_percent = percent;
    #endif
    int xpos = gphStbFB_info.pfb_info[0]->var.xres/2 - scale*X_PIXELS_PER_FONT*((BAR_STEP+4)/2) - SPACE*((BAR_STEP+4)/2);
    /* atv_fullhd_hbbtv2.0_issue_20160414 */
    #if 1
    int ypos = gphStbFB_info.pfb_info[0]->var.yres/2 + gphStbFB_info.pfb_info[0]->var.yres/4 + gphStbFB_info.pfb_info[0]->var.yres/8; 
    #else
    int ypos = gphStbFB_info.pfb_info[0]->var.yres/2 + gphStbFB_info.pfb_info[0]->var.yres/8 + gphStbFB_info.pfb_info[0]->var.yres/16; 
    #endif
    int next_xpos = xpos;
    int next_ypos = ypos;

    int font_idx = 0, x = 0, y = 0;


    dst = bsp_p->canvas[mode].memory.buffer + (((gphStbFB_info.pfb_info[0]->var.xres * next_ypos) + next_xpos) * (gphStbFB_info.pfb_info[0]->var.bits_per_pixel/8));

    while(font_idx < strlen(str))
    {
#ifdef FONT_12X22
        font = (unsigned char *)&fontdata_sun12x22[bytes_per_font(X_PIXELS_PER_FONT, Y_PIXELS_PER_FONT)*str[font_idx]];
#else
        font = (unsigned char *)&fontdata_sun8x16[bytes_per_font(X_PIXELS_PER_FONT, Y_PIXELS_PER_FONT)*str[font_idx]];
#endif

        /**************************************************/

#ifdef FONT_12X22
        unsigned char font_buf[4*44];
#else
        unsigned char font_buf[2*32];
#endif
        unsigned char *scaled_font = font_buf;
        int idx=0;
        if(scale == 2)
        {
#ifdef FONT_12X22
            for(y = 0; y < 22; y++)
            {
                for(x = 0; x < scale; x++)
                {
                    idx = y*2;
                    *scaled_font = (
                            ((font[idx] & 0x80) >> 0) | ((font[idx] & 0x80) >> 1) |
                            ((font[idx] & 0x40) >> 1) | ((font[idx] & 0x40) >> 2) |
                            ((font[idx] & 0x20) >> 2) | ((font[idx] & 0x20) >> 3) |
                            ((font[idx] & 0x10) >> 3) | ((font[idx] & 0x10) >> 4)); 
                    *(scaled_font+1) = (
                            ((font[idx] & 0x08) << 4) | ((font[idx] & 0x08) << 3) | 
                            ((font[idx] & 0x04) << 3) | ((font[idx] & 0x04) << 2) |
                            ((font[idx] & 0x02) << 2) | ((font[idx] & 0x02) << 1) |
                            ((font[idx] & 0x01) << 1) | ((font[idx] & 0x01) << 0)); 
                    idx++;
                    *(scaled_font+2) = (
                            ((font[idx] & 0x80) >> 0) | ((font[idx] & 0x80) >> 1) |
                            ((font[idx] & 0x40) >> 1) | ((font[idx] & 0x40) >> 2) |
                            ((font[idx] & 0x20) >> 2) | ((font[idx] & 0x20) >> 3) |
                            ((font[idx] & 0x10) >> 3) | ((font[idx] & 0x10) >> 4)); 
                    *(scaled_font+3) = (
                            ((font[idx] & 0x08) << 4) | ((font[idx] & 0x08) << 3) | 
                            ((font[idx] & 0x04) << 3) | ((font[idx] & 0x04) << 2) |
                            ((font[idx] & 0x02) << 2) | ((font[idx] & 0x02) << 1) |
                            ((font[idx] & 0x01) << 1) | ((font[idx] & 0x01) << 0)); 
                    scaled_font += 4;
                }
            }
#else
            for(y = 0; y < 16; y++)
            {
                for(x = 0; x < scale; x++)
                {
                    *scaled_font = (
                            ((font[y] & 0x80) >> 0) | ((font[y] & 0x80) >> 1) |
                            ((font[y] & 0x40) >> 1) | ((font[y] & 0x40) >> 2) |
                            ((font[y] & 0x20) >> 2) | ((font[y] & 0x20) >> 3) |
                            ((font[y] & 0x10) >> 3) | ((font[y] & 0x10) >> 4)); 
                    *(scaled_font+1) = (
                            ((font[y] & 0x08) << 4) | ((font[y] & 0x08) << 3) | 
                            ((font[y] & 0x04) << 3) | ((font[y] & 0x04) << 2) |
                            ((font[y] & 0x02) << 2) | ((font[y] & 0x02) << 1) |
                            ((font[y] & 0x01) << 1) | ((font[y] & 0x01) << 0)); 
                    scaled_font += 2;
                }
            }
#endif

            font = font_buf;
        }

        /**************************************************/

        for(y = 0; y < scale*scale*bytes_per_font(X_PIXELS_PER_FONT, Y_PIXELS_PER_FONT); y++)
        {
            next_ypos = ypos + (y / (scale*x_bytes_per_font(X_PIXELS_PER_FONT)));

            if((y % (scale*x_bytes_per_font(X_PIXELS_PER_FONT))) == 0)
                dst = bsp_p->canvas[mode].memory.buffer + (((gphStbFB_info.pfb_info[0]->var.xres * next_ypos) + next_xpos) * (gphStbFB_info.pfb_info[0]->var.bits_per_pixel/8));

            // FIXME, assumming 4 bytes per pixel
            for(x = 0; x < 8; x++)
            {
                if((font[y] >> (0x7 - x)) & 0x1)
                {
                    *(dst + 3)  = 0xff; 
                    *(dst + 2)  = 251;
                    *(dst + 1)  = 193;
                    *(dst)      = 8;
                }
                else
                {
                    *(dst + 3)  = 0xaf;
                    *(dst + 2)  = 0;
                    *(dst + 1)  = 0;
                    *(dst)      = 0;
                }

                dst += (gphStbFB_info.pfb_info[0]->var.bits_per_pixel/8);
            }
        }

        next_xpos = xpos + ((scale*X_PIXELS_PER_FONT + SPACE) * ++font_idx);
        next_ypos = ypos;
    }

    blit_osd(gphStbFB_info.pfb_info[0]->var.xoffset, gphStbFB_info.pfb_info[0]->var.yoffset, gphStbFB_info.pfb_info[0]->var.xres, gphStbFB_info.pfb_info[0]->var.yres);
}
void set_stanbymode(void)
{
    fpm_text_Set__bsp(" ", 1);
    micom_standby();
    NEXUS_VideoDecoder_Stop(bsp_p->VideoDecoderHandle[0]);
    audio_decoder_stop();
    NEXUS_StcChannel_Close(bsp_p->stcChannel);
#if (BCHP_CHIP == 7346) || (BCHP_CHIP == 7439)
    NEXUS_StcChannel_Close(bsp_p->stcPIPChannel);
#endif
    NEXUS_AudioOutput_RemoveAllInputs(NEXUS_AudioDac_GetConnector(bsp_p->platformConfig.outputs.audioDacs[0]));

    /* removing VideoDecoder from VideoWindow allows AVD to be powered down */
    NEXUS_VideoWindow_RemoveInput(bsp_p->VideoWindowHandle[0], NEXUS_VideoDecoder_GetConnector(bsp_p->VideoDecoderHandle[0]));
    NEXUS_VideoWindow_RemoveInput(bsp_p->VideoWindowHandle[1], NEXUS_VideoDecoder_GetConnector(bsp_p->VideoDecoderHandle[0]));
    StopDMX4RestartE2();
    Shutdown_AV(true);
    antenna_power_Set(0,0);
    antenna_power_Set(1,0);
    NEXUS_VideoInput_Shutdown(NEXUS_VideoDecoder_GetConnector(bsp_p->VideoDecoderHandle[0]));
    NEXUS_VideoDecoder_Close(bsp_p->VideoDecoderHandle[0]);
    audio_decoder_close();
    NEXUS_Display_Close(bsp_p->display[0]);
    NEXUS_Display_Close(bsp_p->display[1]);
    NEXUS_Platform_Uninit();
}

#if (BCHP_CHIP == 7346 || BCHP_CHIP == 7439) 	/* iqon-uhd-3dupdate-wslee */
static void _3d_mode__(NEXUS_VideoOrientation orientation)
{
#if (BCHP_CHIP == 7439) 	/* iqon-uhd-3dupdate-wslee */
    NEXUS_VideoInputSettings videoInputSettings;
    NEXUS_VideoInput_GetSettings(NEXUS_VideoDecoder_GetConnector(bsp_p->VideoDecoderHandle[0]), &videoInputSettings);
    videoInputSettings.video3DSettings.orientation = orientation;
    videoInputSettings.video3DSettings.enable = orientation ? true : false;
    videoInputSettings.video3DSettings.overrideOrientation = orientation ? true : false;
    nexus_ret=NEXUS_VideoInput_SetSettings(NEXUS_VideoDecoder_GetConnector(bsp_p->VideoDecoderHandle[0]), &videoInputSettings);
    BDBG_ASSERT(nexus_ret==NEXUS_SUCCESS);

    NEXUS_DisplaySettings displaySettings;
    NEXUS_Display_GetSettings(bsp_p->display[0], &displaySettings);
    displaySettings.display3DSettings.orientation = orientation;
    displaySettings.display3DSettings.overrideOrientation = orientation ? true : false;
    nexus_ret=NEXUS_Display_SetSettings(bsp_p->display[0], &displaySettings);
    BDBG_ASSERT(nexus_ret==NEXUS_SUCCESS);

    /* if orientation == 1, value is not setted sometiems therefore I retried 5 times for saving */
    if(orientation == 1)  /* 1= NEXUS_VideoOrientation_e3D_LeftRight */ 
    {
        int  num;
        for(num=0;num<5;num++)
        {
            NEXUS_Display_GetSettings(bsp_p->display[0], &displaySettings);
            if(displaySettings.display3DSettings.orientation == 1)
                break;
            displaySettings.display3DSettings.orientation = orientation;
            displaySettings.display3DSettings.overrideOrientation = orientation ? true : false;
            nexus_ret=NEXUS_Display_SetSettings(bsp_p->display[0], &displaySettings);
            BDBG_ASSERT(nexus_ret==NEXUS_SUCCESS);
        }
        if (num == 5)
        {
    		/* if saving is fail, first set to value(2) and retry to set value(1) */
            NEXUS_Display_GetSettings(bsp_p->display[0], &displaySettings);
            displaySettings.display3DSettings.orientation = 2;
            displaySettings.display3DSettings.overrideOrientation = 1;
            nexus_ret=NEXUS_Display_SetSettings(bsp_p->display[0], &displaySettings);
            BDBG_ASSERT(nexus_ret==NEXUS_SUCCESS);
            for(num=0;num<5;num++)
            {
                NEXUS_Display_GetSettings(bsp_p->display[0], &displaySettings);
                printk("###[%d] orientation[%d]=[%d][%d]\n",num,orientation,displaySettings.display3DSettings.orientation,displaySettings.display3DSettings.overrideOrientation);
                if(displaySettings.display3DSettings.orientation == 1)
                    break;
                displaySettings.display3DSettings.orientation = 1;
                displaySettings.display3DSettings.overrideOrientation = 1;
                nexus_ret=NEXUS_Display_SetSettings(bsp_p->display[0], &displaySettings);
                BDBG_ASSERT(nexus_ret==NEXUS_SUCCESS);
            }
    	}
    }
#else
    NEXUS_VideoInputSettings videoInputSettings;
    NEXUS_VideoInput_GetSettings(NEXUS_VideoDecoder_GetConnector(bsp_p->VideoDecoderHandle[0]), &videoInputSettings);
    videoInputSettings.video3DSettings.orientation = orientation;
    videoInputSettings.video3DSettings.enable = orientation ? true : false;
    videoInputSettings.video3DSettings.overrideOrientation = orientation ? true : false;
    NEXUS_VideoInput_SetSettings(NEXUS_VideoDecoder_GetConnector(bsp_p->VideoDecoderHandle[0]), &videoInputSettings);

    NEXUS_DisplaySettings displaySettings;
    NEXUS_Display_GetSettings(bsp_p->display[0], &displaySettings);
    displaySettings.display3DSettings.orientation = orientation;
    displaySettings.display3DSettings.overrideOrientation = orientation ? true : false;
    NEXUS_Display_SetSettings(bsp_p->display[0], &displaySettings);
#endif
#if 0
    NEXUS_VideoWindow_GetSettings(bsp_p->VideoWindowHandle[0], &bsp_p->ws[0]);
    NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[0], &bsp_p->ws[0]);

    if (orientation)
    {
        NEXUS_Error rc;
        NEXUS_HdmiOutputStatus hdmiStatus;
        rc = NEXUS_HdmiOutput_GetStatus(bsp_p->platformConfig.outputs.hdmi[0], &hdmiStatus);
        if ( !rc && hdmiStatus.connected )
        {
            /* If current display format is not supported by monitor, switch to monitor's preferred format. 
               If other connected outputs do not support the preferred format, a harmless error will occur. */
            for(rc = 0; rc < NEXUS_VideoFormat_eMax; rc++)
                if ( !hdmiStatus.videoFormatSupported[displaySettings.format] ) {
                    _video_resolution = get_eVR(hdmiStatus.preferredVideoFormat);
                }
        }
    }
#endif

    debug_fb("# [%s] ==== \n",__func__);
    display_resolution_Set__(_video_resolution, _video_format, true);

    set_video_size_video1(bsp_p->pip_ws.position.x, bsp_p->pip_ws.position.y, bsp_p->pip_ws.position.width, bsp_p->pip_ws.position.height, "3dmode");

    NEXUS_HdmiOutputVendorSpecificInfoFrame vsi;
    NEXUS_HdmiOutput_GetVendorSpecificInfoFrame(bsp_p->platformConfig.outputs.hdmi[0], &vsi);
    switch (orientation)
    {
        case NEXUS_VideoOrientation_e3D_LeftRight:
            vsi.hdmiVideoFormat = NEXUS_HdmiVendorSpecificInfoFrame_HDMIVideoFormat_e3DFormat;
            vsi.hdmi3DStructure = NEXUS_HdmiVendorSpecificInfoFrame_3DStructure_eSidexSideHalf;
            break;
        case NEXUS_VideoOrientation_e3D_OverUnder:
            vsi.hdmiVideoFormat = NEXUS_HdmiVendorSpecificInfoFrame_HDMIVideoFormat_e3DFormat;
            vsi.hdmi3DStructure = NEXUS_HdmiVendorSpecificInfoFrame_3DStructure_eTopAndBottom;
            break;
        default:
            vsi.hdmiVideoFormat = NEXUS_HdmiVendorSpecificInfoFrame_HDMIVideoFormat_eNone;
            break;
    }
    NEXUS_HdmiOutput_SetVendorSpecificInfoFrame(bsp_p->platformConfig.outputs.hdmi[0], &vsi);
}

static void _3d_callback(void *pContext, int param) 
{
    NEXUS_VideoDecoder3DTVStatus status;
    NEXUS_VideoDecoder_Get3DTVStatus(bsp_p->VideoDecoderHandle[0], &status);
    printk("### codec %d\n", status.codec);
    printk("### format %d\n", status.format);

    if (status.format < NEXUS_VideoOrientation_eMax)
        _3d_mode__(status.format);
}

void _3d_mode(NEXUS_VideoOrientation orientation)
{
    NEXUS_VideoDecoderExtendedSettings extSettings;
    NEXUS_VideoDecoder_GetExtendedSettings(bsp_p->VideoDecoderHandle[0], &extSettings);
    if (orientation == 3)
    {
        _3d_mode__(NEXUS_VideoOrientation_e2D);
        extSettings.s3DTVStatusEnabled = true;
    }
    else
        extSettings.s3DTVStatusEnabled = false;
    extSettings.s3DTVStatusChanged.callback = _3d_callback;
    extSettings.s3DTVStatusChanged.context = bsp_p->VideoDecoderHandle[0];
    NEXUS_VideoDecoder_SetExtendedSettings(bsp_p->VideoDecoderHandle[0], &extSettings);

    if (orientation < NEXUS_VideoOrientation_eMax)
    {
        _3d_mode__(orientation);
    }
}
EXPORT_SYMBOL(_3d_mode);

void _3d_zoffset(int zoffset)
{
#if 0
    NEXUS_DisplaySettings displaySettings;
    NEXUS_Display_GetSettings(bsp_p->display[0], &displaySettings);

    if (!displaySettings.display3DSettings.overrideOrientation)
        return 0;

    NEXUS_VideoFormatInfo displayFormatInfo;
    NEXUS_VideoFormat_GetInfo(displaySettings.format, &displayFormatInfo);

    NEXUS_VideoWindow_GetSettings(bsp_p->VideoWindowHandle[0], &bsp_p->ws[0]);
#if 1
    switch (displaySettings.display3DSettings.orientation)
    {
        case NEXUS_VideoOrientation_e3D_LeftRight:
            bsp_p->ws[0].position.x = zoffset < 0 ? 0 : zoffset;
            bsp_p->ws[0].position.width = displayFormatInfo.width / 2 - abs(zoffset);
            break;
        case NEXUS_VideoOrientation_e3D_OverUnder:
            bsp_p->ws[0].position.x = zoffset < 0 ? 0 : zoffset;
            bsp_p->ws[0].position.width = displayFormatInfo.width - 2*abs(zoffset);
            break;
    }
#endif
    bsp_p->ws[0].window3DSettings.rightViewOffset = -zoffset;
    NEXUS_VideoWindow_SetSettings(bsp_p->VideoWindowHandle[0], &bsp_p->ws[0]);
#else
    NEXUS_GraphicsSettings graphicsSettings;
    NEXUS_Display_GetGraphicsSettings(bsp_p->display[0], &graphicsSettings);
    graphicsSettings.graphics3DSettings.rightViewOffset = zoffset;
    NEXUS_Display_SetGraphicsSettings(bsp_p->display[0], &graphicsSettings);
#endif
}
EXPORT_SYMBOL(_3d_zoffset);
#endif

