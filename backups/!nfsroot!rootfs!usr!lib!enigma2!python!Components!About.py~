# -*- coding: utf-8 -*-
import sys, os, time
from Tools.HardwareInfo import HardwareInfo

def getVersionString():
	return getImageVersionString()

def getImageVersionString():
	try:
		if os.path.isfile('/var/lib/opkg/status'):
			st = os.stat('/var/lib/opkg/status')
		else:
			st = os.stat('/usr/lib/ipkg/status')
		tm = time.localtime(st.st_mtime)
		if tm.tm_year >= 2011:
			# [ IQON : by LeeWS : %Y-%m-%d -> %m-%d-%Y
			return time.strftime("%d-%m-%Y %H:%M:%S", tm)
			# IQON ] : by LeeWS
	except:
		pass
	return _("unavailable")

def getFlashDateString():
	try:
		return time.strftime(_("%Y-%m-%d %H:%M"), time.localtime(os.stat("/boot").st_ctime))
	except:
		return _("unknown")

def getEnigmaVersionString():
	import enigma
	enigma_version = enigma.getEnigmaVersionString()
	if '-(no branch)' in enigma_version:
		enigma_version = enigma_version [:-12]
	# [ IQON : by LeeWS : return enigma_version is replaced to below 2 lines.
	list = enigma_version.split("-")
	return list[0] + "-" + list[1] + "-" + list[2]
	# IQON ] : by LeeWS
	return enigma_version

########################################################################################
def getBoxType():
	try:
		file = open('/etc/versioninfo', 'r')
		lines = file.readlines()
		file.close()
		
		for boxtype in lines:
			if boxtype.startswith('getBoxtype'):
				return boxtype.split()[1]
	except:
		return _("unknown")

def getImageDistro():
	try:
		file = open('/etc/versioninfo', 'r')
		lines = file.readlines()
		file.close()
		
		for distro in lines:
			if distro.startswith('getImageDistro'):
				return distro.split()[1]
	except:
		return _("unknown")

def getMachineName():
	try:
		file = open('/proc/stb/info/modelname', 'r')
		lines = file.readlines()
		file.close()

		for name in lines:
			return name
	except:
		return _("unknown")

def getMachineBrand():
	try:
		file = open('/etc/versioninfo', 'r')
		lines = file.readlines()
		file.close()

		for brand in lines:
			if brand.startswith('getMachineBrand'):
				return brand.split()[1]
	except:
		return _("unknown")

def getImageVersion():
	try:
		file = open('/etc/versioninfo', 'r')
		lines = file.readlines()
		file.close()

		for version in lines:
			if version.startswith('getImageVersion'):
				return version.split()[1]
	except:
		return _("unknown")

def getMachineKernelFile():
	try:
		file = open('/etc/versioninfo', 'r')
		lines = file.readlines()
		file.close()

		for kernel in lines:
			if kernel.startswith('getMachineKernelfile'):
				return kernel.split()[1]
	except:
		return _("unknown")

def getMachineInitrdfile():
	try:
		file = open('/etc/versioninfo', 'r')
		lines = file.readlines()
		file.close()

		for kernel in lines:
			if kernel.startswith('getMachineInitrdfile'):
				return kernel.split()[1]
	except:
		return _("unknown")
        
def getImageFolder():
	try:
		file = open('/etc/versioninfo', 'r')
		lines = file.readlines()
		file.close()

		for kernel in lines:
			if kernel.startswith('getImageFolder'):
				return kernel.split()[1]
	except:
		return _("unknown")

        
def getMachineUBINIZE():
	try:
		file = open('/etc/versioninfo', 'r')
		lines = file.readlines()
		file.close()

		for kernel in lines:
			if kernel.startswith('getMachineUBINIZE'):
				return kernel.split()[1]
	except:
		return _("unknown")

def getMachineMKUBIFS():
	try:
		file = open('/etc/versioninfo', 'r')
		lines = file.readlines()
		file.close()

		for kernel in lines:
			if kernel.startswith('getMachineMKUBIFS'):
				return kernel.split()[1]
	except:
		return _("unknown")

def getImageFileSystem():
	try:
		file = open('/etc/versioninfo', 'r')
		lines = file.readlines()
		file.close()

		for kernel in lines:
			if kernel.startswith('getImageFileSystem'):
				return kernel.split()[1]
	except:
		return _("unknown")
	
def getMachineMtdKernel():
	try:
		file = open('/etc/versioninfo', 'r')
		lines = file.readlines()
		file.close()

		for kernel in lines:
			if kernel.startswith('getMachineMtdKernel'):
				return kernel.split()[1]
	except:
		return _("unknown")

def getMachineMtdRoot():
	try:
		file = open('/etc/versioninfo', 'r')
		lines = file.readlines()
		file.close()

		for root in lines:
			if root.startswith('getMachineMtdRoot'):
				return root.split()[1]
	except:
		return _("unknown")        

def getMachineBuild():
	try:
		file = open('/etc/versioninfo', 'r')
		lines = file.readlines()
		file.close()

		for kernel in lines:
			if kernel.startswith('getMachineBuild'):
				return kernel.split()[1]
	except:
		return _("unknown")
	
def getMachineRootFile():
	try:
		file = open('/etc/versioninfo', 'r')
		lines = file.readlines()
		file.close()

		for rootfs in lines:
			if rootfs.startswith('getMachineRootfile'):
				return rootfs.split()[1]
	except:
		return _("unknown")
	
def getGStreamerVersionString():
	import enigma
	return enigma.getGStreamerVersionString()

def getKernelVersionString():
	try:
		return open("/proc/version","r").read().split(' ', 4)[2].split('-',2)[0]
	except:
		return _("unknown")

def getHardwareTypeString():
	return HardwareInfo().get_device_string()

def getImageTypeString():
	try:
		return open("/etc/issue").readlines()[-2].capitalize().strip()[:-6]
	except:
		return _("undefined")
def getBrandString():
	try:
		return open("/etc/.brandtype","r").read()
	except:
		return _("unknown")

# [ IQON : by knuth
def getHardwareModelString():
	return open("/proc/stb/info/modelname","r").read()

def getMacAddressString(ifname):
	import uuid
	return 	':'.join(['{:02x}'.format((uuid.getnode() >> i) & 0xff) for i in range(0,8*6,8)][::-1])

def getMicomVersionString():
	try:
		import fcntl, array
		f = array.array('h', [0])
		fp = open('/dev/dbox/fp0', 'w')
		fcntl.ioctl(fp.fileno(), 0x428, f, 1)
		return '%s' % f.tolist()[0]
	except:
		return _("unknown")

def getCPUInfoString():
	try:
		cpu_count = 0
		for line in open("/proc/cpuinfo").readlines():
			line = [x.strip() for x in line.strip().split(":")]
			if line[0] == "system type":
				processor = line[1].split()[0]
			if line[0] == "cpu MHz":
				cpu_speed = "%1.0f" % float(line[1])
				cpu_count += 1
		if os.path.isfile('/proc/stb/fp/temp_sensor_avs'):
			temperature = open("/proc/stb/fp/temp_sensor_avs").readline().replace('\n','')
			return "%s %s MHz (%s) %s°C" % (processor, cpu_speed, ngettext("%d core", "%d cores", cpu_count) % cpu_count, temperature)
		return "%s %s MHz (%s)" % (processor, cpu_speed, ngettext("%d core", "%d cores", cpu_count) % cpu_count)
	except:
		return _("undefined")

def getDriverInstalledDate():
	try:
		from glob import glob
		driver = [x.split("-")[-2:-1][0][-8:] for x in open(glob("/var/lib/opkg/info/*-dvb-modules-*.control")[0], "r") if x.startswith("Version:")][0]
		return  "%s-%s-%s" % (driver[:4], driver[4:6], driver[6:])
	except:
		return _("unknown")

def getDriverDate():
        try:
		from glob import glob
		driver = [x.split("-")[-2:-1][0][-8:] for x in open(glob("/var/lib/opkg/info/*-dvb-modules-*.control")[0], "r") if x.startswith("Version:")][0]
		return  "%s-%s-%s" % (driver[:4], driver[4:6], driver[6:])
	except:
		return _("unknown")
	
def getChipSetString():
	try:
		f = open('/proc/stb/info/chipset', 'r')
		chipset = f.read()
		f.close()
		return str(chipset.lower().replace('\n','').replace('bcm',''))
	except IOError:
		return "unavailable"

def getCPUSpeedString():
	try:
		file = open('/proc/cpuinfo', 'r')
		lines = file.readlines()
		for x in lines:
			splitted = x.split(': ')
			if len(splitted) > 1:
				splitted[1] = splitted[1].replace('\n','')
				if splitted[0].startswith("cpu MHz"):
					mhz = float(splitted[1].split(' ')[0])
					if mhz and mhz >= 1000:
						mhz = "%s GHz" % str(round(mhz/1000,1))
					else:
						mhz = "%s MHz" % str(round(mhz,1))
                                else:
					mhz = ""
		file.close()
		return mhz 
	except IOError:
		return "unavailable"

def getCPUString():
	try:
		file = open('/proc/cpuinfo', 'r')
		lines = file.readlines()
		for x in lines:
			splitted = x.split(': ')
			if len(splitted) > 1:
				splitted[1] = splitted[1].replace('\n','')
				if splitted[0].startswith("system type"):
					system = splitted[1].split(' ')[0]
                                else:
					splitted[0].startswith("model name")
					system = splitted[1].split(' ')[0]
		file.close()
		return system
	except IOError:
		return "unavailable"

def getPythonVersionString():
	try:
		import commands
		status, output = commands.getstatusoutput("python -V")
		return output.split(' ')[1]
	except:
		return _("unknown")
def getCpuCoresString():
	try:
		file = open('/proc/cpuinfo', 'r')
		lines = file.readlines()
		for x in lines:
			splitted = x.split(': ')
			if len(splitted) > 1:
				splitted[1] = splitted[1].replace('\n','')
				if splitted[0].startswith("processor"):
					if int(splitted[1]) > 0:
						cores = 2
					else:
						cores = 1
		file.close()
		return cores
	except IOError:
		return "unavailable"

def getImageTypeString():
	try:
		return open("/etc/issue").readlines()[-2].capitalize().strip()[:-6]
	except:
		pass
	return _("undefined")

# For modules that do "from About import about"
about = sys.modules[__name__]
